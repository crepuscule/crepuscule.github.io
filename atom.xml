<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crepuscule</title>
  <subtitle>Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Crepuscule.com/"/>
  <updated>2017-04-05T09:24:12.115Z</updated>
  <id>http://Crepuscule.com/</id>
  
  <author>
    <name>crepuscule_scintillant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Instances Logs</title>
    <link href="http://Crepuscule.com/Operation-Maintenance/Docker/Operation%20&amp;%20Maintenance/Docker/Docker-Instances-Logs/"/>
    <id>http://Crepuscule.com/Operation-Maintenance/Docker/Operation &amp; Maintenance/Docker/Docker-Instances-Logs/</id>
    <published>2017-04-05T04:52:33.000Z</published>
    <updated>2017-04-05T09:24:12.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Logs"><a href="#Docker-Logs" class="headerlink" title="Docker Logs"></a>Docker Logs</h2><h3 id="2017-4-5-13-00"><a href="#2017-4-5-13-00" class="headerlink" title="2017.4.5 13:00"></a>2017.4.5 13:00</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">使用镜像：</div><div class="line">hub.c.163.com/library/owncloud        latest              8720bc439c27        8 weeks ago         549 MB</div><div class="line">使用命令：</div><div class="line">[crepuscule@bogon ~]$ docker run --name owncloud-v1 -p 8080:80 -v /tools/docker/apps:/var/www/html/apps -v /tools/docker/config:/var/www/html/config  -v /tools/docker/data:/var/www/html/data hub.c.163.com/library/owncloud</div><div class="line">[crepuscule@bogon owncloud]$ docker inspect owncloud-v1</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;Id&quot;: &quot;ec4d0ebe08a3797f79d04dd04cc25c070c772831c3b39217be8a4766e72e662d&quot;,</div><div class="line">        &quot;Created&quot;: &quot;2017-04-05T04:56:34.806584499Z&quot;,</div><div class="line">        &quot;Path&quot;: &quot;/entrypoint.sh&quot;,</div><div class="line">        &quot;Args&quot;: [</div><div class="line">            &quot;apache2-foreground&quot;</div><div class="line">        ],</div><div class="line">        &quot;State&quot;: &#123;</div><div class="line">            &quot;Status&quot;: &quot;running&quot;,</div><div class="line">            &quot;Running&quot;: true,</div><div class="line">            &quot;Paused&quot;: false,</div><div class="line">            &quot;Restarting&quot;: false,</div><div class="line">            &quot;OOMKilled&quot;: false,</div><div class="line">            &quot;Dead&quot;: false,</div><div class="line">            &quot;Pid&quot;: 4066,</div><div class="line">            &quot;ExitCode&quot;: 0,</div><div class="line">            &quot;Error&quot;: &quot;&quot;,</div><div class="line">            &quot;StartedAt&quot;: &quot;2017-04-05T04:56:35.508677216Z&quot;,</div><div class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        &quot;HostConfig&quot;: &#123;</div><div class="line">            &quot;Binds&quot;: [</div><div class="line">                &quot;/tools/docker/config:/var/www/html/config&quot;,</div><div class="line">                &quot;/tools/docker/data:/var/www/html/data&quot;,</div><div class="line">                &quot;/tools/docker/apps:/var/www/html/apps&quot;</div><div class="line">            ],</div><div class="line"></div><div class="line">        &quot;Mounts&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;bind&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/tools/docker/apps&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html/apps&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;volume&quot;,</div><div class="line">                &quot;Name&quot;: &quot;bb141ae7c198757a5f05929ddc9e291b5cbcc3dcf9273b30a8a00d5921409e0c&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/bb141ae7c198757a5f05929ddc9e291b5cbcc3dcf9273b30a8a00d5921409e0c/_data&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html&quot;,</div><div class="line">                &quot;Driver&quot;: &quot;local&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;bind&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/tools/docker/config&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html/config&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;bind&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/tools/docker/data&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html/data&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        &quot;Config&quot;: &#123;</div><div class="line">            &quot;Hostname&quot;: &quot;ec4d0ebe08a3&quot;,</div><div class="line">            &quot;Domainname&quot;: &quot;&quot;,</div><div class="line">            &quot;User&quot;: &quot;&quot;,</div><div class="line">            &quot;AttachStdin&quot;: false,</div><div class="line">            &quot;AttachStdout&quot;: true,</div><div class="line">            &quot;AttachStderr&quot;: true,</div><div class="line">            &quot;ExposedPorts&quot;: &#123;</div><div class="line">                &quot;80/tcp&quot;: &#123;&#125;</div><div class="line">            &#125;,</div><div class="line"></div><div class="line">            &quot;Cmd&quot;: [</div><div class="line">                &quot;apache2-foreground&quot;</div><div class="line">            ],</div><div class="line">            &quot;ArgsEscaped&quot;: true,</div><div class="line">            &quot;Image&quot;: &quot;hub.c.163.com/library/owncloud&quot;,</div><div class="line">            &quot;Volumes&quot;: &#123;</div><div class="line">                &quot;/var/www/html&quot;: &#123;&#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;WorkingDir&quot;: &quot;/var/www/html&quot;,</div><div class="line">            &quot;Entrypoint&quot;: [</div><div class="line">                &quot;/entrypoint.sh&quot;</div><div class="line">            ],</div><div class="line">            &quot;OnBuild&quot;: null,</div><div class="line">            &quot;Labels&quot;: &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">        &quot;NetworkSettings&quot;: &#123;</div><div class="line"></div><div class="line">            &quot;Ports&quot;: &#123;</div><div class="line">                &quot;80/tcp&quot;: [</div><div class="line">                    &#123;</div><div class="line">                        &quot;HostIp&quot;: &quot;0.0.0.0&quot;,</div><div class="line">                        &quot;HostPort&quot;: &quot;8080&quot;</div><div class="line">                    &#125;</div><div class="line">                ]</div><div class="line">            &#125;,</div></pre></td></tr></table></figure>
<p>运行情况：<br>  运行正常，但是如果使用mysql数据库，需要使用外挂的mysql容器实现，目前使用的是</p>
<h3 id="2017-4-5-16-00"><a href="#2017-4-5-16-00" class="headerlink" title="2017.4.5 16:00"></a>2017.4.5 16:00</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">下载镜像，</div><div class="line">daocloud.io/library/mysql，它可以使用volumes</div><div class="line">使用命令：</div><div class="line">docker pull daocloud.io/library/mysql:8</div><div class="line">[crepuscule@bogon ~]$ docker run --name owncloud-mysql -v /tools/docker/mysql:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678  daocloud.io/library/mysql:8</div><div class="line"><span class="comment"># 使用-e 指定了该数据库容器的密码</span></div><div class="line"></div><div class="line">[crepuscule@bogon ~]$ docker run --name owncloud-v2 --link owncloud-mysql:mysql -p 8080:80 -v /tools/docker/owncloud:/var/www/html  hub.c.163.com/library/owncloud</div><div class="line">无法连接mysql数据库，想进入owncloud内查看mysql情况，发现mysql命令根本无法使用，这里没有安装mysql</div></pre></td></tr></table></figure>
<h3 id="2017-4-5-17-00"><a href="#2017-4-5-17-00" class="headerlink" title="2017.4.5 17:00"></a>2017.4.5 17:00</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">使用centos镜像尝试容器间数据库连接是否需要两个容器均安装mysql</div><div class="line">首先运行一个mysql实例</div><div class="line">[crepuscule@bogon ~]$ docker run --name centos-mysql -v /tools/testmysql/mysql:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678  daocloud.io/library/mysql:8</div><div class="line">接着运行centos镜像，使用--link参数</div><div class="line">[crepuscule@bogon ~]$  docker run -it --name centos-test-mysql --link centos-mysql:mysql centos /bin/bash</div><div class="line">镜像内没有安装mysql 也不知道如何连接外部mysql容器</div><div class="line">于是yum 安装mysql</div><div class="line">[crepuscule@bogon ~]$ yum list | grep mysql</div><div class="line">[crepuscule@bogon ~]$ yum install -y mysql-server mysql mysql-deve</div><div class="line">[crepuscule@bogon ~]$ service mysqld start</div><div class="line">或者：</div><div class="line">[crepuscule@bogon ~]$ /etc/init.d/mysqld start</div><div class="line">或者centos7使用：</div><div class="line">[crepuscule@bogon ~]$ systemctl start mysql</div><div class="line">结果报错</div><div class="line">[root@fcef23c4f6cb init.d]$ systemctl start mysql</div><div class="line">Failed to get D-Bus connection: Operation not permitted</div></pre></td></tr></table></figure>
<blockquote>
<p>因为docker内的root并非真的root，<br>这个的原因是因为dbus-daemon没能启动。其实systemctl并不是不可以使用。将你的CMD或者entrypoint设置为/usr/sbin/init即可。会自动将dbus等服务启动起来。<br>   然后就可以使用systemctl了。命令如下：<br>   docker run –privileged  -ti -e “container=docker”  -v /sys/fs/cgroup:/sys/fs/cgroup  centos  /usr/sbin/init</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker-Logs&quot;&gt;&lt;a href=&quot;#Docker-Logs&quot; class=&quot;headerlink&quot; title=&quot;Docker Logs&quot;&gt;&lt;/a&gt;Docker Logs&lt;/h2&gt;&lt;h3 id=&quot;2017-4-5-13-00&quot;&gt;&lt;a href=&quot;#201
    
    </summary>
    
      <category term="Operation &amp; Maintenance" scheme="http://Crepuscule.com/categories/Operation-Maintenance/"/>
    
      <category term="Docker" scheme="http://Crepuscule.com/categories/Operation-Maintenance/Docker/"/>
    
    
      <category term="Docker" scheme="http://Crepuscule.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Learning Note 2</title>
    <link href="http://Crepuscule.com/Operation-Maintenance/Docker/Operation%20&amp;%20Maintenance/Docker/Docker-Learning-Note-2/"/>
    <id>http://Crepuscule.com/Operation-Maintenance/Docker/Operation &amp; Maintenance/Docker/Docker-Learning-Note-2/</id>
    <published>2017-04-03T06:40:00.000Z</published>
    <updated>2017-04-04T10:47:55.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-学习笔记-2"><a href="#Docker-学习笔记-2" class="headerlink" title="Docker 学习笔记 2"></a>Docker 学习笔记 2</h2><h3 id="Docker-的数据持久化"><a href="#Docker-的数据持久化" class="headerlink" title="Docker 的数据持久化"></a>Docker 的数据持久化</h3><p>Docker镜像是通过每一次修改时增加数据层的方式进行的。每一次commit新的镜像均会向镜像的上面新加数据层。而使用run命令执行的则是以镜像为基础打造的一个实例，即容器(container)。容器在运行中被修改的数据在执行commit命令后会写入新的镜像。<br>所以docker在实际的应用中，比如web应用中。会有很多容器内部或者web app用户生成的数据。这些数据有些时候是需要保存起来而且不允许丢失的。<br>如果将这写数据直接保存在docker容器中显然会大幅降低docker的易用性，而且会致使容器数据层频繁增加影响效率。除此之外，容器之间的数据通信也是问题。而如果在实际运维中，容器需要更换，那么容器中的数据就需要要从一个容器中转移到另一个容器或者干脆可以共享。<br>为了能够保存(持久化)数据以及共享容器间的数据,Docker提出了Volume的概念.简单来说,Volume就是目录或者文件,它可以绕过默认的联合文件系统,而以正常的文件或者目录的形式存在于宿主机上。<br><a id="more"></a></p>
<h3 id="运行时使用-v参数指定volume"><a href="#运行时使用-v参数指定volume" class="headerlink" title="运行时使用-v参数指定volume"></a>运行时使用-v参数指定volume</h3><p>这里使用centos镜像，在运行时使用 -v 参数指定volume在容器中的挂载目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">[crepuscule@bogon ~]$ docker run -it --name volume-test -v /data centos /bin/bash</div><div class="line">[root@a9ebab0fa49e /]<span class="comment"># 已进入容器内</span></div><div class="line">另起一终端：</div><div class="line">[crepuscule@bogon ~]$ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">a9ebab0fa49e        centos              <span class="string">"/bin/bash"</span>         45 seconds ago      Up 43 seconds                           volume-test</div><div class="line">[crepuscule@bogon ~] docker inspect volume-test</div><div class="line"><span class="string">"Mounts"</span>: [</div><div class="line">           &#123;</div><div class="line">               <span class="string">"Type"</span>: <span class="string">"volume"</span>,</div><div class="line">               <span class="string">"Name"</span>: <span class="string">"c81f996ca6f5c3715e51f8f37ee640031661917894b5e5d4cf9acfe0dd171ab3"</span>,</div><div class="line">               <span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/c81f996ca6f5c3715e51f8f37ee640031661917894b5e5d4cf9acfe0dd171ab3/_data"</span>,  <span class="comment"># volumes在宿主机中的真实路径</span></div><div class="line">               <span class="string">"Destination"</span>: <span class="string">"/data"</span>, <span class="comment"># volumes在docker容器中的挂载点</span></div><div class="line">               <span class="string">"Driver"</span>: <span class="string">"local"</span>,</div><div class="line">               <span class="string">"Mode"</span>: <span class="string">""</span>,</div><div class="line">               <span class="string">"RW"</span>: <span class="literal">true</span>,</div><div class="line">               <span class="string">"Propagation"</span>: <span class="string">""</span></div><div class="line">           &#125;</div><div class="line">       ],</div><div class="line">       <span class="string">"Config"</span>: &#123;</div><div class="line">           <span class="string">"Hostname"</span>: <span class="string">"a9ebab0fa49e"</span>,</div><div class="line">           <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">           <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">           <span class="string">"AttachStdin"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"AttachStdout"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"AttachStderr"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"Tty"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"OpenStdin"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"StdinOnce"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"Env"</span>: [</div><div class="line">               <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line">           ],</div><div class="line">           <span class="string">"Cmd"</span>: [</div><div class="line">               <span class="string">"/bin/bash"</span></div><div class="line">           ],</div><div class="line">           <span class="string">"Image"</span>: <span class="string">"centos"</span>,</div><div class="line">           <span class="string">"Volumes"</span>: &#123;   <span class="comment"># 此容器的volumes仅有/data</span></div><div class="line">               <span class="string">"/data"</span>: &#123;&#125;</div><div class="line">           &#125;,</div><div class="line">           <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</div><div class="line">           <span class="string">"Entrypoint"</span>: null,</div><div class="line">           <span class="string">"OnBuild"</span>: null,</div><div class="line">           <span class="string">"Labels"</span>: &#123;</div><div class="line">               <span class="string">"build-date"</span>: <span class="string">"20161214"</span>,</div><div class="line">               <span class="string">"license"</span>: <span class="string">"GPLv2"</span>,</div><div class="line">               <span class="string">"name"</span>: <span class="string">"CentOS Base Image"</span>,</div><div class="line">               <span class="string">"vendor"</span>: <span class="string">"CentOS"</span></div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">[root@bogon volumes]$ <span class="built_in">cd</span> /var/lib/docker/volumes/c81f996ca6f5c3715e51f8f37ee640031661917894b5e5d4cf9acfe0dd171ab3/_data</div><div class="line"><span class="comment"># 这里就是容器挂载的目录</span></div><div class="line">[root@bogon _data]$ mkdir <span class="built_in">test</span></div><div class="line">[root@bogon _data]$ ls</div><div class="line"><span class="built_in">test</span></div><div class="line">换到docker内部的终端</div><div class="line">[root@a9ebab0fa49e /]<span class="comment"># ls /data</span></div><div class="line"><span class="built_in">test</span></div><div class="line"><span class="comment"># 容器中的/data就是宿主机中的那个目录</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>你可以把VOLUME理解为，从镜像中复制指定卷的文件夹到本地/var/lib/docker/volumes/xxxxxxxxx/文件夹，然后把本地的该文件夹挂载到容器里面去。<a href="https://segmentfault.com/q/1010000004107293" target="_blank" rel="external">原文</a></p>
</blockquote>
<h3 id="lamp镜像的使用"><a href="#lamp镜像的使用" class="headerlink" title="lamp镜像的使用"></a>lamp镜像的使用</h3><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>在了解了volumes概念之后，就可以使用volumes来为web app的开发运维创造福音。<br>首先，为了提高网速，使用了网易蜂巢的lamp镜像，下载地址(需要注册网易蜂巢帐号并在pull之前login)：<br>docker pull hub.c.163.com/public/lamp:latest<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@bogon _data]$ docker login -u [你的蜂巢邮箱账号或手机号码] -p [你的蜂巢密码] <span class="_">-e</span> [你的邮箱] hub.c.163.com</div><div class="line">Login Succeeded</div><div class="line">[root@bogon _data]$ docker pull hub.c.163.com/public/lamp:latest</div><div class="line">[root@bogon _data]$ docker images</div><div class="line">centos                                latest              67591570dd29        3 months ago        192 MB</div><div class="line">hub.c.163.com/public/lamp             latest              14e0318d2c44        12 months ago       366 MB</div></pre></td></tr></table></figure></p>
<h4 id="了解镜像的描述"><a href="#了解镜像的描述" class="headerlink" title="了解镜像的描述"></a>了解镜像的描述</h4><p>ok，lamp的镜像已经下载完毕，阅读网易蜂巢上LAMP详细描述：</p>
<blockquote>
<p>如何使用LAMP镜像<br>    该镜像基于 hub.c.163.com/public/debian:7.9 镜像制作，推荐最小规格为小型。<br>安装软件:<br>    apache2，站点路径/var/www/<br>    php5<br>    mysql 5.6.29，默认密码为空</p>
</blockquote>
<p>从中我们了解到该lamp镜像中的站点目录为/var/www，那么我们只要将需要部署的web app放在容器中的这个目录下即可。<br>另外，通过dockerfile可以了解到更多信息：</p>
<blockquote>
<p>VOLUME /var/lib/mysql<br>  EXPOSE 22<br>  EXPOSE 80<br>  EXPOSE 3306</p>
</blockquote>
<p>首先该容器暴露了 22，80，3306端口分别用于远程登入，用户访问和mysql数据库连接。然后，该镜像已经在dockerfile中创建了volume，那么在生成该镜像的实例容器时，docker会自动在系统的/var/lib/docker/volumes/中创建挂载目录供容器挂载，但是该目录隐蔽，权限要求高，在分享和维护volume时比较繁琐。</p>
<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><p>所以将使用run命令的参数 -v 来规范volume使之更易使用，下面通过创建一个该镜像的容器实例来说明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@bogon _data]$ docker run --name volumes-test -p 8080:80 -p 33066:3306 -p 2222:22  -v /docker/deployPath:/var/www  -v /docker/mysqldata:/var/lib/mysql     hub.c.163.com/public/lamp</div></pre></td></tr></table></figure></p>
<p>这条命令首先使用 –name 参数指定将要创建的容器实例名字，这样就不必每次均使用容器的id来进行操作<br>三次指定 -p 参数 分别将容器暴露的端口映射到宿主机<br>两次指定 -v 参数<br> -v /docker/deployPath:/var/www 是将宿主机目录/docker/deployPath映射到容器中的/var/www中，那么只要将需要部署的web app文件复制到宿主机目录/docker/deployPath下，就像当于将web app部署到了容器站点根目录下，容器就会进行解析，并在对应的 宿主机ip:8080 中进行渲染。<br> -v /docker/mysqldata:/var/lib/mysql 这里/var/lib/mysql是该镜像默认就有的用于存储mysql数据的volume。将其挂载到指定目录便于管理，识别和数据共享。</p>
<h4 id="容器的访问和维护"><a href="#容器的访问和维护" class="headerlink" title="容器的访问和维护"></a>容器的访问和维护</h4><p>在容器运行之后，我们还可以通过执行exec进入容器内部访问数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon _data]$ docker <span class="built_in">exec</span> -it 容器id/名字 /bin/bash</div><div class="line">root@37d7bc558371<span class="comment"># mysql</span></div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div></pre></td></tr></table></figure></p>
<p>通过上面的参数，lamp镜像所生成的容器实例就可以实现 将自己在宿主机中开发好的网站放在宿主机/docker/deployPath目录中，然后在 宿主机ip:8080 将可以访问到部署的网站，而网站在处理中生成或者接收的数据在宿主机/docker/mysqldata目录可以被访问和维护。<br>如果网站功能需要完善，原先的网站需要被修改。那么先停掉容器，将修改好的文件替换宿主机/docker/deployPath目录中原来的文件，重新启动容器即可。那么，这里运行中的容器就是一个仅进行数据处理，不吸收也不释放数据的引擎。</p>
<h3 id="一些lamp镜像"><a href="#一些lamp镜像" class="headerlink" title="一些lamp镜像"></a>一些lamp镜像</h3><p>[dockerfiles/centos-lamp] (<a href="https://github.com/dockerfiles/centos-lamp" target="_blank" rel="external">https://github.com/dockerfiles/centos-lamp</a>)<br>daocloud pull 命令：docker pull dockerfiles/centos-lamp:latest</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker-学习笔记-2&quot;&gt;&lt;a href=&quot;#Docker-学习笔记-2&quot; class=&quot;headerlink&quot; title=&quot;Docker 学习笔记 2&quot;&gt;&lt;/a&gt;Docker 学习笔记 2&lt;/h2&gt;&lt;h3 id=&quot;Docker-的数据持久化&quot;&gt;&lt;a href=&quot;#Docker-的数据持久化&quot; class=&quot;headerlink&quot; title=&quot;Docker 的数据持久化&quot;&gt;&lt;/a&gt;Docker 的数据持久化&lt;/h3&gt;&lt;p&gt;Docker镜像是通过每一次修改时增加数据层的方式进行的。每一次commit新的镜像均会向镜像的上面新加数据层。而使用run命令执行的则是以镜像为基础打造的一个实例，即容器(container)。容器在运行中被修改的数据在执行commit命令后会写入新的镜像。&lt;br&gt;所以docker在实际的应用中，比如web应用中。会有很多容器内部或者web app用户生成的数据。这些数据有些时候是需要保存起来而且不允许丢失的。&lt;br&gt;如果将这写数据直接保存在docker容器中显然会大幅降低docker的易用性，而且会致使容器数据层频繁增加影响效率。除此之外，容器之间的数据通信也是问题。而如果在实际运维中，容器需要更换，那么容器中的数据就需要要从一个容器中转移到另一个容器或者干脆可以共享。&lt;br&gt;为了能够保存(持久化)数据以及共享容器间的数据,Docker提出了Volume的概念.简单来说,Volume就是目录或者文件,它可以绕过默认的联合文件系统,而以正常的文件或者目录的形式存在于宿主机上。&lt;br&gt;
    
    </summary>
    
      <category term="Operation &amp; Maintenance" scheme="http://Crepuscule.com/categories/Operation-Maintenance/"/>
    
      <category term="Docker" scheme="http://Crepuscule.com/categories/Operation-Maintenance/Docker/"/>
    
    
      <category term="Docker" scheme="http://Crepuscule.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>JAVA in 2017</title>
    <link href="http://Crepuscule.com/uncategorized/JAVA/JAVA-in-2017/"/>
    <id>http://Crepuscule.com/uncategorized/JAVA/JAVA-in-2017/</id>
    <published>2017-03-31T06:47:00.000Z</published>
    <updated>2017-03-31T11:19:35.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA基础注意点"><a href="#JAVA基础注意点" class="headerlink" title="JAVA基础注意点"></a>JAVA基础注意点</h2><h3 id="JAVA的字符类型"><a href="#JAVA的字符类型" class="headerlink" title="JAVA的字符类型"></a>JAVA的字符类型</h3><p>java字符类型采用unicode码，char与整型各类型通用。char可直接由十进制或十六进制整形赋值，亦可以由十六进制的unicode码(使用’\uxxxx’表示)。如果将字符强制类型转换，将输出unicode码对应的十进制数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> hanzi1=<span class="number">20013</span>;</div><div class="line"><span class="keyword">char</span> hanzi2=<span class="number">0x4E2D</span>;</div><div class="line"><span class="keyword">char</span> hanzi3=<span class="string">'\u4E2D'</span>;</div><div class="line"><span class="keyword">char</span> hanzi4=<span class="string">'中'</span>;</div><div class="line">System.out.println(hanzi1);</div><div class="line">System.out.println(hanzi2);</div><div class="line">System.out.println(hanzi3);</div><div class="line">System.out.println((<span class="keyword">int</span>)hanzi4);</div><div class="line"></div><div class="line">console：</div><div class="line">中</div><div class="line">中</div><div class="line">中</div><div class="line"><span class="number">20013</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="JAVA二维数组拷贝的方法"><a href="#JAVA二维数组拷贝的方法" class="headerlink" title="JAVA二维数组拷贝的方法"></a>JAVA二维数组拷贝的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</div><div class="line">	<span class="comment">//声明数组，即创建一个类似C++字符数组的指针</span></div><div class="line">	<span class="keyword">float</span> [] dogs; <span class="comment">//in c++ float * dogs;</span></div><div class="line">	<span class="keyword">char</span>[][] cats;  <span class="comment">//in c++ char **cats;</span></div><div class="line">	Array(<span class="keyword">float</span> []dogs,<span class="keyword">char</span>[][]cats)&#123;	 <span class="comment">//通过外界传入的数据对内部数组初始化</span></div><div class="line"><span class="comment">// 一维数组中</span></div><div class="line">    <span class="comment">//方法一.可以改变引用指向达到赋值的目的。此时也不需要给成员变量初始化（分配内存）</span></div><div class="line">		<span class="keyword">this</span>.dogs=dogs;</div><div class="line">		<span class="comment">//方法二. 不嫌麻烦，使用c++形式的动态数组初始化：</span></div><div class="line">		<span class="keyword">this</span>.dogs=<span class="keyword">new</span> <span class="keyword">float</span>[dogs.length];</div><div class="line">		<span class="comment">//拷贝给已经初始化的数组。使用System静态方法 arraycopy，缺点是参数较多，而且需要数组已被初始化</span></div><div class="line">		System.arraycopy(dogs, <span class="number">0</span>, <span class="keyword">this</span>.dogs, <span class="number">0</span>, dogs.length);</div><div class="line">    <span class="comment">//方法三. 使用Arrays静态方法，不需要初始化目标数组</span></div><div class="line">    <span class="keyword">this</span>.dogs=Arrays.copyOf(dogs,dogs.length);</div><div class="line"><span class="comment">//二维数组</span></div><div class="line">    <span class="comment">//方法一.复制引用</span></div><div class="line">    <span class="keyword">this</span>.cats=cats;</div><div class="line">    <span class="comment">//方法二.深拷贝</span></div><div class="line">		<span class="keyword">this</span>.cats=<span class="keyword">new</span> <span class="keyword">char</span>[cats.length][];</div><div class="line">		<span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">char</span> [] element : cats)&#123;</div><div class="line">			<span class="comment">//使用Arrays静态方法copyOf初始化，优点是不需要数组是分配内存的，其返回值为复制后新数组内存的地址，而且参数较少</span></div><div class="line">			<span class="keyword">this</span>.cats[index++]=Arrays.copyOf(element,element.length );</div><div class="line">		&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异或实现整数的交换"><a href="#异或实现整数的交换" class="headerlink" title="异或实现整数的交换"></a>异或实现整数的交换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x=<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> y=<span class="number">23</span>;</div><div class="line">System.out.println(<span class="string">"x="</span>+x+<span class="string">"y="</span>+y);</div><div class="line">x=x^y;</div><div class="line">y=x^y;</div><div class="line">x=x^y;</div><div class="line">System.out.println(<span class="string">"x="</span>+x+<span class="string">"y="</span>+y);</div><div class="line">--------------------------------</div><div class="line">console:</div><div class="line">x=<span class="number">10</span> y=<span class="number">23</span></div><div class="line">x=<span class="number">23</span> y=<span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="JAVA-SWAP函数的实现"><a href="#JAVA-SWAP函数的实现" class="headerlink" title="JAVA SWAP函数的实现"></a>JAVA SWAP函数的实现</h3><p>方法一：传数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> t = data[a];  </div><div class="line">        data[a] = data[b];  </div><div class="line">        data[b] = t;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">int</span>　[]data=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">data[<span class="number">0</span>]=<span class="number">23</span>;</div><div class="line">data[<span class="number">1</span>]=<span class="number">8</span>;</div><div class="line">swap(data,<span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>方法二：自己封装类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> </span>&#123;     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInteger</span><span class="params">(<span class="keyword">int</span> xIn)</span> </span>&#123; x = xIn; &#125; <span class="comment">// 构造器   </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;  <span class="comment">// 得到值    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> xIn)</span> </span>&#123; x = xIn;&#125; <span class="comment">// 改变值  </span></div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swapping</span> </span>&#123;     </div><div class="line">    <span class="comment">// swap: 传对象引用   </span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(MyInteger rWrap, MyInteger sWrap)</span> </span>&#123;        </div><div class="line">        <span class="comment">// 变值过程       </span></div><div class="line">        <span class="keyword">int</span> t = rWrap.getValue();        </div><div class="line">        rWrap.setValue(sWrap.getValue());        </div><div class="line">        sWrap.setValue(t);     </div><div class="line">    &#125;     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </div><div class="line">        <span class="keyword">int</span> a = <span class="number">23</span>, b = <span class="number">47</span>;        </div><div class="line">        System.out.println(<span class="string">"Before. a:"</span> + a + <span class="string">", b: "</span> + b);        </div><div class="line">        MyInteger aWrap = <span class="keyword">new</span> MyInteger(a);        </div><div class="line">        MyInteger bWrap = <span class="keyword">new</span> MyInteger(b);        </div><div class="line">        swap(aWrap, bWrap);        </div><div class="line">        a = aWrap.getValue();        </div><div class="line">        b = bWrap.getValue();        </div><div class="line">        System.out.println(<span class="string">"After.  a:"</span> + a + <span class="string">", b: "</span> + b);     </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/xuxurui007/article/details/7650168" target="_blank" rel="external">参考文档</a></p>
<h2 id="JAVA面向对象注意点"><a href="#JAVA面向对象注意点" class="headerlink" title="JAVA面向对象注意点"></a>JAVA面向对象注意点</h2><p>###　类</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA基础注意点&quot;&gt;&lt;a href=&quot;#JAVA基础注意点&quot; class=&quot;headerlink&quot; title=&quot;JAVA基础注意点&quot;&gt;&lt;/a&gt;JAVA基础注意点&lt;/h2&gt;&lt;h3 id=&quot;JAVA的字符类型&quot;&gt;&lt;a href=&quot;#JAVA的字符类型&quot; class=&quot;headerlink&quot; title=&quot;JAVA的字符类型&quot;&gt;&lt;/a&gt;JAVA的字符类型&lt;/h3&gt;&lt;p&gt;java字符类型采用unicode码，char与整型各类型通用。char可直接由十进制或十六进制整形赋值，亦可以由十六进制的unicode码(使用’\uxxxx’表示)。如果将字符强制类型转换，将输出unicode码对应的十进制数。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi1=&lt;span class=&quot;number&quot;&gt;20013&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi2=&lt;span class=&quot;number&quot;&gt;0x4E2D&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi3=&lt;span class=&quot;string&quot;&gt;&#39;\u4E2D&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi4=&lt;span class=&quot;string&quot;&gt;&#39;中&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(hanzi1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(hanzi2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(hanzi3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)hanzi4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;20013&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://Crepuscule.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux Installation</title>
    <link href="http://Crepuscule.com/Linux/Linux-Distributions/Arch-Linux/Linux/Linux%20Distributions/Arch%20Linux/Arch-Linux-Installation/"/>
    <id>http://Crepuscule.com/Linux/Linux-Distributions/Arch-Linux/Linux/Linux Distributions/Arch Linux/Arch-Linux-Installation/</id>
    <published>2017-03-30T09:53:24.000Z</published>
    <updated>2017-04-04T10:48:55.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Arch-Linux-Installation"><a href="#Arch-Linux-Installation" class="headerlink" title="Arch Linux Installation"></a>Arch Linux Installation</h2><p>从镜像启动，完成后会以root登录<a href="https://zhuanlan.zhihu.com/p/19556676?columnSlug=mactalk" target="_blank" rel="external">Zsh</a></p>
<blockquote>
<p>Zsh 一款可定制性强，使用方便的强大shell，完全兼容bash但是相比bash又有好多改进的地方。</p>
</blockquote>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="验证是否为uefi启动"><a href="#验证是否为uefi启动" class="headerlink" title="验证是否为uefi启动"></a>验证是否为uefi启动</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ls /sys/firmware/efi/efivars</span></div></pre></td></tr></table></figure>
<p>如果成功执行，则uefi已启动。<br>否则，如果uefi未启动，那么以上命令将不会成功执行。</p>
<h3 id="键盘布局"><a href="#键盘布局" class="headerlink" title="键盘布局"></a>键盘布局</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># loadkeys layout</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h3><p>arch linux的iso镜像只包含了很少的组件，所以安装arch linux需要持续可用的网络<br>使用ping命令判断网络是否联通<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ping www.baidu.com</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>终端下网络连接命令 待整理</p>
</blockquote>
<h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><p>使用fdisk或lsblk</p>
<blockquote>
<p>lsblk 命令显示所有块设备，并显示他们之间的依赖关系</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">首先查看块设备情况</div><div class="line"><span class="comment"># fdisk -l</span></div><div class="line">接着对需要的磁盘进行分区</div><div class="line"><span class="comment"># fdisk /dev/sda</span></div><div class="line">对于efi引导的玩家，建立一个大小200M的efi引导分区和一个根分区即可,接着进行格式化</div><div class="line"><span class="comment"># mkfs -t vfat /dev/sda1</span></div><div class="line"><span class="comment"># mkfs.ext4 /dev/sda2</span></div></pre></td></tr></table></figure>
<h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>首先挂载根分区，将它挂载在/mnt下，接着其他分区依照层次结构依次挂载。<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mount /dev/sda2 /mnt</span></div><div class="line"><span class="comment"># mkdir /mnt/boot</span></div><div class="line"><span class="comment"># mount /dev/sda1 /mnt/boot/</span></div></pre></td></tr></table></figure></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="镜像选择"><a href="#镜像选择" class="headerlink" title="镜像选择"></a>镜像选择</h3><p>在将mirrorlist备份为mirrorlist.backup后，使用rankmirrors测试出最快的6个镜像源：<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rankmirrors -n 6 mirrorlist.backup &gt; mirrorlist</span></div></pre></td></tr></table></figure></p>
<h3 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pacstrap -i /mnt base</span></div></pre></td></tr></table></figure>
<p>网速一般，机械硬盘，安装时间大约20min</p>
<h3 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h3><p>生成Fstab</p>
<blockquote>
<p>文件/etc/fstab包含了静态文件系统信息，定义了存储设备和分区整合到整个系统的方式。mount 命令会读取这个文件，确定设备和分区的挂载选项。</p>
</blockquote>
<p>使用命令：<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span></div><div class="line"><span class="comment"># vi /mnt/etc/fstab</span></div><div class="line">查看设备挂载，分区整合文件是否正确，确保系统可以正常挂载所有设备</div></pre></td></tr></table></figure></p>
<h3 id="chroot到新分区进行配置"><a href="#chroot到新分区进行配置" class="headerlink" title="chroot到新分区进行配置"></a>chroot到新分区进行配置</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># arch-chroot /mnt /bin/bash</span></div></pre></td></tr></table></figure>
<h3 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">设置时区上海</div><div class="line"><span class="comment"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></div><div class="line">设置UTC时间，并调整时间漂移</div><div class="line"><span class="comment"># hwclock --systohc --utc</span></div><div class="line"></div><div class="line">tzselect</div><div class="line">Please identify a location so that time zone rules can be <span class="built_in">set</span> correctly.</div><div class="line">Please select a continent or ocean.</div><div class="line"> 1) Africa</div><div class="line"> 2) Americas</div><div class="line"> 3) Antarctica</div><div class="line"> 4) Arctic Ocean</div><div class="line"> 5) Asia</div><div class="line"> 6) Atlantic Ocean</div><div class="line"> 7) Australia</div><div class="line"> 8) Europe</div><div class="line"> 9) Indian Ocean</div><div class="line">10) Pacific Ocean</div><div class="line">11) none - I want to specify the time zone using the Posix TZ format.</div><div class="line"><span class="comment">#? GST+1</span></div><div class="line">Please enter a number <span class="keyword">in</span> range.</div><div class="line"><span class="comment">#? 11</span></div><div class="line">Please enter the desired value of the TZ environment variable.</div><div class="line">For example, GST-10 is a zone named GST that is 10 hours ahead (east) of UTC.</div><div class="line">GST+1</div><div class="line"> </div><div class="line">The following information has been given:</div><div class="line"> </div><div class="line">	TZ=<span class="string">'GST+1'</span></div><div class="line"> </div><div class="line">Therefore TZ=<span class="string">'GST+1'</span> will be used.</div><div class="line">Local time is now:	Tue Oct 11 15:07:56 GST 2011.</div><div class="line">Universal Time is now:	Tue Oct 11 16:07:56 UTC 2011.</div><div class="line">Is the above information OK?</div><div class="line">1) Yes</div><div class="line">2) No</div><div class="line"><span class="comment">#? 1</span></div><div class="line"> </div><div class="line">You can make this change permanent <span class="keyword">for</span> yourself by appending the line</div><div class="line">	TZ=<span class="string">'GST+1'</span>; <span class="built_in">export</span> TZ</div><div class="line">to the file <span class="string">'.profile'</span> <span class="keyword">in</span> your home directory; <span class="keyword">then</span> <span class="built_in">log</span> out and <span class="built_in">log</span> <span class="keyword">in</span> again.</div><div class="line"> </div><div class="line">Here is that TZ value again, this time on standard output so that you</div><div class="line">can use the /usr/bin/tzselect <span class="built_in">command</span> <span class="keyword">in</span> shell scripts:</div><div class="line">GST+1</div><div class="line"></div><div class="line">sudo vi /etc/profile</div><div class="line"></div><div class="line">在最后一行加入 </div><div class="line"><span class="built_in">export</span> TZ=<span class="string">"GST+1"</span></div><div class="line">保存　重新启动</div></pre></td></tr></table></figure>
<h3 id="Locale"><a href="#Locale" class="headerlink" title="Locale"></a>Locale</h3><p>Locales 被 glibc 和其它需要本地化的应用程序和库用来解析文本(或正确的显示当前区域的某些文字样式,如货币,时间,日期,特殊字符和其他的区域格式).<br>将/etc/Locale.gen中需要的本地化类型移除注释即可<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vi /etc/locale.gen</span></div><div class="line">将下面两行的注释去掉</div><div class="line">en_US.UTF-8 UTF-8</div><div class="line">zh_CN.UTF-8 UTF-8</div><div class="line"></div><div class="line">最后再运行命令生成locale讯息</div><div class="line"><span class="comment"># locale-gen</span></div><div class="line"></div><div class="line">创建 locale.conf 并提交您的本地化选项：</div><div class="line"><span class="comment"># echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span></div></pre></td></tr></table></figure></p>
<h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><p>要设置 hostname，将其添加 到 /etc/hostname, myhostname 是需要的主机名:<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo myhostname &gt; /etc/hostname</span></div><div class="line">在/etc/hosts加入主机名</div><div class="line"><span class="comment"># vi /etc/hosts</span></div><div class="line"></div><div class="line">127.0.0.1	localhost.localdomain	localhost</div><div class="line">::1		localhost.localdomain	localhost</div><div class="line">127.0.1.1	myhostname.localdomain	myhostname</div></pre></td></tr></table></figure></p>
<h3 id="Initramfs"><a href="#Initramfs" class="headerlink" title="Initramfs"></a>Initramfs</h3><h3 id="Grub"><a href="#Grub" class="headerlink" title="Grub"></a>Grub</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pacman -S grub-efi-x86_64               #UEFI版本本体</span></div><div class="line"><span class="comment"># pacman -S efibootmgr                    #EFI管理器</span></div><div class="line"><span class="comment"># pacman -S os-prober                     #双系统必需管理器(可选)</span></div><div class="line"></div><div class="line"><span class="comment"># grub-install --efi-directory=/boot/efi --bootloader-id=grub #安装进EFI分区</span></div><div class="line"></div><div class="line"><span class="comment"># grub-mkconfig -o /boot/grub/grub.cfg                        #创建grub配置文件</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Arch-Linux-Installation&quot;&gt;&lt;a href=&quot;#Arch-Linux-Installation&quot; class=&quot;headerlink&quot; title=&quot;Arch Linux Installation&quot;&gt;&lt;/a&gt;Arch Linux Installation&lt;/h2&gt;&lt;p&gt;从镜像启动，完成后会以root登录&lt;a href=&quot;https://zhuanlan.zhihu.com/p/19556676?columnSlug=mactalk&quot;&gt;Zsh&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zsh 一款可定制性强，使用方便的强大shell，完全兼容bash但是相比bash又有好多改进的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;h3 id=&quot;验证是否为uefi启动&quot;&gt;&lt;a href=&quot;#验证是否为uefi启动&quot; class=&quot;headerlink&quot; title=&quot;验证是否为uefi启动&quot;&gt;&lt;/a&gt;验证是否为uefi启动&lt;/h3&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ls /sys/firmware/efi/efivars&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果成功执行，则uefi已启动。&lt;br&gt;否则，如果uefi未启动，那么以上命令将不会成功执行。&lt;/p&gt;
&lt;h3 id=&quot;键盘布局&quot;&gt;&lt;a href=&quot;#键盘布局&quot; class=&quot;headerlink&quot; title=&quot;键盘布局&quot;&gt;&lt;/a&gt;键盘布局&lt;/h3&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# loadkeys layout&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://Crepuscule.com/categories/Linux/"/>
    
      <category term="Linux Distributions" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/"/>
    
      <category term="Arch Linux" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/Arch-Linux/"/>
    
    
      <category term="Linux" scheme="http://Crepuscule.com/tags/Linux/"/>
    
      <category term="Arch" scheme="http://Crepuscule.com/tags/Arch/"/>
    
  </entry>
  
  <entry>
    <title>Ruby Learning 1</title>
    <link href="http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Learning-1/"/>
    <id>http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Learning-1/</id>
    <published>2017-03-24T00:54:29.000Z</published>
    <updated>2017-04-05T14:05:11.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-Ruby"><a href="#Basic-Ruby" class="headerlink" title="Basic Ruby"></a>Basic Ruby</h2><blockquote>
<p>by RUNOOB.COM</p>
</blockquote>
<h2 id="ruby的交互shell和命令行编译选项"><a href="#ruby的交互shell和命令行编译选项" class="headerlink" title="ruby的交互shell和命令行编译选项"></a>ruby的交互shell和命令行编译选项</h2><p>ruby的交互式shell为irb，输入irb命令就可以进行交互<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[crepuscule@bogon basic]$ irb</div><div class="line">irb(main):001:0&gt; puts 4**(1/2)</div><div class="line">1</div><div class="line">=&gt; nil</div><div class="line">irb(main):002:0&gt; puts 4**(1/2.0)</div><div class="line">2.0</div><div class="line">=&gt; nil</div><div class="line">irb(main):003:0&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[crepuscule@bogon basic]$ ruby -c test.rb   <span class="comment"># 仅检查语法</span></div><div class="line">Syntax OK</div><div class="line">[crepuscule@bogon basic]$ ruby <span class="_">-d</span> test.rb   <span class="comment"># 开启调试模式</span></div><div class="line">[crepuscule@bogon basic]$ ruby -T <span class="comment"># [level=1] turn on tainting checks</span></div><div class="line">[crepuscule@bogon basic]$ ruby -v <span class="comment"># [level=2] print version number, then turn on verbose mode</span></div><div class="line">[crepuscule@bogon basic]$ ruby -w <span class="comment"># turn warnings on for your script</span></div><div class="line">[crepuscule@bogon basic]$ ruby -W <span class="comment">#[level=2] set warning level; 0=silence, 1=medium, 2=verbose</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h2><p>加入coding声明utf-8即可，一般均支持中文<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/ruby -w</span></div><div class="line"><span class="comment">#-*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line">puts <span class="string">"你好，世界"</span></div></pre></td></tr></table></figure></p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>Ruby是一门一个问题有多种解法的语言，所以其语法比较自由，格式随性。每种功能均有多种实现。</p>
<h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">puts  <span class="string">"输出并换行"</span></div><div class="line">print <span class="string">"不换行"</span></div><div class="line">a = <span class="number">10</span></div><div class="line">puts <span class="string">"井号后接变量可以输出变量 <span class="subst">#&#123;a&#125;</span>"</span></div></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># # 是常用的单行注释</span></div><div class="line"><span class="comment">=begin</span></div><div class="line">这是多行注释（嵌入式文档注释），极具美感</div><div class="line">=end</div></pre></td></tr></table></figure>
<h3 id="标识符和保留字"><a href="#标识符和保留字" class="headerlink" title="标识符和保留字"></a>标识符和保留字</h3><p>ruby中以字母，数字，下划线组合而成的变量，方法，常量名称的总称为标识符。<br>保留字即关键字，共有40个<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BEGIN</span>	<span class="keyword">do</span>	<span class="keyword">next</span>	<span class="keyword">then</span></div><div class="line"><span class="keyword">END</span>	<span class="keyword">else</span>	<span class="literal">nil</span>	<span class="literal">true</span></div><div class="line"><span class="keyword">alias</span>	<span class="keyword">elsif</span>	<span class="keyword">not</span>	<span class="keyword">undef</span></div><div class="line"><span class="keyword">and</span>	<span class="keyword">end</span>	<span class="keyword">or</span>	<span class="keyword">unless</span></div><div class="line"><span class="keyword">begin</span>	<span class="keyword">ensure</span>	<span class="keyword">redo</span>	<span class="keyword">until</span></div><div class="line"><span class="keyword">break</span>	<span class="literal">false</span>	<span class="keyword">rescue</span>	<span class="keyword">when</span></div><div class="line"><span class="keyword">case</span>	<span class="keyword">for</span>	<span class="keyword">retry</span>	<span class="keyword">while</span></div><div class="line"><span class="class"><span class="keyword">class</span>	<span class="title">if</span>	<span class="title">return</span>	<span class="title">while</span></span></div><div class="line"><span class="function"><span class="keyword">def</span>	<span class="title">in</span>	<span class="title">self</span>	__FILE__</span></div><div class="line"><span class="keyword">defined</span>?	<span class="class"><span class="keyword">module</span>	<span class="title">super</span>	__LINE__</span></div></pre></td></tr></table></figure></p>
<h3 id="Ruby的数据类型"><a href="#Ruby的数据类型" class="headerlink" title="Ruby的数据类型"></a>Ruby的数据类型</h3><ol>
<li><p>Integer 整形<br>整型分两种，如果小于31位，为Fixnum实例，其范围从 -2^30 到 2^30-1 或 -2^62 到 2^62-1；大于31位，即超过4字节，为Bignum实例。<br>整数有四种进制，前缀0 对应 octal，0x 对应 hex，0b 对应 binary，十进制没有前缀。<br>下划线允许出现在数字字符串中，解释器将忽视下划线</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-<span class="number">512</span>    <span class="comment">#Fixnum 10进制</span></div><div class="line"><span class="number">40_000_000</span>  <span class="comment">#Fixnum 10进制,带有下划线，可用于标识位数</span></div><div class="line"><span class="number">057</span>     <span class="comment">#Fixnum 8进制,以0作为前缀</span></div><div class="line"><span class="number">0xcfee</span>  <span class="comment">#Fixnum 16进制,以0x作为前缀</span></div><div class="line">0b1001<span class="number">0</span> <span class="comment">#Fixnum 2进制,以0b作为前缀</span></div><div class="line"></div><div class="line"><span class="string">"U"</span>.ord  <span class="comment">#ruby中的字符同样和整形互通，可以使用ord(er) 属性来获得字符对应的10进制字符编码</span></div><div class="line"><span class="string">?\n</span>      <span class="comment"># 换行符（0x0a）的编码？？？？</span></div></pre></td></tr></table></figure>
</li>
<li><p>Float 浮点型</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">123.4</span>                <span class="comment"># 浮点值</span></div><div class="line"><span class="number">1.0</span>e6                <span class="comment"># 科学记数法</span></div><div class="line"><span class="number">4</span>E2<span class="number">0</span>                 <span class="comment"># e大小写无所谓</span></div><div class="line"><span class="number">8</span>e-<span class="number">20</span>                <span class="comment"># 指数前的符号也可以表现出来</span></div></pre></td></tr></table></figure>
</li>
<li><p>基本算数操作<br>除了普通加减乘除外，ruby还支持乘方运算 ** ，而且指数可以使用小数</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">puts <span class="number">4</span>**(<span class="number">1</span>/<span class="number">2.0</span>) <span class="comment">#4的1/2次方，即4的算数平方根为2(注意此处应为1/2.0=0.5 而非 1/2=0)</span></div></pre></td></tr></table></figure>
</li>
<li><p>String 字符串类型<br>双引号标记的字符串允许替换和使用反斜线符号，单引号标记的字符串不允许替换，且只允许使用 \ 和 \’ 两个反斜线符号。<br>在打印字符串时，使用#{xxx}来替换 Ruby 表达式的值为一个字符串。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">puts <span class="string">"32*45 = <span class="subst">#&#123;<span class="number">32</span>*<span class="number">45</span>&#125;</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>转义字符</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">\n	换行符 (<span class="number">0x0a</span>)</div><div class="line">\r	回车符 (<span class="number">0x0d</span>)</div><div class="line">\f	换页符 (<span class="number">0x0c</span>)</div><div class="line">\b	退格键 (<span class="number">0x08</span>)</div><div class="line">\a	报警符 Bell (<span class="number">0x07</span>)</div><div class="line">\e	转义符 (<span class="number">0x1b</span>)</div><div class="line">\s	空格符 (<span class="number">0x20</span>)</div><div class="line">\nnn	八进制表示法 (n 是 <span class="number">0</span>-<span class="number">7</span>)</div><div class="line">\xnn	十六进制表示法 (n 是 <span class="number">0</span>-<span class="number">9</span>、a-f 或 A-F)</div><div class="line">\cx, \C-x	Control-x</div><div class="line">\M-x	Meta-x (c <span class="params">| 0x80)</span></div><div class="line">\M-\C-x	Meta-Control-x</div><div class="line">\x	字符 x</div></pre></td></tr></table></figure>
</li>
<li><p>Array 数组<br>数组使用[]来定义，通过[]索引访问，可用+，-合并及删除元素，而且在不适用”!”的情况下会建立拷贝进行这些操作，用&lt;&lt;追加元素，使用*重复数组元素，使用|和&amp;做并集和交集操作。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ary = [<span class="string">'c++'</span>，<span class="number">0x1080</span>,<span class="number">89</span>,<span class="literal">true</span>,<span class="string">"a stirng"</span>,<span class="string">"array in ruby can be any type!"</span>]</div><div class="line">ary.each <span class="keyword">do</span> <span class="params">|i|</span></div><div class="line">  puts i</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Hash 哈希类型<br>Ruby 哈希是在大括号内放置一系列键/值对，键和值之间使用逗号和序列 =&gt; 分隔。它和python中的enumerate()函数返回的类型类似，是一对键和值的组合。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hsh = &#123;<span class="string">'C++'</span>=&gt;<span class="string">"很难的语言"</span>,<span class="string">'JAVA'</span>=&gt;<span class="string">"如今非常火的语言"</span>,<span class="string">'Python'</span>=&gt;<span class="string">"人气极高的脚本语言"</span>,<span class="string">'Ruby'</span>=&gt;<span class="string">"因为Ruby on Rails而一炮走红的脚本语言"</span>&#125;</div><div class="line">hsh.each <span class="keyword">do</span> <span class="params">|key,value|</span></div><div class="line">    print key, <span class="string">"是"</span>, value, <span class="string">"\n"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Range 范围类型<br>一个范围表示一个区间。 使用 .. 构造的范围从开始值运行到结束值（包含结束值）。使用 … 构造的范围从开始值运行到结束值（不包含结束值），即(1..5)包括1-5，而(1…5)包括1-4。当作为一个迭代器使用时，范围会返回序列中的每个值。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="number">10</span>..<span class="number">15</span>).each <span class="keyword">do</span> <span class="params">|n|</span></div><div class="line">    print n, <span class="string">' '</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="BEGIN，END语句"><a href="#BEGIN，END语句" class="headerlink" title="BEGIN，END语句"></a>BEGIN，END语句</h3><p>BEGIN 块中的语句将最先执行，如果有多个BEGIN块，则按先后顺序执行BEGIN 块再执行主程序<br>BEGIN 块中的语句将最后执行，如果有多个END块，则在执行完成主程序后，按从后往前的顺序执行END块<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> puts <span class="string">"接着运行"</span>  <span class="comment"># 运行顺序 3</span></div><div class="line"></div><div class="line"> <span class="keyword">BEGIN</span> &#123;    <span class="comment"># 运行顺序 1</span></div><div class="line">   puts <span class="string">"首先运行1"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">BEGIN</span> &#123;     <span class="comment"># 运行顺序 2</span></div><div class="line">  puts <span class="string">"首先运行2"</span></div><div class="line">&#125;</div><div class="line">print <span class="string">"接着puts运行"</span> <span class="comment"># 运行顺序 4</span></div><div class="line"></div><div class="line"><span class="keyword">END</span> &#123;      <span class="comment"># 运行顺序 6</span></div><div class="line">  print <span class="string">"最后运行1"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">END</span> &#123;</div><div class="line">  print <span class="string">"最后运行2"</span> <span class="comment"># 运行顺序 5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h3><p>ruby中的多行字符串，使用 &lt;&lt; 和一个指定的终止字符串来限定范围，&lt;&lt; 和终止符之间必须没有空格。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">print <span class="string">&lt;&lt;EOF</span></div><div class="line">    两个结束字符串中间</div><div class="line">    所有字符均被录入，包括空格</div><div class="line">EOF</div><div class="line"><span class="comment"># 也可以将终止字符串用""括起</span></div><div class="line">print &lt;&lt;<span class="string">"EOF"</span></div><div class="line">    两个结束字符串中间</div><div class="line">    所有字符均被录入，包括空格</div><div class="line">EOF</div><div class="line"><span class="comment"># 使用``括起的终止字符串中间的字符串可以是可执行的系统命令</span></div><div class="line">print &lt;&lt;<span class="string">`EOF`</span></div><div class="line">    cd ..</div><div class="line">    ls -l</div><div class="line">EOF</div><div class="line"><span class="comment"># 可以以下面的方式对他门进行堆叠</span></div><div class="line">print &lt;&lt;<span class="string">"first"</span> ,&lt;&lt;<span class="string">"sec"</span></div><div class="line">    两个结束字符串中间</div><div class="line">first</div><div class="line">    所有字符均被录入，包括空格</div><div class="line">sec</div></pre></td></tr></table></figure></p>
<h3 id="string-amp-array"><a href="#string-amp-array" class="headerlink" title="string&amp;array"></a>string&amp;array</h3><p>! 强制改变字符串变量中的指定字符不设立copy串<br>[] 搜寻字符串中的指定字符，但不一定搜寻所有<br>.to_a :<strong>to_a</strong> rray<br>.to_s :<strong>to_s</strong> tring<br>.reverse 反转字符串<br>.join 将数组各个元素合并起来<br>.incldue<br>.downcase</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">poem=<span class="string">"this is a poem</span></div><div class="line">  this will be a good poem"</div><div class="line"></div><div class="line">poem.<span class="keyword">include</span>? <span class="string">"my hand"</span> <span class="comment">#问号要紧跟着include方法</span></div><div class="line">poem.downcase</div></pre></td></tr></table></figure>
<h2 id="Ruby的类和对象"><a href="#Ruby的类和对象" class="headerlink" title="Ruby的类和对象"></a>Ruby的类和对象</h2><p>Ruby是一门完全面向对象的语言。它有数据封装，数据抽象，多态性，继承等特性,因此，ruby更需要提前了解类的概念。</p>
<h3 id="ruby类中的变量"><a href="#ruby类中的变量" class="headerlink" title="ruby类中的变量"></a>ruby类中的变量</h3><ul>
<li>局部变量：指在方法中定义的在方法外就不可以使用的方法，局部变量以_或小写字母开头</li>
<li>实例变量：指类中的普通成员变量，它只有在被初始化的实例中才可以被使用，实例变量以@开头</li>
<li>类变量：类似于c++中的static成员变量，它属于类，所以它不仅可以被该类的实例使用，还可以通过类名直接访问。类变量以@@ 开头</li>
<li>全局变量：在程序中的任意位置都可以被访问，可以跨越类的约束。全局变量以$ 开头<h3 id="new方法"><a href="#new方法" class="headerlink" title="new方法"></a>new方法</h3>使用这种方创建类的实例<code>instance1 = Classes.new</code><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3>首先注意，ruby类一般首字母大写，其他字母小写<br>通过重写initialize函数来自定义构造函数<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classes</span></span></div><div class="line">   @@count=<span class="number">0</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(id, name)</span></span></div><div class="line">      @id=id</div><div class="line">      @name=name</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">instance1=Classes.new(<span class="number">1</span>,<span class="string">"xiaoming"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classes</span>   </span></div><div class="line">   $global = <span class="number">12</span></div><div class="line">   @id = <span class="number">1</span></div><div class="line">   @name = <span class="string">"daming"</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">showdata</span> <span class="comment"># 成员函数</span></span></div><div class="line">        puts @id</div><div class="line">        puts @name</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line">instance1=Classes.new</div><div class="line">instance1.showdata <span class="comment">#调用方法时，如果方法没有参数，可以省去()</span></div><div class="line"><span class="string">``</span><span class="string">`                              </span></div><div class="line"></div><div class="line"></div><div class="line">## Ruby控制语句</div><div class="line">### Ruby判断</div><div class="line">- if else</div><div class="line"></div><div class="line">`<span class="string">``</span> ruby</div><div class="line"><span class="keyword">if</span> conditional [<span class="keyword">then</span>] <span class="comment">#[]内为可以省略的部分</span></div><div class="line">  exp1</div><div class="line">[<span class="keyword">elsif</span> conditional [<span class="keyword">then</span>]</div><div class="line">  exp2 ]</div><div class="line">[<span class="keyword">else</span></div><div class="line">  exp3 ]</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>``` ruby<br>if a==4 then a = 7 end</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-Ruby&quot;&gt;&lt;a href=&quot;#Basic-Ruby&quot; class=&quot;headerlink&quot; title=&quot;Basic Ruby&quot;&gt;&lt;/a&gt;Basic Ruby&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;by RUNOOB.COM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ruby的交互shell和命令行编译选项&quot;&gt;&lt;a href=&quot;#ruby的交互shell和命令行编译选项&quot; class=&quot;headerlink&quot; title=&quot;ruby的交互shell和命令行编译选项&quot;&gt;&lt;/a&gt;ruby的交互shell和命令行编译选项&lt;/h2&gt;&lt;p&gt;ruby的交互式shell为irb，输入irb命令就可以进行交互&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon basic]$ irb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;irb(main):001:0&amp;gt; puts 4**(1/2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=&amp;gt; nil&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;irb(main):002:0&amp;gt; puts 4**(1/2.0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;=&amp;gt; nil&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;irb(main):003:0&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon basic]$ ruby -c test.rb   &lt;span class=&quot;comment&quot;&gt;# 仅检查语法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Syntax OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon basic]$ ruby &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; test.rb   &lt;span class=&quot;comment&quot;&gt;# 开启调试模式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon basic]$ ruby -T &lt;span class=&quot;comment&quot;&gt;# [level=1] turn on tainting checks&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon basic]$ ruby -v &lt;span class=&quot;comment&quot;&gt;# [level=2] print version number, then turn on verbose mode&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon basic]$ ruby -w &lt;span class=&quot;comment&quot;&gt;# turn warnings on for your script&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon basic]$ ruby -W &lt;span class=&quot;comment&quot;&gt;#[level=2] set warning level; 0=silence, 1=medium, 2=verbose&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://Crepuscule.com/categories/Ruby/"/>
    
      <category term="Ruby Basic" scheme="http://Crepuscule.com/categories/Ruby/Ruby-Basic/"/>
    
    
      <category term="Ruby" scheme="http://Crepuscule.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Programming</title>
    <link href="http://Crepuscule.com/Data-Structure-Algorithm/Advanced-Algorithm/DSandAl/Dynamic-Programming/"/>
    <id>http://Crepuscule.com/Data-Structure-Algorithm/Advanced-Algorithm/DSandAl/Dynamic-Programming/</id>
    <published>2017-03-19T13:03:47.000Z</published>
    <updated>2017-04-04T10:50:54.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>###　基本思路<br>动态规划对复杂的问题进行分解，通过求解小规模的子问题再反推源问题的结果。动态规划沿着决策的阶段划分子问题。而阶段可以，随时间，问题演化状态划分。动态规划的子问题不需要相互独立，子问题之间通常有包含关系。有些时候，不同的子问题包含相同的子子问题。对这种情况，动态规划法可以将该相同的子子问题求出并记录在备忘录表中，避免反复求已经知道答案的问题的结果</p>
<h4 id="定义最优子问题"><a href="#定义最优子问题" class="headerlink" title="定义最优子问题"></a>定义最优子问题</h4><p>确定问题的优化目标，以及如何决策最优解，并对决策过程划分阶段。按问题的特性，可以按时间，问题演化状态等划分阶段，之后对问题的求解就变为对各个阶段分别进行最优化决策。</p>
<h4 id="定义状态"><a href="#定义状态" class="headerlink" title="定义状态"></a>定义状态</h4><p>对每一个阶段，对起始状态施加决策，使得状态发生改变，得到决策的结果状态。初始状态经过每一个阶段的决策后，最终得到的状态就是问题的解。注意不可使得子问题具有后向性。因为这样之前的子问题可能对之后问题产生影响。<br><a id="more"></a></p>
<h4 id="定义决策和状态转换方程"><a href="#定义决策和状态转换方程" class="headerlink" title="定义决策和状态转换方程"></a>定义决策和状态转换方程</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;p&gt;###　基本思路&lt;br&gt;动态规划对复杂的问题进行分解，通过求解小规模的子问题再反推源问题的结果。动态规划沿着决策的阶段划分子问题。而阶段可以，随时间，问题演化状态划分。动态规划的子问题不需要相互独立，子问题之间通常有包含关系。有些时候，不同的子问题包含相同的子子问题。对这种情况，动态规划法可以将该相同的子子问题求出并记录在备忘录表中，避免反复求已经知道答案的问题的结果&lt;/p&gt;
&lt;h4 id=&quot;定义最优子问题&quot;&gt;&lt;a href=&quot;#定义最优子问题&quot; class=&quot;headerlink&quot; title=&quot;定义最优子问题&quot;&gt;&lt;/a&gt;定义最优子问题&lt;/h4&gt;&lt;p&gt;确定问题的优化目标，以及如何决策最优解，并对决策过程划分阶段。按问题的特性，可以按时间，问题演化状态等划分阶段，之后对问题的求解就变为对各个阶段分别进行最优化决策。&lt;/p&gt;
&lt;h4 id=&quot;定义状态&quot;&gt;&lt;a href=&quot;#定义状态&quot; class=&quot;headerlink&quot; title=&quot;定义状态&quot;&gt;&lt;/a&gt;定义状态&lt;/h4&gt;&lt;p&gt;对每一个阶段，对起始状态施加决策，使得状态发生改变，得到决策的结果状态。初始状态经过每一个阶段的决策后，最终得到的状态就是问题的解。注意不可使得子问题具有后向性。因为这样之前的子问题可能对之后问题产生影响。&lt;br&gt;
    
    </summary>
    
      <category term="Data Structure &amp; Algorithm" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/"/>
    
      <category term="Advanced Algorithm" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/Advanced-Algorithm/"/>
    
    
      <category term="Dynamic Programming" scheme="http://Crepuscule.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Shell Script</title>
    <link href="http://Crepuscule.com/Linux/Linux-Shell-Script/Linux/Linux%20Shell%20Script/Shell-Script/"/>
    <id>http://Crepuscule.com/Linux/Linux-Shell-Script/Linux/Linux Shell Script/Shell-Script/</id>
    <published>2017-03-19T02:03:58.000Z</published>
    <updated>2017-04-04T10:52:21.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单的shell-script"><a href="#简单的shell-script" class="headerlink" title="简单的shell script"></a>简单的shell script</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[crepuscule@bogon Shell Script Resources]$ vi sh01.sh</div><div class="line">#！/bin/bash</div><div class="line"># Program</div><div class="line"># This program shows &quot;hello world&quot; in your screen</div><div class="line"># History</div><div class="line"># 2017/03/19 by Crepuscule version 1.0</div><div class="line"></div><div class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</div><div class="line">export PATH</div><div class="line">echo -e &quot;Hello World! \a \n&quot;</div><div class="line">exit 0</div></pre></td></tr></table></figure>
<h3 id="！-bin-bash"><a href="#！-bin-bash" class="headerlink" title="#！/bin/bash"></a>#！/bin/bash</h3><p>声明该程序使用/bin/bash的相关环境来执行</p>
<h3 id="xxxx"><a href="#xxxx" class="headerlink" title="#xxxx"></a>#xxxx</h3><p>为批注内容，用于书写脚本的作者，更新时间，功能等</p>
<h3 id="PATH"><a href="#PATH" class="headerlink" title="PATH="></a>PATH=</h3><p>主要环境变量的说明</p>
<h3 id="主要程序部分"><a href="#主要程序部分" class="headerlink" title="主要程序部分"></a>主要程序部分</h3><p>主要程序之后还可以使用exit 数字 来回传返回值，自定义错误信息等<br><a id="more"></a></p>
<h2 id="shell-script执行方式的区别"><a href="#shell-script执行方式的区别" class="headerlink" title="shell script执行方式的区别"></a>shell script执行方式的区别</h2><ol>
<li>直接执行<br>使用绝对路径即可执行命令<br>上例可为：<code>/home/script/&#39;Shell Script Rescource&#39;/sh01.sh</code><br>或者在当前目录中执行：<code>./sh01.sh</code><br>也可以将其放在PATH中（放在/bin，/sbin等中）</li>
<li>使用bash进程执行，如：<br><code>bash sh01.sh</code>或<code>sh sh01.sh</code></li>
<li>soucre执行，如：<br><code>source sh01.sh</code><br>如果使用前两种方式进行脚本执行，script将会在新的子进程bash环境内执行，当子进程执行完成后，子进程中的各项变量或操作将会结束而不会回传到父进程中。<br>而如果使用source来执行来执行脚本，script将在父进程中执行。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单的shell-script&quot;&gt;&lt;a href=&quot;#简单的shell-script&quot; class=&quot;headerlink&quot; title=&quot;简单的shell script&quot;&gt;&lt;/a&gt;简单的shell script&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon Shell Script Resources]$ vi sh01.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#！/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Program&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# This program shows &amp;quot;hello world&amp;quot; in your screen&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# History&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 2017/03/19 by Crepuscule version 1.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo -e &amp;quot;Hello World! \a \n&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exit 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;！-bin-bash&quot;&gt;&lt;a href=&quot;#！-bin-bash&quot; class=&quot;headerlink&quot; title=&quot;#！/bin/bash&quot;&gt;&lt;/a&gt;#！/bin/bash&lt;/h3&gt;&lt;p&gt;声明该程序使用/bin/bash的相关环境来执行&lt;/p&gt;
&lt;h3 id=&quot;xxxx&quot;&gt;&lt;a href=&quot;#xxxx&quot; class=&quot;headerlink&quot; title=&quot;#xxxx&quot;&gt;&lt;/a&gt;#xxxx&lt;/h3&gt;&lt;p&gt;为批注内容，用于书写脚本的作者，更新时间，功能等&lt;/p&gt;
&lt;h3 id=&quot;PATH&quot;&gt;&lt;a href=&quot;#PATH&quot; class=&quot;headerlink&quot; title=&quot;PATH=&quot;&gt;&lt;/a&gt;PATH=&lt;/h3&gt;&lt;p&gt;主要环境变量的说明&lt;/p&gt;
&lt;h3 id=&quot;主要程序部分&quot;&gt;&lt;a href=&quot;#主要程序部分&quot; class=&quot;headerlink&quot; title=&quot;主要程序部分&quot;&gt;&lt;/a&gt;主要程序部分&lt;/h3&gt;&lt;p&gt;主要程序之后还可以使用exit 数字 来回传返回值，自定义错误信息等&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://Crepuscule.com/categories/Linux/"/>
    
      <category term="Linux Shell Script" scheme="http://Crepuscule.com/categories/Linux/Linux-Shell-Script/"/>
    
    
      <category term="Shell" scheme="http://Crepuscule.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Git Learing</title>
    <link href="http://Crepuscule.com/Tools/Git/Tools/Git-Learing/"/>
    <id>http://Crepuscule.com/Tools/Git/Tools/Git-Learing/</id>
    <published>2017-03-16T06:39:31.000Z</published>
    <updated>2017-04-04T10:53:11.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Learing-Git"><a href="#Learing-Git" class="headerlink" title="Learing Git"></a>Learing Git</h2><p>通过记录实际学习运行记录的结果来解释git的使用方法</p>
<h2 id="本地版本管理"><a href="#本地版本管理" class="headerlink" title="本地版本管理"></a>本地版本管理</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 建立并进入空的目录</span></div><div class="line">[crepuscule@bogon ~]$ mkdir GitLearn</div><div class="line">[crepuscule@bogon ~]$ <span class="built_in">cd</span> GitLearn/</div><div class="line">[crepuscule@bogon GitLearn]$ <span class="built_in">pwd</span></div><div class="line">/home/crepuscule/GitLearn</div><div class="line"><span class="comment"># 开始初始化一个仓库</span></div><div class="line">[crepuscule@bogon GitLearn]$ git init</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/crepuscule/GitLearn/.git/</div><div class="line">[crepuscule@bogon GitLearn]$ ls -ah</div><div class="line">.  ..  .git</div><div class="line"><span class="comment"># 创建新的文件</span></div><div class="line">[crepuscule@bogon GitLearn]$ vi readme.md</div><div class="line">PS1：(提示字符的配置)</div><div class="line"></div><div class="line">这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『命令提示字符』喔！ 当我们&gt;每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取</div><div class="line">这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你</div><div class="line">自己的习惯』就好了。 你可以用 man bash (注3)去查询一下 PS1 的相关说明，以理解底&gt;下的一些符号意义</div><div class="line"><span class="comment"># 将此文件加入跟踪</span></div><div class="line">[crepuscule@bogon GitLearn]$ git add readme.md</div><div class="line"><span class="comment"># 将文件提交仓库</span></div><div class="line">[crepuscule@bogon GitLearn]$ git commit -m <span class="string">"a new readme file"</span></div><div class="line">[master (root-commit) d5a6e75] a new readme file</div><div class="line"> 1 file changed, 3 insertions(+)</div><div class="line"> create mode 100644 readme.md</div><div class="line"><span class="comment">##    关于此命令的信息：commit命令 为提交进仓库 -m后面输入的是本次提交的说明</span></div><div class="line"><span class="comment">##    git commit -m &lt;msg&gt;, --message=&lt;msg&gt;  </span></div><div class="line"><span class="comment">##         Use the given &lt;msg&gt; as the commit message. If multiple -m options</span></div><div class="line"><span class="comment">##         are given, their values are concatenated as separate paragraphs.</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="版本控制初步"><a href="#版本控制初步" class="headerlink" title="版本控制初步"></a>版本控制初步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对文本进行一次更改，比如将最后一句话改为英文</span></div><div class="line">[crepuscule@bogon GitLearn]$ vi readme.md</div><div class="line">PS1：(提示字符的配置)</div><div class="line"></div><div class="line">这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『命令提示字符』喔！ 当我们&gt;每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取</div><div class="line">这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你</div><div class="line">自己的习惯』就好了。 你可以用 man bash (注3)去查询一下 PS1 的相关说明，to understand the means of this signs below</div><div class="line"><span class="comment"># 运行status查看状态</span></div><div class="line">[crepuscule@bogon GitLearn]$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">	modified:   readme.md</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div><div class="line"><span class="comment"># git status告知我们 readme.md已被修改但是没有做好提交的准备</span></div><div class="line"><span class="comment"># 使用 git diff 查看具体的修改内容</span></div><div class="line">[crepuscule@bogon GitLearn]$ git diff</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index acc69ce..804be75 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -1,3 +1,3 @@</div><div class="line"> PS1：(提示字符的配置)</div><div class="line"></div><div class="line">-这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『命令提示字符』喔！ 当我们每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你自己的习惯』就好了。 你可以用 man bash (注3)去查询一下 PS1 的相关说明，以理解底下的一些符号意义</div><div class="line">+这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『命令提示字符』喔！ 当我们每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你自己的习惯』就好了。 你可以用 man bash (注3)去查询一下 PS1 的相关说明，to understand the means of this signs below</div><div class="line"><span class="comment"># 查看之后确认可以提交，首先add该文件</span></div><div class="line">[crepuscule@bogon GitLearn]$ git add readme.md</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">	modified:   readme.md</div><div class="line"><span class="comment"># git status 显示该文件已被追踪</span></div><div class="line"><span class="comment"># 提交更改</span></div><div class="line">[crepuscule@bogon GitLearn]$ git commit -m <span class="string">"end to en"</span></div><div class="line">[master f6d4d89] end to en</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div><div class="line"><span class="comment"># 再次使用git status 查看，显示工作区已无内容提交</span></div><div class="line">[crepuscule@bogon GitLearn]$ git status</div><div class="line"> On branch master</div><div class="line"> nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先修改文件</span></div><div class="line">[crepuscule@bogon GitLearn]$ vi readme.md</div><div class="line">PS1：(提示字符的配置)</div><div class="line"></div><div class="line">这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『命令提示字符』喔！ 当我们&gt;每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取</div><div class="line">这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你</div><div class="line">自己的习惯』就好了。you can use <span class="string">'man bash'</span> to query more infomation about PS1，to understand the means of this signs below</div><div class="line"><span class="comment"># 再提交</span></div><div class="line">[crepuscule@bogon GitLearn]$ git add readme.md</div><div class="line">[crepuscule@bogon GitLearn]$ git commit -m <span class="string">"man bash PS1"</span></div><div class="line">[master d353a16] man bash PS1</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div><div class="line"><span class="comment"># 使用git log进行查看提交历史记录</span></div><div class="line">[crepuscule@bogon GitLearn]$ git <span class="built_in">log</span></div><div class="line">commit d353a1653bcb91a9aad1d7e0267c25424e382c4c</div><div class="line">Author: crepuscule &lt;twilight_wang@foxmail.com&gt;</div><div class="line">Date:   Thu Mar 16 15:33:04 2017 +0800</div><div class="line"></div><div class="line">    man bash PS1</div><div class="line"></div><div class="line">commit f6d4d8914832341002cbc7dba854260ac97130db</div><div class="line">Author: crepuscule &lt;twilight_wang@foxmail.com&gt;</div><div class="line">Date:   Thu Mar 16 15:27:27 2017 +0800</div><div class="line"></div><div class="line">    end to en</div><div class="line"></div><div class="line">commit d5a6e75a113825c872dd7ae6a6d166bfed1ba28b</div><div class="line">Author: crepuscule &lt;twilight_wang@foxmail.com&gt;</div><div class="line">Date:   Thu Mar 16 14:59:55 2017 +0800</div><div class="line"></div><div class="line">    a new readme file</div><div class="line"><span class="comment"># 可以使用 --pretty=oneline时输出更加简洁</span></div><div class="line">[crepuscule@bogon GitLearn]$ git <span class="built_in">log</span> --pretty=oneline</div><div class="line">d353a1653bcb91a9aad1d7e0267c25424e382c4c man bash PS1</div><div class="line">f6d4d8914832341002cbc7dba854260ac97130db end to en</div><div class="line">d5a6e75a113825c872dd7ae6a6d166bfed1ba28b a new readme file</div><div class="line"><span class="comment"># 使用HEAD 后加n个^表示回退几个版本</span></div><div class="line">[crepuscule@bogon GitLearn]$ git reset --hard HEAD^</div><div class="line">HEAD is now at f6d4d89 end to en</div><div class="line"><span class="comment"># 如果想回到最新版本，找到最新版的commit id，再次使用reset即可</span></div><div class="line">[crepuscule@bogon GitLearn]$ git reset --hard d353a1</div><div class="line">HEAD is now at d353a16 man bash PS1</div><div class="line"><span class="comment"># 如果最新版的commit id不明，那么使用git reflog查看命令记录</span></div><div class="line">[crepuscule@bogon GitLearn]$ git reflog</div><div class="line">d353a16 HEAD@&#123;0&#125;: reset: moving to d353a1</div><div class="line">f6d4d89 HEAD@&#123;1&#125;: reset: moving to HEAD^</div><div class="line">d353a16 HEAD@&#123;2&#125;: commit: man bash PS1</div><div class="line">f6d4d89 HEAD@&#123;3&#125;: commit: end to en</div><div class="line">d5a6e75 HEAD@&#123;4&#125;: commit (initial): a new readme file</div><div class="line"><span class="comment"># 那么最新版id就是d353a16</span></div></pre></td></tr></table></figure>
<h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><p>本文中，工作区即GitLearn.版本库即为.git，里面有stage(index)暂存区，和分支链表。git再初始化时会自动创建master分支，指向当前版本的链表指针即为HEAD。<br>git add 将文件添加进入stage，然后git commit将stage中的更改一次性地添加到分支链表。</p>
<blockquote>
<p>当每次修改文件完成时，均需要git add才能commit。</p>
</blockquote>
<h1 id="修改的撤销"><a href="#修改的撤销" class="headerlink" title="修改的撤销"></a>修改的撤销</h1>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Learing-Git&quot;&gt;&lt;a href=&quot;#Learing-Git&quot; class=&quot;headerlink&quot; title=&quot;Learing Git&quot;&gt;&lt;/a&gt;Learing Git&lt;/h2&gt;&lt;p&gt;通过记录实际学习运行记录的结果来解释git的使用方法&lt;/p&gt;
&lt;h2 id=&quot;本地版本管理&quot;&gt;&lt;a href=&quot;#本地版本管理&quot; class=&quot;headerlink&quot; title=&quot;本地版本管理&quot;&gt;&lt;/a&gt;本地版本管理&lt;/h2&gt;&lt;h3 id=&quot;创建版本库&quot;&gt;&lt;a href=&quot;#创建版本库&quot; class=&quot;headerlink&quot; title=&quot;创建版本库&quot;&gt;&lt;/a&gt;创建版本库&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 建立并进入空的目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon ~]$ mkdir GitLearn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon ~]$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; GitLearn/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon GitLearn]$ &lt;span class=&quot;built_in&quot;&gt;pwd&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/home/crepuscule/GitLearn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开始初始化一个仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon GitLearn]$ git init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Initialized empty Git repository &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/crepuscule/GitLearn/.git/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon GitLearn]$ ls -ah&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.  ..  .git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建新的文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon GitLearn]$ vi readme.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PS1：(提示字符的配置)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『命令提示字符』喔！ 当我们&amp;gt;每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;自己的习惯』就好了。 你可以用 man bash (注3)去查询一下 PS1 的相关说明，以理解底&amp;gt;下的一些符号意义&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将此文件加入跟踪&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon GitLearn]$ git add readme.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将文件提交仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[crepuscule@bogon GitLearn]$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;a new readme file&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[master (root-commit) d5a6e75] a new readme file&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 1 file changed, 3 insertions(+)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; create mode 100644 readme.md&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##    关于此命令的信息：commit命令 为提交进仓库 -m后面输入的是本次提交的说明&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##    git commit -m &amp;lt;msg&amp;gt;, --message=&amp;lt;msg&amp;gt;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##         Use the given &amp;lt;msg&amp;gt; as the commit message. If multiple -m options&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##         are given, their values are concatenated as separate paragraphs.&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://Crepuscule.com/categories/Tools/"/>
    
      <category term="Git" scheme="http://Crepuscule.com/categories/Tools/Git/"/>
    
    
      <category term="Git" scheme="http://Crepuscule.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Docker Learning Note</title>
    <link href="http://Crepuscule.com/Operation-Maintenance/Docker/Operation%20&amp;%20Maintenance/Docker/Docker-Learning-Note/"/>
    <id>http://Crepuscule.com/Operation-Maintenance/Docker/Operation &amp; Maintenance/Docker/Docker-Learning-Note/</id>
    <published>2017-03-14T02:16:09.000Z</published>
    <updated>2017-04-04T10:48:24.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h2><h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><p><a href="https://www.docker.com" target="_blank" rel="external">Docker官网</a><br>本文在fedora中安装docker：</p>
<ol>
<li><p>仅fedora24以上版本支持docker，安装前卸载旧的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo dnf remove docker \</div><div class="line">            docker-common \</div><div class="line">            container-selinux \</div><div class="line">            docker-selinux \</div><div class="line">            docker-engine</div><div class="line"><span class="comment"># docker的镜像存储路径在/var/lib/docker/</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先配置dnf</span></div><div class="line">$ sudo dnf -y install dnf-plugins-core</div><div class="line"><span class="comment"># 添加docker的仓库</span></div><div class="line">$ sudo dnf config-manager \</div><div class="line">    --add-repo \</div><div class="line">    https://download.docker.com/linux/fedora/docker-ce.repo</div><div class="line"><span class="comment"># 可选，开启edge边缘库</span></div><div class="line">$ sudo dnf config-manager --enable docker-ce-edge</div><div class="line"><span class="comment"># 关闭dege repository</span></div><div class="line">$ sudo dnf config-manager --disable docker-ce-edge</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>开始安装docker</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用dnf安装</span></div><div class="line">$ sudo dnf install -y docker-ce</div><div class="line"><span class="comment"># 也可以自己选择包安装</span></div><div class="line">$ dnf list docker-ce.x86_64  --showduplicates |sort -r</div><div class="line">docker-ce.x86_64    17.03.0.fc24      docker-ce-stable  </div><div class="line">$ sudo dnf -y install docker-ce-&lt;VERSION&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>卸载docker</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo dnf remove docker-ce</div><div class="line"><span class="comment"># 如果你想同时移除你的docker镜像，运行：</span></div><div class="line">$ sudo rm -rf /var/lib/docker</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="docker的基本使用"><a href="#docker的基本使用" class="headerlink" title="docker的基本使用"></a>docker的基本使用</h3><ol>
<li>docker的基本配置<br>首先要设置docker的服务启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置docker的开机自启动</span></div><div class="line">$ sudo systemctl <span class="built_in">enable</span> docker</div><div class="line"><span class="comment"># 开启docker守护进程</span></div><div class="line">$ sudo systemctl start docker</div><div class="line"><span class="comment"># 如果对docker配置文件进行了更改，则应该重启docker</span></div><div class="line">$ sudo systemctl restart docker</div></pre></td></tr></table></figure>
</li>
</ol>
<p>docker的官方源：docker hub 在中国速度慢，甚至有时无法下载，所以可以使用中国的源。<br>首先在Dao could上注册帐号，接着root权限打开/etc/default/doocker 配置文件，没有则新建一个。<br>源内容如下：<br><code>DOCKER_OPTS=&quot;-H unix:///var/run/docker.sock -H 0.0.0.0:5555&quot;</code><br>改为：<br><code>DOCKER_OPTS=&quot;--registry-mirror=http://yourname.m.daocloud.io&quot;</code><br>其中yourname为你在Dao could上的用户名。</p>
<ol>
<li>docker的使用</li>
</ol>
<ul>
<li><p>首先检查版本，未出现报错则说明配置正确</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[user@~]$ docker version</div><div class="line">Client:</div><div class="line"> Version:      1.13.0</div><div class="line"> API version:  1.25</div><div class="line"> Go version:   go1.7.3</div><div class="line"> Git commit:   49bf474</div><div class="line"> Built:        Tue Jan 17 09:48:22 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      1.13.0</div><div class="line"> API version:  1.25 (minimum version 1.12)</div><div class="line"> Go version:   go1.7.3</div><div class="line"> Git commit:   49bf474</div><div class="line"> Built:        Tue Jan 17 09:48:22 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"> Experimental: <span class="literal">false</span></div></pre></td></tr></table></figure>
</li>
<li><p>docker镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 搜索镜像</span></div><div class="line"> <span class="variable">$sudo</span> docker search  centos</div><div class="line"> NAME                                   DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">centos                                 The official build of CentOS.                   3173      [OK]       </div><div class="line">jdeathe/centos-ssh                     CentOS-6 6.8 x86_64 / CentOS-7 7.3.1611 x8...   62                   [OK]</div><div class="line">jdeathe/centoser</div><div class="line">ssh-apache-php          CentOS-6 6.8 x86_64 - Apache / PHP-FPM / P...   25                   [OK]</div><div class="line">nimmis/java-centos                     This is docker images of CentOS 7 with dif...   23                   [OK]</div><div class="line">consol/centos-xfce-vnc                 Centos container with <span class="string">"headless"</span> VNC sessi...   22                   [OK]</div><div class="line">gluster/gluster-centos                 Official GlusterFS Image [ CentOS-7 +  Glu...   18                   [OK]</div><div class="line">million12/centos-supervisor            Base CentOS-7 with supervisord launcher, h...   13                   [OK]</div><div class="line">nickistre/centos-lamp                  LAMP on centos setup                            10                   [OK]</div><div class="line"></div><div class="line"><span class="comment"># 拉取镜像</span></div><div class="line">$ sudo docker pull jdeathe/centos-ssh</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker学习笔记&quot;&gt;&lt;a href=&quot;#Docker学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Docker学习笔记&quot;&gt;&lt;/a&gt;Docker学习笔记&lt;/h2&gt;&lt;h3 id=&quot;Docker的安装&quot;&gt;&lt;a href=&quot;#Docker的安装&quot; class=&quot;headerlink&quot; title=&quot;Docker的安装&quot;&gt;&lt;/a&gt;Docker的安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com&quot;&gt;Docker官网&lt;/a&gt;&lt;br&gt;本文在fedora中安装docker：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;仅fedora24以上版本支持docker，安装前卸载旧的版本&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo dnf remove docker \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            docker-common \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            container-selinux \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            docker-selinux \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            docker-engine&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# docker的镜像存储路径在/var/lib/docker/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置仓库&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 首先配置dnf&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo dnf -y install dnf-plugins-core&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 添加docker的仓库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo dnf config-manager \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --add-repo \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    https://download.docker.com/linux/fedora/docker-ce.repo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可选，开启edge边缘库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo dnf config-manager --enable docker-ce-edge&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 关闭dege repository&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo dnf config-manager --disable docker-ce-edge&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Operation &amp; Maintenance" scheme="http://Crepuscule.com/categories/Operation-Maintenance/"/>
    
      <category term="Docker" scheme="http://Crepuscule.com/categories/Operation-Maintenance/Docker/"/>
    
    
      <category term="Docker" scheme="http://Crepuscule.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Python Learning 2</title>
    <link href="http://Crepuscule.com/Python/Documents/Python/Python-Learning-2/"/>
    <id>http://Crepuscule.com/Python/Documents/Python/Python-Learning-2/</id>
    <published>2017-03-12T11:53:07.000Z</published>
    <updated>2017-04-04T10:54:38.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-控制流及函数"><a href="#python-控制流及函数" class="headerlink" title="python 控制流及函数"></a>python 控制流及函数</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Input = int(input(<span class="string">"input a number"</span>))</div><div class="line"></div><div class="line"><span class="keyword">if</span> Input &gt; <span class="number">0</span>:</div><div class="line">  print(<span class="string">"Input num is positive number !"</span>,end=<span class="string">' '</span>)</div><div class="line"><span class="keyword">elif</span> Input == <span class="number">0</span>:</div><div class="line">  print(<span class="string">"Input num is zero !"</span>,end=<span class="string">' '</span>)</div><div class="line"><span class="keyword">elif</span> Input &lt; <span class="number">0</span>:</div><div class="line">  print(<span class="string">"Input num is negative number !"</span>,end=<span class="string">' '</span>)</div><div class="line"><span class="keyword">else</span> :</div><div class="line">  print(<span class="string">"undiscovered number!"</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>Python 的 for 语句依据任意序列（链表或字符串）中的子项，按它们在序列中的顺序来进行迭代<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Measure some strings:</span></div><div class="line"><span class="meta">... </span>words = [<span class="string">'cat'</span>, <span class="string">'window'</span>, <span class="string">'defenestrate'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> w <span class="keyword">in</span> words:</div><div class="line"><span class="meta">... </span>    print(w, len(w))</div><div class="line">...</div><div class="line">cat <span class="number">3</span></div><div class="line">window <span class="number">6</span></div><div class="line">defenestrate <span class="number">12</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是，在迭代过程中修改迭代序列不安全，可以使用其副本进行迭代<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> w <span class="keyword">in</span> words[:]:  <span class="comment"># Loop over a slice copy of the entire list.</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">if</span> len(w) &gt; <span class="number">6</span>:</div><div class="line"><span class="meta">... </span>        words.insert(<span class="number">0</span>, w)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>words</div><div class="line">[<span class="string">'defenestrate'</span>, <span class="string">'cat'</span>, <span class="string">'window'</span>, <span class="string">'defenestrate'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h3><p>生成一个等差的链表序列，如：<br><code>for i in range(5):
    print(i)</code><br>结果输出 0~4 5个数字<br>这样我们可以用range()实现从自定义的数值<br>也可以对range()指定不同的步长，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">range(<span class="number">5</span>,<span class="number">10</span>)</div><div class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="comment">#(不包含10，[5，10) )</span></div><div class="line">range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)</div><div class="line"><span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span></div><div class="line">range(<span class="number">-10</span>,<span class="number">-100</span>,<span class="number">-30</span>)</div><div class="line"><span class="number">-10</span>,<span class="number">-40</span>,<span class="number">-70</span> (不包含<span class="number">-100</span>)</div></pre></td></tr></table></figure></p>
<p>用range将列表中的数据依次输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>List = [<span class="string">'C++'</span>,<span class="string">'JAVA'</span>,<span class="string">'Python'</span>,<span class="string">'Ruby'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(List)):</div><div class="line"><span class="meta">... </span>    print(i,List[i])</div><div class="line">...</div><div class="line">(<span class="number">0</span>, <span class="string">'C++'</span>)</div><div class="line">(<span class="number">1</span>, <span class="string">'JAVA'</span>)</div><div class="line">(<span class="number">2</span>, <span class="string">'Python'</span>)</div><div class="line">(<span class="number">3</span>, <span class="string">'Ruby'</span>)</div></pre></td></tr></table></figure></p>
<p>如果使用print直接打印range()序列，那么它将会打印一个列表，但是事实上range返回的对象并非列表。它使可以迭代返回连续项的。<br><code>&gt;&gt;&gt; print(range(10))
range(0, 10)</code><br>这类对象被称为可迭代的。for其实就是一个迭代器。<br>而使用list()函数可以从可迭代对象中创建列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">6</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure></p>
<p>这个列表是真正的列表类</p>
<blockquote>
<p>拓展：enumerate()函数<br>对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值，enumerate多用于在for循环中得到计数<br>对一个列表，既要遍历索引又要遍历元素时，首先可以这样写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List = [<span class="string">'C++'</span>,<span class="string">'JAVA'</span>,<span class="string">'Python'</span>,<span class="string">'Ruby'</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(List)):</div><div class="line">    print(i,List[i])</div></pre></td></tr></table></figure></p>
</blockquote>
<p>但利用enumerate()会更加直接和优美：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List = [<span class="string">'C++'</span>,<span class="string">'JAVA'</span>,<span class="string">'Python'</span>,<span class="string">'Ruby'</span>]</div><div class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(List):  </div><div class="line"><span class="comment">#该函数读取列表(或者可迭代对象)的同时生成一个同时包含索引和值的列表，方便了对索引和值的同时遍历</span></div><div class="line">    <span class="keyword">print</span> (index, item)</div><div class="line"><span class="comment"># enumerate还可以接收第二个参数，用于指定索引起始值</span></div><div class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(list1, <span class="number">1</span>):</div><div class="line">    <span class="keyword">print</span> (index, item)</div></pre></td></tr></table></figure></p>
<h3 id="break，continue，以及循环else和pass"><a href="#break，continue，以及循环else和pass" class="headerlink" title="break，continue，以及循环else和pass"></a>break，continue，以及循环else和pass</h3><p>循环中可以有else语句。当循环迭代完整个列表或者本次判断条件失败时执行该语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range (<span class="number">2</span>,<span class="number">10</span>):      <span class="comment">#对于每一个需要寻找因子或判断素数的2到10的数</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,n):    </div><div class="line"><span class="comment">#找出该数据的因子，如果找了一遍找不到，交由else处理</span></div><div class="line">        <span class="keyword">if</span> n%x == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> (n,<span class="string">'equals'</span>,x,<span class="string">'*'</span>,n//x)</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>: <span class="comment"># 如果上面没找到再执行这个选型</span></div><div class="line">        <span class="comment"># loop fell through without finding a factor</span></div><div class="line">        print(n,<span class="string">'is a prime number'</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range (<span class="number">2</span>,<span class="number">10</span>):</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,n):</div><div class="line">        <span class="keyword">if</span> n%x == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> (n,<span class="string">'equals'</span>,x,<span class="string">'*'</span>,n//x)</div><div class="line">            <span class="keyword">break</span></div><div class="line"><span class="comment">#这里和else的区别是，无论内层的for是不是成功找到因子，都会输出n is prime number                        </span></div><div class="line">    print(n,<span class="string">'is a prime number'</span>)</div></pre></td></tr></table></figure>
<p>使用一下方法可以实现和else类似的效果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range (<span class="number">2</span>,<span class="number">10</span>):</div><div class="line">    flag = <span class="number">0</span> <span class="comment"># =0 means not found</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,n):</div><div class="line">        <span class="keyword">if</span> n%x == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> (n,<span class="string">'equals'</span>,x,<span class="string">'*'</span>,n//x)</div><div class="line">            flag = <span class="number">1</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>):</div><div class="line">        <span class="comment"># loop fell through without finding a factor</span></div><div class="line">        print(n,<span class="string">'is a prime number'</span>)</div></pre></td></tr></table></figure></p>
<p>pass用于构建最小类，方法，和软件功能架构时使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span> <span class="params">()</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmptyClass</span>:</span></div><div class="line">  <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>斐波那契数列的函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""Print a Fibonacci series up to n. """</span> <span class="comment"># docstring</span></div><div class="line">    a,b=<span class="number">0</span>,<span class="number">1</span></div><div class="line">    <span class="keyword">while</span> a&lt;n:</div><div class="line">        print(a,end=<span class="string">'  '</span>)</div><div class="line">        a,b = b,a+b</div><div class="line">    <span class="keyword">print</span> ()</div><div class="line"></div><div class="line"><span class="comment">#Now call the function we just definded:</span></div><div class="line">fib(<span class="number">2000</span>)</div></pre></td></tr></table></figure></p>
<p>函数体的第一行语句可以是可选的字符串文本，这个字符串是函数的文档字符串，或者称为 docstring。可以通过工具将docstrings生成文档，或者让用户通过代码交互浏览<br>函数 调用 会为函数局部变量生成一个新的符号表。确切的说，所有函数中的变量赋值都是将值存储在局部符号表。变量引用首先在局部符号表中查找，然后是包含函数的局部符号表，然后是全局符号表，最后是内置名字表。因此，全局变量不能在函数中直接赋值（除非用 global 语句命名），尽管他们可以被引用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-控制流及函数&quot;&gt;&lt;a href=&quot;#python-控制流及函数&quot; class=&quot;headerlink&quot; title=&quot;python 控制流及函数&quot;&gt;&lt;/a&gt;python 控制流及函数&lt;/h2&gt;&lt;h3 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Input = int(input(&lt;span class=&quot;string&quot;&gt;&quot;input a number&quot;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; Input &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  print(&lt;span class=&quot;string&quot;&gt;&quot;Input num is positive number !&quot;&lt;/span&gt;,end=&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; Input == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  print(&lt;span class=&quot;string&quot;&gt;&quot;Input num is zero !&quot;&lt;/span&gt;,end=&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; Input &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  print(&lt;span class=&quot;string&quot;&gt;&quot;Input num is negative number !&quot;&lt;/span&gt;,end=&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  print(&lt;span class=&quot;string&quot;&gt;&quot;undiscovered number!&quot;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://Crepuscule.com/categories/Python/"/>
    
      <category term="Documents" scheme="http://Crepuscule.com/categories/Python/Documents/"/>
    
    
      <category term="Python" scheme="http://Crepuscule.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Knapsack Problem</title>
    <link href="http://Crepuscule.com/uncategorized/DSandAl/Knapsack-Problem/"/>
    <id>http://Crepuscule.com/uncategorized/DSandAl/Knapsack-Problem/</id>
    <published>2017-03-12T07:53:24.000Z</published>
    <updated>2017-03-12T08:15:08.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><pre><code>1. 问题描述
</code></pre><p>Almost问题是invest问题和strong问题的升级和加强。文件中每条数据的pi值将会不可预知的比wi少或多一个定值，在wi和为C的情况下下求pi和的最大值。</p>
<ol>
<li>问题分析与思路<br>如果不细看会感觉almost问题与strong和invest问题相比就变化了一点点，其实不然。如果单纯地按strong和almost的思路来思考这题，不仅架构困难，而且计算量很大。介于问题较为复杂，我又用万能解法—穷举法实现了能解决极小规模数据的算法。与subset中穷举算法区别是判断条件改为直接搜寻最大的子集。</li>
<li>背包问题<br>背包问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。如果限定每种物品只能选择0个或1个，则问题称为0-1背包问题。例如有一个最多能承重C=150的物品，现有7个物品重量分别为wi=[35,30,60,50,40,10,25]，价值分别为pi=[10,40,30,50,35,40,30]，现在从这7个物品中选择一个或多个装入背包，要求总重量不超过C的前提下所装入物品具有最高价值。<br>Almost问题就是背包问题的在某方面的简化和某方面的强化。Almost问题的重量和价值只有加减定值得关系，这样会有很多易于寻找的规律。但是背包问题并非要求一个组合重量和等于C，而是越接近C越好。</li>
</ol>
<a id="more"></a>
<p>其实如果在实际的使用途中，等于C这种情况很少见，而且一般很接近C的子集就已经可以满足要求了。所以，almost问题可以被认为与01背包问题等价。<br>关于01背包问题，在参考了开源代码之后，我只得到了以下的实验性方法：<br>(1)    首先解决01背包问题的基本思路<br>我们会定义一个价值密度的概念，将7件物品按价值密度高低排列。每次选择均选择价值密度较高的物品。这样类似贪婪法的解法在数据量较大时会有精确性和高效性的折中。<br>(2)    数据结构<br>定义一个结构体便于存储重量和价值以及标记物品是否被加入过。<br>struct object{<br>  int weight;<br>  int price;<br>  int status; //status有三个状态：0 未加入，1 已加入，2 过重，不可加入<br>};<br>(3)    解决01背包问题的主要代码<br>Void seek(knapsack * now){<br>Int idx;            //存储当前处理的物品索引<br>Int ntc=0;        //当前c值<br>While(idx=choose(now-&gt;objs,now-&gt;totalC-ntc)!=-1){<br>//使用搜寻函数找到当前最适合的物品索引<br>    If((ntc+now-&gt;objs[idx].weight)&lt;=now-&gt;totalC){    //如果满足承重要求则加入背包<br>        Now-&gt;objs[isx].status=1;<br>        Ntc+=now-&gt;objs[idx].weight;<br>}else{<br>Now-&gt;objs[idx].status=2;<br>}<br>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背包问题&quot;&gt;&lt;a href=&quot;#背包问题&quot; class=&quot;headerlink&quot; title=&quot;背包问题&quot;&gt;&lt;/a&gt;背包问题&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 问题描述
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Almost问题是invest问题和strong问题的升级和加强。文件中每条数据的pi值将会不可预知的比wi少或多一个定值，在wi和为C的情况下下求pi和的最大值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;问题分析与思路&lt;br&gt;如果不细看会感觉almost问题与strong和invest问题相比就变化了一点点，其实不然。如果单纯地按strong和almost的思路来思考这题，不仅架构困难，而且计算量很大。介于问题较为复杂，我又用万能解法—穷举法实现了能解决极小规模数据的算法。与subset中穷举算法区别是判断条件改为直接搜寻最大的子集。&lt;/li&gt;
&lt;li&gt;背包问题&lt;br&gt;背包问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。如果限定每种物品只能选择0个或1个，则问题称为0-1背包问题。例如有一个最多能承重C=150的物品，现有7个物品重量分别为wi=[35,30,60,50,40,10,25]，价值分别为pi=[10,40,30,50,35,40,30]，现在从这7个物品中选择一个或多个装入背包，要求总重量不超过C的前提下所装入物品具有最高价值。&lt;br&gt;Almost问题就是背包问题的在某方面的简化和某方面的强化。Almost问题的重量和价值只有加减定值得关系，这样会有很多易于寻找的规律。但是背包问题并非要求一个组合重量和等于C，而是越接近C越好。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://Crepuscule.com/tags/Algorithm/"/>
    
      <category term="Knapsack problem" scheme="http://Crepuscule.com/tags/Knapsack-problem/"/>
    
  </entry>
  
  <entry>
    <title>SubSet</title>
    <link href="http://Crepuscule.com/uncategorized/DSandAl/SubSet/"/>
    <id>http://Crepuscule.com/uncategorized/DSandAl/SubSet/</id>
    <published>2017-03-12T07:49:26.000Z</published>
    <updated>2017-03-12T08:16:10.229Z</updated>
    
    <content type="html"><![CDATA[<p>##　　SubSet 系列问题</p>
<h3 id="包含subset，strong，invest问题"><a href="#包含subset，strong，invest问题" class="headerlink" title="包含subset，strong，invest问题"></a>包含subset，strong，invest问题</h3><p>一、SUBSET问题</p>
<ol>
<li>问题概述<br>从subset文件夹内读取文件，文件共有1000，5000，10000个数字等的5种规模，每种规模下有1000，100000，10000000三种数量级的若干个文件。每个文件中有相应的数据，每条数据有三列，序号，wi，pi，在subset问题中，每条数据中的的wi=pi。<br>现以1000个数字，1000数量级为例，只关心每条数据中的wi数字，则：先求出这1000个数的和SUM，接着取一个在0~1之间的随机小数r，并在这1000个数中寻找元素构造一个子集，使得这个子集所有数的和C（C为整数）满足:C=r*SUM(0&lt;r&lt;1)，求出所有满足这个规则的子集。</li>
<li>贪婪法<br>对于较为复杂的问题，直接拿出完善的解决算法显然是不可能的。所以我先提出了一个与此问题类似的较简单的小问题以求拓展思路：即只需要找出一个子集满足上述问题。在解决这个小问题后可以通过分析这个问题来寻找求解subset问题的方法。<br>对于这个较小的问题，我的解决过程如下：<br>(1) 大致思路<br>在这1000条数据中，先按wi从大到小进行排序，接着简单地依次将大数填入C中，直到C值为期望的值。<br>(2) 数据结构<br>本题需要将每条数据中的序号，wi，pi存储起来成为一个结构体数组方便访问排序。接着使用类进行封装，方便函数的调用和使条理清晰。于是定义结构体SET<br>struct SET{<br> int id,wi,pi;<br>};<br>接着在类中定义SET型指针set，以便在构造函数中定义动态的结构体数组。析构函数中需要加上delete []set;以在程序结束时析构该动态数组。<br>(3) 实现过程<br>首先要进行排序，使用性能较为优越的堆排序对目前来讲较多的数据进行排序，其中需要注意的是结构体之间的大小比较，可以使用一个辅助函数来判断大小使得程序简洁易懂。最后堆排序中的交换函数swap()要将结构体的所有数据成员进行交换。<br>bool SubSet::less(SET a,SET b){    //用于判断结构体大小的辅助函数<br> if(a.wi&lt;=b.wi) return 1;<br> return 0;<br>}<br>接着，对于主要的功能函数seek()，先用变量C存储期望的值，接着需要使用一个循环结构，遍历每一个数据，如果该数据大于变量C，那么执行下一次循环。如果小于等于C那么让C减去这个数。当C值为0时结束循环。<br>void SubSet::seek(){<br>for(int i=size;i&gt;=1;i–){<pre><code>if(C==0)break;
</code></pre>  else if(set[i].wi&lt;=C){<pre><code>   C-=set[i].wi;
}
</code></pre>}<br>}<br>其实这个方法就是典型的贪婪法，对于数据量较大的文件，这个函数会有很大的机率找到一个满足和等于给定数据的子集，但是如果数据量较小，失败率极高。其实对于这个题目这个解法是错误的，它只是有一定几率找到一个满足的子集罢了，其实这也是贪婪法的特性—虽然局部最优，但并非整体最优。但是作为启发思路的引子，它确实让我有了其他的思路。</li>
</ol>
 <a id="more"></a>
<ol>
<li>二叉树穷举<br>在将第一个思路实现了之后，虽然思路有了拓展，但是我依然缺少供研究一组数据的所有子集的规律的验证性算法。于是我想到了穷举法。那么构造二叉树来穷举所有的2^n个子集是不二之选。<br>(1) 基本思路<br>表中每个元素在每个子集中均有两种可能，即存在与不存在，所以该表的除去空集的幂集（所有可能子集，但除去空集）为：2^n-1个，以每一个元素加入或不加入的决策来构成一棵二叉树。<br>首先从最小值开始分叉，每一个深度对应表中的一个数字，如果该元素加入这条路径则该节点为其双亲节点的的左孩子，不加入则为其右孩子。对双亲节点来说即加入则将该数加入C集合中，传递给其左子树，不加入则直接将C传给右孩子。这样叶子共有2^n个，遍历这些结果，如果C值满足需求则记录该子树的路径，在构造完二叉树之后，从结构体数组中一一抽取打印。<br>(2) 数据结构<br>为了完成数据量众多，指针较为复杂的二叉树穷举，需要设计合理的数据结构。首先节点数据结构不仅需要数据域来存储该深度的对应数据和C的当前值，另外还需要左右孩子指针。最后为了便于在识别到满足条件能够快速找到此条路径的所有子集元素，增设一个parent指针指向双亲节点，形成三叉链表，这样就可以直接通过叶子节点来访问它的双亲节点一直到根节点从而快速找到所有子集元素。<br>struct  Node{<br> int data, res;<br> Node <em> lchild;<br> Node </em> rchild;<br> Node <em> parent;<br>};<br>(3) 功能实现<br>本算法是暴力解决型的算法，所以当二叉树构造完毕之后，答案就出来了。构造二叉树的函数传入需要修改的节点的指针，C的值（用于记录结果变化），决策（0或1，1为加上该层的值，0为不加），深度depth（用于定位表中的值，根节点深度为0），双亲指针（用于给当前深度节点添加双亲）。<br>该函数主要逻辑为：如果深度大于或者等于size+1，即已经遍历完所有的元素时，将参数中的bt指针置为空，然后返回上一级，告知上一层此条路径已经构造完成。如果深度在size范围之内，那么生成新的子节点依据参数中的决策decision来判断是否添加此值到这条路径当中，如果添加则新生成的为bt的双亲节点的左子树，否则为其右子树，将对应的data和res（C值）赋成对应的结果，然后将parent指针指向参数中传递过来的parent，最后再将1，0决策传给新生成节点的左右孩子并且递归构建。<br>总结下来，该函数的主要操作为：<br>首先判断深度是否为size+1，若不是 则接受上一个深度传过来的决策，若决策为1 则将对应set[depth].wi数值加入data数据，并将传过来的C值根据data数据域决定加或不加该层数值。 若决策为0 则data置0，C直接继承，若深度是size+1， 则直接将传过来的指针置为NULL。接着开始处理下一深度，先将刚才处理的指针指向的节点的双亲，令其双亲数据域等于传过来的指针值，再向下递归左右子树，左子树总是决策1，右子树总是决策0<br>Node </em> SubSet::create(Node <em> bt,Node </em> parent,int decision,int c,int depth){<br>if(depth&gt;=size+1)bt=NULL;<br>else {<br> bt=new Node;<br> if(decision){<br>   bt-&gt;data=set[depth].wi;<br>   bt-&gt;res=c+bt-&gt;data;<br> } else {<br>   bt-&gt;data=0;<br>   bt-&gt;res=c;<br> }<br> bt-&gt;parent=parent;<br> bt-&gt;lchild=create(bt-&gt;lchild,bt,1,bt-&gt;res,depth+1);<br> bt-&gt;rchild=create(bt-&gt;rchild,bt,0,bt-&gt;res,depth+1);<br>}<br>return bt;<br>}<br>当构建函数完成之后，再依次遍历所有叶子结点，如果值为C满足要求那么将其加入一个链表中，这种链表数据域为Node型指针，指针域为指向下一个此种节点的指针。最后完成后再遍历将其输出即可。<br>(4) 总结<br>这种暴力破解的方式思路简单清晰，结果也正确无疑，但是耗费大量的时间和存储。经实验，我写出的第一个二叉树穷举算法只能求解数据规模为50个数以内的这种问题。虽然并不能完成大量数据的求解，但是它对子集出现的规律探究和新的算法正确性验证有很大的作用。在一个生成好的二叉树中，可以知道想要知道的所有数据，如每一个子集的元素，最多，最少元素的子集，子集的数量等<br>4.回溯法<br>其实我在想出这个方法的时候根本不知道什么是回溯法，在完成了这个算法后我在网上搜索时发现我的方法虽然和他们的算法在表现形式上有很多不同，但是也是有一定的回溯思想在其中的。所以，我也我的这种方法归为“回溯法”。<br>这个方法是由我的第一种错误的方法修改，总结，归纳，并经过不知多少次的实验和不知道多少次的失败才好不容易得出的算法。虽然这种方法有很多的不足，性能也并不高效，甚至会有一些错误。但是毕竟是我几天下来没有具体的思路提示，没有上网借鉴代码自己码出的成果。<br> (1) 思路概述<pre><code>此算法将使用递归进行类似二叉树遍历似的判断。首先排序保证表中数据有序，接着对表中数据进行搜索，先尝试让该数加入子集，然后进行下一次递归判断是否满足条件，接着不让此数加入子集，尝试下一个数。该算法不是标准的回溯算法，但是有部分思路是借鉴回溯思想的。
</code></pre>(2) 算法实现<br>在进行之前先将表进行排序保证有序。函数会首先检查目前情况是否满足条件，接着分为两个分支，先按顺序尝试用C减去表中的数，紧接着进行下一次递归进行深层搜索，如果下一层递归条件满足则返回，如果不可再进行探索也进行返回。<br>返回后接着，后一个分支则不再减去此数而是直接跳过该数去递归深入处理下一个数，但是这里需要事先判断后面是否可以继续进行才让其进行递归，从而减少不必要的函数调用。<br>不过其中也做了一些优化以减少递归次数，比如使用findmax函数寻找此时最大的可被C减的数，minhead则计算出从小到大累加能大于等于当前C的最小索引值，亦即递归到minhead将结束。<br>int SubSet::minhead(int c){             //limit the head from size to this return value<br> int remain=0;int i;<br> for(i=1;i&lt;=size;i++){<pre><code>remain+=set[i].wi;
if(remain&gt;=c)break;
</code></pre> }<br> return i;               //the smallest head<br>}<br>void SubSet::seek(int max,int c){<br>if(c==0){res++;return;}<br>else if(max&lt;=0||set[1].wi&gt;c)return ;<br>int originc=c;<br>max=findmax(max,c);         //返回最大的可减值索引<br>c=c-set[max].wi;<br>seek(max-1,c);<br>int begain=findmax(max-1,originc);<br>if(begain&gt;=minhead(originc))seek(begain,originc);<br>}<br>这个算法使用类似回溯的方法，也借用了穷举中每个元素出现或者不出现的原理进行设计。不过还有很多待改进的地方，<br>5.vector容器实现的回溯法<br>(1) 为什么使用vector<br>C++ STL中，vector是一个十分有用的容器。它是一个方法完备，较为通用的数据结构。如果使用容器，那么将不需要过分的考虑数据的存储及访问方法等问题。这样我们可以专注地研究问题的解决方法。Vector的基本操作有：<br>(1)使用需加入头文件<vector>.<br>(2)创建vector对象，vector<int> vec;<br>(3)尾部插入数字：vec.push_back(a);<br>(4)使用下标访问元素，cout&lt;<vec[0]<<endl; (5)使用迭代器访问元素.="" vector<int="">::iterator it;<br>for(it=vec.begin();it!=vec.end();it++)<br>cout&lt;&lt;* it&lt;<endl; (2)="" 主要思路及代码展示="" 同样这里使用了回溯的思想，只是这里思路非常简单，只是在二叉树搜索的基础上去掉了不可能满足条件的二叉树的构建。但这样条理清晰，代码优美。="" 数据结构定义：="" class="" subset="" {="" public:="" vector<vector<int=""> &gt; seek(vector<int> &amp;a, int c) ;<br> void seekCore(vector<int> &amp;a, int st, int c) ;<br>private:<br> vector<int> set;<br> vector<vector<int> &gt; res;<br>};<br>主要功能函数：<br>void seekCore(vector<int> &amp;a, int st, int c) {<pre><code>if(target == 0){
    res.push_back(path);
    return;
}
if(target &lt; 0 || st &gt;= candidates.size() || candidates[st] &gt; target) return;
seekCore(a, st+1, c); //case1: skip
path.push_back(candidates[st]);
seekCore(a, st+1, c - candidates[st]); //case2: not skip
path.pop_back();
</code></pre> }<br>二．Invest 问题<br> 1.问题概述<br>这个问题的文件和subset的区别为，pi总比wi多一个定值，Invest问题在要求满足wi的和等于C的同时求出一个满足使pi和最大的最优子集。</int></vector<int></int></int></int></endl;></vec[0]<<endl;></int></vector></li>
<li><p>继承subset<br>在成功解决subset问题之前，其实我已经有了关于invest问题的诸多思路。首先，既然pi总比wi多出定值，而wi的和又是一个定值，那么pi和与wi和之间差的是n个定值。也就是说，子集中元素个数越多，pi的和就越大。那么问题转换为寻求最多元素的子集。<br>(1)    基本思路<br>首先我的想法是将文件按从小到大排序，接着从小到大依次装入C中直到C满足要求，这样C中装的就是尽量小的值，那么元素的个数就是最多的。但是在我还没设计数据结构时就发现这样的思路简直是无稽之谈。随便的几个反例就可以证明它是错的。<br>接着，我需要一个比较思路清晰地方法来代替这种方法。我想到了subset和invest之间的联系。确实，使用subset的代码，稍微加一点功能就可以实现invest问题。于是，下面是使用subset思路来解决invest问题的大体思路：<br>首先如果要找出元素个数最多的子集，那么需要在subset函数中比较每一个结果的元素个数，这样也就是每一个回溯得来的路径都需要存储下来。而在本题只需要求最优解的情况下，如果还在递归深入时层层创建链表，将所有路径均保存下来显然是浪费资源，浪费时间而且多此一举。<br>接着我发现在上面的subset算法中，递归深度很大时确定的可行路径会有极大的长度，在稍加分析之后可得出下列结论：<br>递归深度最大时确认的可行子集的节点所在的子集即为长度最大的子集。<br>那么使用上面处理subset问题的算法来实现invest问题就有了理论依据。但是如何存储这个子集中每一个节点又是新的问题。我的方法是，在确定了最大的深度节点之后，在递归返回的时候将节点一一加入链表，那么就可以有针对性地只将需要用到的节点串起来形成链表。<br>(2)    数据结构设计<br>首先被存储的节点将被存储在一个结构体中，该结构体存储wi对应的SET型结构体的指针，C的当前结果，指向下一个该类型结构体的指针<br>struct invest{<br>SET <em> link; int res;<br>invest </em> next;<br>};<br>接着，在申请构造存储子集的时候需要一个头结点来存储深度信息以及invest类型的链表信息，所以定义一个investHead型结构体<br>struct investHead{<br>int depth;<br>bool isadd;<br>invest <em> sons;<br>};<br>(3)    具体实现方法<br>使用subset中已有的代码，在c==0时判断深度是否更深，如果更深删除掉之前构造的链表，重新在更深的深度中递归返回构建链表。而在递归深入函数seek（）下一级返回之后，会有判断逻辑判断返回值，以判断是否将当前深度数值加入链表。而第二个递归的深度是和本函数一致的，不需构建。<br>investHead </em> seek(int max,int c,int depth){<br>   if(c==0){</p>
<pre><code>if(Record-&gt;depth&gt;=depth) return NULL;
else if(Record-&gt;depth&lt;depth){    
    deleteHead(Record);
    Record-&gt;depth=depth;
    Record-&gt;sons=NULL;
    return Record;
  }
</code></pre><p>   }<br>   else if(max&lt;=0||set[1].wi&gt;c)return NULL;<br>   max=findmax(max,c);<br>   c=c-set[max].wi;<br>   investHead * flag1=seek(max-1,c,depth+1);<br>   if(flag1)insetToTail(flag1,&amp;set[max],c+set[max].wi);</p>
<p>   investHead * flag2=NULL;<br>   if(begain&gt;=minhead(originc)) flag2=seek(begain,originc,depth);</p>
<pre><code>if(flag1)return flag1;
</code></pre><p>   else if(flag2)return flag2;<br>   else return NULL;<br>}<br>(4)    问题总结<br> 关于invest问题，其实它和subset以及strong问题均有微妙的联系。只需要在subset问题上多加几个数据结构和功能即可。而关于子集链表的构建问题确实是花了我不少功夫才想出来的东西，虽然实现这种方式的代码不是那么优美，简洁，但是至少比在递归深入时构建好得多。下面的strong问题将和invest问题有着类似的解决方法。</p>
</li>
<li>使用vector 改进<br>(1)    思路概述<br>本算法的思路其实是类似二叉树构造的思路和回溯思想的整合，每个数均有加入和不加入两种可能性，那么在每层递归时需要有两个分支向下递归。如果在集合中没有重复的数据，那么函数将会在每一层判断是否满足条件，不满足递归条件时停止向下递归。之后，将会有一条分支不加入此数向下递归，另一条分支加上此数向下递归。<br>如果集合中含有重复的元素，先将num排序，让重复的元素一起了。对于这些重复的元素，单独提出来考虑。<br>(2)    函数实现<br>先看较为简单的无重复元素的算法，在排序之后，按从小到大的顺序进行搜索。递归函数先判断 是否target被减为0，满足则返回。接着，如果继续递归的条件不被满足，也将停止递归。然后会有一条分支不加入此数据递归，另一条分支加入此数递归。<br> void combinSumCore(vector<int> &amp;candidates, int st, int target) {<pre><code>if(target == 0){
    res.push_back(path);
    return;
}
if(target &lt; 0 || st &gt;= candidates.size() || candidates[st] &gt; target) return;
combinSumCore(candidates, st+1, target);
path.push_back(candidates[st]);
combinSumCore(candidates, st+1, target - candidates[st]);
path.pop_back();
</code></pre> }<br>如果有重复的元素，那么对于这些重复的元素，单独提出来考虑。代码如下：<pre><code>if(start &lt; num.size()){     
    int i = start+1;
    for(; i &lt; num.size() &amp;&amp; num[start] == num[i]; ++i);
    combinationSumCore(num, i, target);
    int sum = 0, j = i-1;
    for(; j &gt;= start; --j){  
        sum += num[j];      
        path.push_back(num[j]);
        combinationSumCore(num, i, target - sum);
    }
    for(j = i-1; j &gt;= start; --j){  
        path.pop_back();
    }
}
</code></pre>三．Strong问题<ol>
<li>问题概述<br>Strong问题的文件和invest的唯一区别为，pi总比wi少一个定值，同样在要求满足wi的和等于C的同时求出一个满足使pi和最大的最优子集。</li>
<li>解决思路和实现方法<br>介于strong问题和invest问题完全是一个问题不同的侧重点，所以我一直将两者放在一起讨论和思考。那么这里strong问题同样基于subset的核心代码，但是需要注意构造链表的判断逻辑，invest的逻辑为如果记录的深度比当前深度大那么返回NULL表示不会构建链表，反之析构掉当前链表重新按本深度节点进行构建，需要将上面invest的深度判断条件改为相反方向，寻求深度最小的可行子集。Invest中深度和strongHead类型头指针的深度初始值的初始值为0，这里则需要需要调成最大，也就是c++中的无穷大INFTY，不过显然这个无穷大并不是真的无穷大，而是一个宏定义，#define INFTY 2147483647 为int型最大值。此处略去代码，几乎和invest一致。</li>
</ol>
</int></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##　　SubSet 系列问题&lt;/p&gt;
&lt;h3 id=&quot;包含subset，strong，invest问题&quot;&gt;&lt;a href=&quot;#包含subset，strong，invest问题&quot; class=&quot;headerlink&quot; title=&quot;包含subset，strong，invest问题&quot;&gt;&lt;/a&gt;包含subset，strong，invest问题&lt;/h3&gt;&lt;p&gt;一、SUBSET问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;问题概述&lt;br&gt;从subset文件夹内读取文件，文件共有1000，5000，10000个数字等的5种规模，每种规模下有1000，100000，10000000三种数量级的若干个文件。每个文件中有相应的数据，每条数据有三列，序号，wi，pi，在subset问题中，每条数据中的的wi=pi。&lt;br&gt;现以1000个数字，1000数量级为例，只关心每条数据中的wi数字，则：先求出这1000个数的和SUM，接着取一个在0~1之间的随机小数r，并在这1000个数中寻找元素构造一个子集，使得这个子集所有数的和C（C为整数）满足:C=r*SUM(0&amp;lt;r&amp;lt;1)，求出所有满足这个规则的子集。&lt;/li&gt;
&lt;li&gt;贪婪法&lt;br&gt;对于较为复杂的问题，直接拿出完善的解决算法显然是不可能的。所以我先提出了一个与此问题类似的较简单的小问题以求拓展思路：即只需要找出一个子集满足上述问题。在解决这个小问题后可以通过分析这个问题来寻找求解subset问题的方法。&lt;br&gt;对于这个较小的问题，我的解决过程如下：&lt;br&gt;(1) 大致思路&lt;br&gt;在这1000条数据中，先按wi从大到小进行排序，接着简单地依次将大数填入C中，直到C值为期望的值。&lt;br&gt;(2) 数据结构&lt;br&gt;本题需要将每条数据中的序号，wi，pi存储起来成为一个结构体数组方便访问排序。接着使用类进行封装，方便函数的调用和使条理清晰。于是定义结构体SET&lt;br&gt;struct SET{&lt;br&gt; int id,wi,pi;&lt;br&gt;};&lt;br&gt;接着在类中定义SET型指针set，以便在构造函数中定义动态的结构体数组。析构函数中需要加上delete []set;以在程序结束时析构该动态数组。&lt;br&gt;(3) 实现过程&lt;br&gt;首先要进行排序，使用性能较为优越的堆排序对目前来讲较多的数据进行排序，其中需要注意的是结构体之间的大小比较，可以使用一个辅助函数来判断大小使得程序简洁易懂。最后堆排序中的交换函数swap()要将结构体的所有数据成员进行交换。&lt;br&gt;bool SubSet::less(SET a,SET b){    //用于判断结构体大小的辅助函数&lt;br&gt; if(a.wi&amp;lt;=b.wi) return 1;&lt;br&gt; return 0;&lt;br&gt;}&lt;br&gt;接着，对于主要的功能函数seek()，先用变量C存储期望的值，接着需要使用一个循环结构，遍历每一个数据，如果该数据大于变量C，那么执行下一次循环。如果小于等于C那么让C减去这个数。当C值为0时结束循环。&lt;br&gt;void SubSet::seek(){&lt;br&gt;for(int i=size;i&amp;gt;=1;i–){&lt;pre&gt;&lt;code&gt;if(C==0)break;
&lt;/code&gt;&lt;/pre&gt;  else if(set[i].wi&amp;lt;=C){&lt;pre&gt;&lt;code&gt;   C-=set[i].wi;
}
&lt;/code&gt;&lt;/pre&gt;}&lt;br&gt;}&lt;br&gt;其实这个方法就是典型的贪婪法，对于数据量较大的文件，这个函数会有很大的机率找到一个满足和等于给定数据的子集，但是如果数据量较小，失败率极高。其实对于这个题目这个解法是错误的，它只是有一定几率找到一个满足的子集罢了，其实这也是贪婪法的特性—虽然局部最优，但并非整体最优。但是作为启发思路的引子，它确实让我有了其他的思路。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="http://Crepuscule.com/tags/C-C/"/>
    
      <category term="SubSet" scheme="http://Crepuscule.com/tags/SubSet/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Crepuscule.com/uncategorized/Tools/hello-world/"/>
    <id>http://Crepuscule.com/uncategorized/Tools/hello-world/</id>
    <published>2017-03-11T12:58:46.790Z</published>
    <updated>2017-01-17T12:19:21.218Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=745137&auto=0&height=66"></iframe>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Disable Selinux</title>
    <link href="http://Crepuscule.com/Linux/Linux-Distributions/Fedora-System-Config-Repair/Linux/Linux%20Distributions/Fedora%20System%20Config%20&amp;%20Repair/Disable-Selinux/"/>
    <id>http://Crepuscule.com/Linux/Linux-Distributions/Fedora-System-Config-Repair/Linux/Linux Distributions/Fedora System Config &amp; Repair/Disable-Selinux/</id>
    <published>2017-03-09T01:24:48.000Z</published>
    <updated>2017-04-04T10:42:11.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启-关闭SELINUX的方法"><a href="#开启-关闭SELINUX的方法" class="headerlink" title="开启/关闭SELINUX的方法"></a>开启/关闭SELINUX的方法</h2><ol>
<li>临时开启/关闭</li>
</ol>
<p>在启动之前可以修改Linux核心参数(Kernel Parameter) 或者可以在核心参数后加上： selinux=0 （停止） 或 selinux=1 (开启）参数<br>/boot/grub/menu.lst<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title Fedora Core (2.6.18-1.2798.fc6)</div><div class="line">root (hd0,0)</div><div class="line">kernel /vmlinuz-2.6.18-1.2798.fc6 ro root=LABEL=/ rhgb quiet  selinux=0 <span class="comment">#在这里加上参数</span></div><div class="line">initrd /initrd-2.6.18-1.2798.fc6.img</div></pre></td></tr></table></figure></p>
<p>在机器运行时可以直接用命令setenforce修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setenforce 0 <span class="comment">#设置SELinux 成为permissive模式</span></div><div class="line">setenforce 1 <span class="comment">#设置SELinux 成为enforcing模式</span></div></pre></td></tr></table></figure></p>
<ol>
<li>永久关闭<br>root权限修改/etc/selinux/config文件中 SELINUX=disabled，千万不要修改下面的 SELINUXTYPE=targeted</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></div><div class="line"><span class="comment"># SELINUX= can take one of these three values:</span></div><div class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></div><div class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></div><div class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></div><div class="line">SELINUX=enforcing</div><div class="line"><span class="comment"># SELINUXTYPE= can take one of these three values:</span></div><div class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></div><div class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></div><div class="line"><span class="comment">#     mls - Multi Level Security protection.</span></div><div class="line">SELINUXTYPE=targeted</div></pre></td></tr></table></figure>
<p>修改后文件如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></div><div class="line"><span class="comment"># SELINUX= can take one of these three values:</span></div><div class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></div><div class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></div><div class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></div><div class="line">SELINUX=disabled</div><div class="line"><span class="comment"># SELINUXTYPE= can take one of these three values:</span></div><div class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></div><div class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></div><div class="line"><span class="comment">#     mls - Multi Level Security protection.</span></div><div class="line">SELINUXTYPE=targeted</div></pre></td></tr></table></figure>
<p>如果将SELINUX设置为permissive,则selinux只会提醒和警告，不会阻止。<br>修改完成后reboot之后完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开启-关闭SELINUX的方法&quot;&gt;&lt;a href=&quot;#开启-关闭SELINUX的方法&quot; class=&quot;headerlink&quot; title=&quot;开启/关闭SELINUX的方法&quot;&gt;&lt;/a&gt;开启/关闭SELINUX的方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;临时开启/关闭&lt;/li&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://Crepuscule.com/categories/Linux/"/>
    
      <category term="Linux Distributions" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/"/>
    
      <category term="Fedora System Config &amp; Repair" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/Fedora-System-Config-Repair/"/>
    
    
      <category term="Linux" scheme="http://Crepuscule.com/tags/Linux/"/>
    
      <category term="Selinux" scheme="http://Crepuscule.com/tags/Selinux/"/>
    
  </entry>
  
  <entry>
    <title>vector-I</title>
    <link href="http://Crepuscule.com/C-C/C-C-Project/Vector/C_Cpp/C_Cpp%20Project/vector-I/"/>
    <id>http://Crepuscule.com/C-C/C-C-Project/Vector/C_Cpp/C_Cpp Project/vector-I/</id>
    <published>2017-03-02T14:06:36.000Z</published>
    <updated>2017-04-04T11:12:49.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-标准库-Vector-类型"><a href="#C-标准库-Vector-类型" class="headerlink" title="C++ 标准库 Vector 类型"></a>C++ 标准库 Vector 类型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>vector（容器） 是同一种类型的对象的集合，每个对象都有一个对应的整数索引值。和 string 对象一样， 标准库将负责管理与存储元素相关的内存。它可以包含其他对象，但一个容器中的所有对象都必须是同一种类型的。<br>使用vector之前，需要加入头文件和做相应的using声明<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div></pre></td></tr></table></figure></p>
<p>vector 是一个类模板（class template） 。可以定义保存 string 对象的 vector，或保存 int 值的 vector，又或是保存自定义的类类型对象（如<br>Sales_items 对象）的 vector。声明从类模板产生的某种类型的对象，需要提供附加信息，信息的种类取决于模板。以 vector 为例，必须说明 vector 保存何种对象的类型，通过将类型放在类型放在类模板名称后面的尖括号中来指定类型：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec; <span class="comment">// ivec holds objects of type int</span></div><div class="line"><span class="built_in">vector</span>&lt;Sales_item&gt; Sales_vec; <span class="comment">// holds Sales_items</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="定义和初始化"><a href="#定义和初始化" class="headerlink" title="定义和初始化"></a>定义和初始化</h3><p>vector共有以下的构造函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span> &lt;T&gt; v1;</div><div class="line"><span class="built_in">vector</span> &lt;T&gt; v2(v1);    <span class="comment">//v2为v1副本</span></div><div class="line"><span class="built_in">vector</span> &lt;T&gt; v3(n,i);   <span class="comment">//n个值为i的元素</span></div><div class="line"><span class="built_in">vector</span> &lt;T&gt; v4(n);     <span class="comment">//v4 含有值初始化的元素的 n 个副本</span></div></pre></td></tr></table></figure></p>
<ol>
<li>创建空的对象</li>
<li>使用另一个vector对象可以定义一个副本，但只有相同的元素类型的vector对象才可以参与对象复制</li>
<li>可以用元素个数和元素值对 vector 对象进行初始化。构造函数用元素个数来决定 vector 对象保存元素的个数，元素值指定每个元素的初始值：</li>
<li>如果没有指定元素的初始化式，那么标准库将自行提供一个元素初始值进行值初始化（value initializationd） 。这个由库生成的初始值将用来初始化容器中的每个元素，具体值为何，取决于存储在 vector 中元素的数据类型。如果 vector 保存内置类型（如 int 类型）的元素，那么标准库将用 0 值创建元素初始化式，如，vector<string> fvec(10);如果 vector 保存的是含有构造函数的类类型（如 string）的元素，标准<br>库将用该类型的默认构造函数创建元素初始化式：</string></li>
</ol>
<p>vector 对象（以及其他标准库容器对象）的重要属性就在于可以在运行时高效地添加元素。因为 vector 增长的效率高，在元素值已知的情况下，最好是动态地添加元素。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-标准库-Vector-类型&quot;&gt;&lt;a href=&quot;#C-标准库-Vector-类型&quot; class=&quot;headerlink&quot; title=&quot;C++ 标准库 Vector 类型&quot;&gt;&lt;/a&gt;C++ 标准库 Vector 类型&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;vector（容器） 是同一种类型的对象的集合，每个对象都有一个对应的整数索引值。和 string 对象一样， 标准库将负责管理与存储元素相关的内存。它可以包含其他对象，但一个容器中的所有对象都必须是同一种类型的。&lt;br&gt;使用vector之前，需要加入头文件和做相应的using声明&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;vector 是一个类模板（class template） 。可以定义保存 string 对象的 vector，或保存 int 值的 vector，又或是保存自定义的类类型对象（如&lt;br&gt;Sales_items 对象）的 vector。声明从类模板产生的某种类型的对象，需要提供附加信息，信息的种类取决于模板。以 vector 为例，必须说明 vector 保存何种对象的类型，通过将类型放在类型放在类模板名称后面的尖括号中来指定类型：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; ivec; &lt;span class=&quot;comment&quot;&gt;// ivec holds objects of type int&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;Sales_item&amp;gt; Sales_vec; &lt;span class=&quot;comment&quot;&gt;// holds Sales_items&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://Crepuscule.com/categories/C-C/"/>
    
      <category term="C/C++ Project" scheme="http://Crepuscule.com/categories/C-C/C-C-Project/"/>
    
      <category term="Vector" scheme="http://Crepuscule.com/categories/C-C/C-C-Project/Vector/"/>
    
    
      <category term="Vector" scheme="http://Crepuscule.com/tags/Vector/"/>
    
      <category term="STL" scheme="http://Crepuscule.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Qlcoder</title>
    <link href="http://Crepuscule.com/Tools/Qcode/Qlcoder/"/>
    <id>http://Crepuscule.com/Tools/Qcode/Qlcoder/</id>
    <published>2017-02-28T04:41:54.000Z</published>
    <updated>2017-02-28T04:52:02.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Qlcoder-笔记"><a href="#Qlcoder-笔记" class="headerlink" title="Qlcoder 笔记"></a>Qlcoder 笔记</h2><h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Qlcoder-笔记&quot;&gt;&lt;a href=&quot;#Qlcoder-笔记&quot; class=&quot;headerlink&quot; title=&quot;Qlcoder 笔记&quot;&gt;&lt;/a&gt;Qlcoder 笔记&lt;/h2&gt;&lt;h3 id=&quot;断点续传&quot;&gt;&lt;a href=&quot;#断点续传&quot; class=&quot;head
    
    </summary>
    
      <category term="Tools" scheme="http://Crepuscule.com/categories/Tools/"/>
    
    
      <category term="Qlcoder" scheme="http://Crepuscule.com/tags/Qlcoder/"/>
    
  </entry>
  
  <entry>
    <title>Python Learning 1</title>
    <link href="http://Crepuscule.com/Python/Documents/Python/Python-Learning-1/"/>
    <id>http://Crepuscule.com/Python/Documents/Python/Python-Learning-1/</id>
    <published>2017-02-23T03:13:13.000Z</published>
    <updated>2017-04-04T10:54:08.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-基础及数据类性"><a href="#python-基础及数据类性" class="headerlink" title="python 基础及数据类性"></a>python 基础及数据类性</h2><h3 id="python-解释器"><a href="#python-解释器" class="headerlink" title="python 解释器"></a>python 解释器</h3><p>Python 解释器有些操作类似 Unix shell：当使用终端设备（tty）作为标准输入调用时，它交互的解释并执行命令；当使用文件名参数或以文件作为标准输入调用时，它读取文件并将文件作为 脚本 执行。<br>可以再在终端中输入python来启动，而第二种启动 Python 解释器的方法是<code>python -c command [arg] ...，</code>这种方法可以在 命令行 执行 Python 语句，类似于 shell 中的 -c 选项。由于 Python 语句通常会包含空格或其他特殊 shell 字符，一般建议将 命令 用单引号包裹起来。<br>有一些 Python 模块也可以当作脚本使用。你可以使用 python -m module [arg] … 命令调用它们，这类似在命令行中键入完整的路径名执行 模块 源文件一样</p>
<h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>调用解释器时，脚本名和附加参数传入一个名为 sys.argv 的字符串列表，通过执行 import sys来够获取这个列表，列表的长度大于等于1，即列表至少有一个元素为sys.argv[0] ，此时为空字符串。<br>脚本名指定为 ‘-‘ （表示标准输入）时， sys.argv[0] 被设定为 ‘-‘，使用 -c 指令 时，sys.argv[0] 被设定为 ‘-c’。使用 -m 模块 参数时，sys.argv[0] 被设定为指定模块的全名。-c 指令 或者 -m 模块 之后的参数不会被 Python 解释器的选项处理机制所截获，而是留在 sys.argv 中，供脚本命令操作<br><a id="more"></a></p>
<h4 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h4><p>从 tty 读取命令时，解释器工作于交互模式。这种模式下它根据主提示符(&gt;&gt;&gt;)来执行；继续的部分被称为 从属提示符，由三个点标识(…)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Python <span class="number">3.5</span><span class="number">.2</span> (v3<span class="number">.5</span><span class="number">.2</span>:<span class="number">4</span>def2a2901a5, Jun <span class="number">25</span> <span class="number">2016</span>, <span class="number">22</span>:<span class="number">01</span>:<span class="number">18</span>) [MSC v<span class="number">.1900</span> <span class="number">32</span> bit (Intel)] on win32</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a :</div><div class="line"><span class="meta">... </span>   print(<span class="string">"Be careful not to fall off!"</span>)</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h4 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: encoding -*-  为源文件指定UTF-8编码</span></div><div class="line"><span class="comment"># -*- coding: cp-1252 -*-  为源程序指定 Windows-1252编码</span></div></pre></td></tr></table></figure>
<h3 id="python-基本类型和运算"><a href="#python-基本类型和运算" class="headerlink" title="python 基本类型和运算"></a>python 基本类型和运算</h3><h4 id="数字及其运算"><a href="#数字及其运算" class="headerlink" title="数字及其运算"></a>数字及其运算</h4><p>运算符 +，-，<em> 和 / 为惯用概念，括号 () 用于分组,计算余数使用 % ,计算幂使用*</em></p>
<blockquote>
<p>注意: / 除法返回浮点数 ，// 为 整除</p>
</blockquote>
<p>在交互模式中，最近一个表达式的值赋给变量_，可使用上次的结果<br>如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">10</span></div><div class="line"><span class="number">1024</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>_/<span class="number">2</span></div><div class="line"><span class="number">512.0</span></div></pre></td></tr></table></figure></p>
<p>python还支持Decimal（小数）和fraction，甚至复数，使用<code>a+bj</code>或<code>a-bJ</code>的形式表示 。对于需要精确十进制表示的情况，可以尝试使用 decimal 模块，它实现的十进制运算适合会计方面的应用和高精度要求的应用。而fractions 模块支持另外一种形式的运算，该运算基于有理数（因此分数可以精确地表示）。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul>
<li><p>python中字符串可以用<code>&#39;..&#39;</code>,<code>&quot;..&quot;</code>表示,使用<code>\</code>转义</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="string">'python\'s'</span></div><div class="line"><span class="string">"python's"</span></div><div class="line">&gt;&gt;&gt;<span class="string">"python's"</span></div><div class="line"><span class="string">"python's"</span></div><div class="line"><span class="comment"># 如果需要的字符串中有双引号，外部用单引号括起来。或者使用\转义</span></div><div class="line">&gt;&gt;&gt;<span class="string">'"what did you say",saied he.'</span></div><div class="line"><span class="string">'"what did you say",saied he.'</span></div><div class="line">&gt;&gt;&gt;<span class="string">"\"what did you say\",saied he."</span></div><div class="line"><span class="comment"># 如果需要的字符串中有单引号，外部用双引号括起来。或者使用\转义</span></div><div class="line">&gt;&gt;&gt;print(<span class="string">'C:\some\name'</span>)  </div><div class="line">C:\some</div><div class="line">ame</div><div class="line"><span class="comment"># 在print函数中可以使用下面的形式进行取消转义</span></div><div class="line">&gt;&gt;&gt;print(<span class="string">r'C:\some\name'</span>)  </div><div class="line">C:\some\name</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 或者｀ ‘’’…’’’｀将字符串写在多行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"""python</span></div><div class="line"><span class="meta">... </span>is \n</div><div class="line"><span class="meta">... </span>a very</div><div class="line"><span class="meta">... </span>poweful</div><div class="line"><span class="meta">... </span>tools"""</div><div class="line"><span class="string">'python\nis \n \na very\npoweful \ntools'</span></div><div class="line"><span class="comment"># 转义字符回在字符串中被显示出来</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"""python \</span></div><div class="line"><span class="meta">... </span>is a \</div><div class="line"><span class="meta">... </span>very poweful \</div><div class="line"><span class="meta">... </span>tools"""</div><div class="line"><span class="string">'python is a very poweful tools'</span></div><div class="line"><span class="comment"># 加入\来实现两行在逻辑上是同一行</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串相连</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="string">'pyt'</span>+<span class="string">'hon'</span></div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="comment"># 使用+连接</span></div><div class="line">&gt;&gt;&gt;<span class="number">2</span>*<span class="string">'py'</span>+<span class="string">'thon'</span></div><div class="line"><span class="string">'pypython'</span></div><div class="line"><span class="comment"># * 表示字符串的重复</span></div><div class="line">&gt;&gt;&gt;<span class="string">'pyt'</span><span class="string">'hon'</span></div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="comment"># 或者相邻的字符串会自动相连</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串索引及切片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;str=<span class="string">'python'</span></div><div class="line">&gt;&gt;&gt;str[<span class="number">1</span>]</div><div class="line"><span class="string">'y'</span></div><div class="line">&gt;&gt;&gt;str[<span class="number">-0</span>]</div><div class="line"><span class="string">'p'</span></div><div class="line"><span class="comment"># -0 即为 0</span></div><div class="line">&gt;&gt;&gt;str[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line"><span class="string">'pyth'</span></div><div class="line"><span class="comment"># 从 第0号元素到第3号元素</span></div><div class="line">&gt;&gt;&gt;str[<span class="number">2</span>:]</div><div class="line"><span class="string">'thon'</span></div><div class="line"><span class="comment"># 表示2到结尾</span></div><div class="line">&gt;&gt;&gt;str[:<span class="number">3</span>]+str[<span class="number">3</span>:] 或者 str[:]</div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="comment"># 这样可以表示完整的字符串</span></div><div class="line">&gt;&gt;&gt;str[<span class="number">-3</span>:]</div><div class="line"><span class="string">'hon'</span></div><div class="line">切片索引值展示：</div><div class="line">+---+---+---+---+---+---+</div><div class="line">| P | y | t | h | o | n |</div><div class="line">+---+---+---+---+---+---+</div><div class="line"><span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span></div><div class="line"><span class="number">-6</span>  <span class="number">-5</span>  <span class="number">-4</span>  <span class="number">-3</span>  <span class="number">-2</span>  <span class="number">-1</span></div><div class="line">&gt;&gt;&gt;len(str)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="comment"># 使用len（）函数获取长度</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Python 有几个 复合 数据类型，用于表示其它的值。最通用的是 list (列表) ，它可以写作中括号之间的一列逗号分隔的值。列表的元素不必是同一类型:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;List = [<span class="number">415</span>,<span class="number">545</span>,<span class="number">454</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>List</div><div class="line">[<span class="number">415</span>,<span class="number">545</span>,<span class="number">454</span>]</div></pre></td></tr></table></figure></p>
<p>list也可以被索引和切片，但和字符串不同，列表中的元素可被赋值修改。甚至整个列表都也可以被赋值<br>使用 append() 方法为列表添加新元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;List.append(<span class="number">234</span>)</div><div class="line">&gt;&gt;&gt;List</div><div class="line">[<span class="number">415</span>,<span class="number">545</span>,<span class="number">454</span>，<span class="number">234</span>]</div><div class="line"></div><div class="line">&gt;&gt;&gt;List=[<span class="number">45</span>,<span class="number">56</span>,<span class="number">90</span>,<span class="number">34</span>]</div><div class="line">&gt;&gt;&gt;List</div><div class="line">[<span class="number">45</span>,<span class="number">56</span>,<span class="number">90</span>,<span class="number">34</span>]</div><div class="line"><span class="comment"># 可被赋值</span></div><div class="line"></div><div class="line">&gt;&gt;&gt;List[<span class="number">0</span>:<span class="number">1</span>]=[<span class="number">0</span>,<span class="number">1</span>]</div><div class="line">&gt;&gt;&gt;List</div><div class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">90</span>,<span class="number">34</span>]</div><div class="line"><span class="comment"># 列表中的切片也可以白赋值</span></div><div class="line"></div><div class="line">&gt;&gt;&gt;List=[]</div><div class="line">&gt;&gt;&gt;List</div><div class="line">[]</div><div class="line"><span class="comment"># 也可以被赋空值</span></div><div class="line">&gt;&gt;&gt;len(List)</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>列表也可以被嵌套使用，相当于二维数组</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-基础及数据类性&quot;&gt;&lt;a href=&quot;#python-基础及数据类性&quot; class=&quot;headerlink&quot; title=&quot;python 基础及数据类性&quot;&gt;&lt;/a&gt;python 基础及数据类性&lt;/h2&gt;&lt;h3 id=&quot;python-解释器&quot;&gt;&lt;a href=&quot;#python-解释器&quot; class=&quot;headerlink&quot; title=&quot;python 解释器&quot;&gt;&lt;/a&gt;python 解释器&lt;/h3&gt;&lt;p&gt;Python 解释器有些操作类似 Unix shell：当使用终端设备（tty）作为标准输入调用时，它交互的解释并执行命令；当使用文件名参数或以文件作为标准输入调用时，它读取文件并将文件作为 脚本 执行。&lt;br&gt;可以再在终端中输入python来启动，而第二种启动 Python 解释器的方法是&lt;code&gt;python -c command [arg] ...，&lt;/code&gt;这种方法可以在 命令行 执行 Python 语句，类似于 shell 中的 -c 选项。由于 Python 语句通常会包含空格或其他特殊 shell 字符，一般建议将 命令 用单引号包裹起来。&lt;br&gt;有一些 Python 模块也可以当作脚本使用。你可以使用 python -m module [arg] … 命令调用它们，这类似在命令行中键入完整的路径名执行 模块 源文件一样&lt;/p&gt;
&lt;h4 id=&quot;参数传递&quot;&gt;&lt;a href=&quot;#参数传递&quot; class=&quot;headerlink&quot; title=&quot;参数传递&quot;&gt;&lt;/a&gt;参数传递&lt;/h4&gt;&lt;p&gt;调用解释器时，脚本名和附加参数传入一个名为 sys.argv 的字符串列表，通过执行 import sys来够获取这个列表，列表的长度大于等于1，即列表至少有一个元素为sys.argv[0] ，此时为空字符串。&lt;br&gt;脚本名指定为 ‘-‘ （表示标准输入）时， sys.argv[0] 被设定为 ‘-‘，使用 -c 指令 时，sys.argv[0] 被设定为 ‘-c’。使用 -m 模块 参数时，sys.argv[0] 被设定为指定模块的全名。-c 指令 或者 -m 模块 之后的参数不会被 Python 解释器的选项处理机制所截获，而是留在 sys.argv 中，供脚本命令操作&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://Crepuscule.com/categories/Python/"/>
    
      <category term="Documents" scheme="http://Crepuscule.com/categories/Python/Documents/"/>
    
    
      <category term="Python" scheme="http://Crepuscule.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Cpp Random number</title>
    <link href="http://Crepuscule.com/C-C/C-C-Project/SubSet-Project/C_Cpp/C_Cpp%20Project/Random-number/"/>
    <id>http://Crepuscule.com/C-C/C-C-Project/SubSet-Project/C_Cpp/C_Cpp Project/Random-number/</id>
    <published>2017-02-21T03:01:49.000Z</published>
    <updated>2017-04-04T11:12:39.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cpp-Random-number"><a href="#Cpp-Random-number" class="headerlink" title="Cpp Random number"></a>Cpp Random number</h2><h3 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h3><p>使用前先加入头文件stdlib.h(c++中为cstdlib)。<br>函数原型：int rand(void)；<br>在标准的C库中函数rand()可以生成0~RAND_MAX之间的一个随机数，其中RAND_MAX 是stdlib.h 中定义的一个整数，它与系统有关。<br>因为rand()函数是按指定的顺序来产生整数，因此在同一个文件中每次调用该函数都打印相同的随机值，所以说C语言的随机并不是真正意义上的随机，有时候也叫伪随机数。<br>为了使程序在每次执行时都能生成一个新序列的随机值，使用函数 srand()(同样只需要加入stdlib.h头文件)可以为随机数生成器提供种子。只要种子不同rand()函数就会产生不同的随机数序列。srand()称为随机数生成器的初始化器。<br>使用方法：<br><a id="more"></a></p>
<ol>
<li><p>如果随机数不需要范围，则直接调用rand()即可</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;rand()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果随机数需要一个范围，可以通过求余的方法来限制范围<br>例如：随机生成10个0~100(不包含100)的数：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</div><div class="line">         <span class="built_in">cout</span>&lt;&lt;rand()%<span class="number">100</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">也可以使用宏定义来简化：</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) (rand()%x)</span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;random(<span class="number">100</span>)&lt;&lt;<span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="srand"><a href="#srand" class="headerlink" title="srand()"></a>srand()</h3><p>先加入头文件stdlib.h(cstdlib)，函数原型：void srand(unsigned seed)；<br>该函数一般均与rand()函数配合使用。<br>参数seed是rand()的种子，用来初始化rand()的起始值。<br>如果srand()在被调用前已被指定了seed值，则它仍然会调用srand(seed)来初始化它的起始值，若之前没有调用过srand(seed)，它会调用srand(1)一次。<br>所以：</p>
<ol>
<li>如果希望rand（）在每次程序运行时产生的值都不一样，必须给srand(seed)中的seed一个变值，这个变值必须在每次程序运行时都不一样（比如到目前为止流逝的时间）。</li>
<li>如果给seed指定的是一个定值，那么每次程序运行时rand（）产生的值都会一样，虽然这个值会是[seed, RAND_MAX（0x7fff）)之间的一个随机取得的值。</li>
<li>如果在调用rand()之前没有调用过srand(seed)，效果将和调用了srand(1)再调用rand()一样（1也是一个定值）。<br>所以如果想要每次运行时均产生范围内不一样的随机数，方法如下：<br>这里生成0-0.99之间的小数，将（float)(rand()%100)/100改为（float)(rand()%100)/1000则为0-0.099之间的小数。<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">float</span> ran_num;</div><div class="line">  srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));       </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;  </div><div class="line">    ran_num=（<span class="keyword">float</span>)(rand()%<span class="number">100</span>)/<span class="number">100</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ran_num&lt;&lt;<span class="string">" "</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>第六行指定seed为当前系统流逝了的时间（单位为秒）：time_t time(0)，关于time()函数，参见</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cpp-Random-number&quot;&gt;&lt;a href=&quot;#Cpp-Random-number&quot; class=&quot;headerlink&quot; title=&quot;Cpp Random number&quot;&gt;&lt;/a&gt;Cpp Random number&lt;/h2&gt;&lt;h3 id=&quot;rand&quot;&gt;&lt;a href=&quot;#rand&quot; class=&quot;headerlink&quot; title=&quot;rand()&quot;&gt;&lt;/a&gt;rand()&lt;/h3&gt;&lt;p&gt;使用前先加入头文件stdlib.h(c++中为cstdlib)。&lt;br&gt;函数原型：int rand(void)；&lt;br&gt;在标准的C库中函数rand()可以生成0~RAND_MAX之间的一个随机数，其中RAND_MAX 是stdlib.h 中定义的一个整数，它与系统有关。&lt;br&gt;因为rand()函数是按指定的顺序来产生整数，因此在同一个文件中每次调用该函数都打印相同的随机值，所以说C语言的随机并不是真正意义上的随机，有时候也叫伪随机数。&lt;br&gt;为了使程序在每次执行时都能生成一个新序列的随机值，使用函数 srand()(同样只需要加入stdlib.h头文件)可以为随机数生成器提供种子。只要种子不同rand()函数就会产生不同的随机数序列。srand()称为随机数生成器的初始化器。&lt;br&gt;使用方法：&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://Crepuscule.com/categories/C-C/"/>
    
      <category term="C/C++ Project" scheme="http://Crepuscule.com/categories/C-C/C-C-Project/"/>
    
      <category term="SubSet Project" scheme="http://Crepuscule.com/categories/C-C/C-C-Project/SubSet-Project/"/>
    
    
      <category term="C/C++" scheme="http://Crepuscule.com/tags/C-C/"/>
    
      <category term="Project" scheme="http://Crepuscule.com/tags/Project/"/>
    
  </entry>
  
  <entry>
    <title>HeapSort</title>
    <link href="http://Crepuscule.com/Data-Structure-Algorithm/Common-Basic-Algorithm/DSandAl/Heapsort/"/>
    <id>http://Crepuscule.com/Data-Structure-Algorithm/Common-Basic-Algorithm/DSandAl/Heapsort/</id>
    <published>2017-02-20T11:13:24.000Z</published>
    <updated>2017-02-20T12:32:54.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="调整二叉树为大-小根堆"><a href="#调整二叉树为大-小根堆" class="headerlink" title="调整二叉树为大/小根堆"></a>调整二叉树为大/小根堆</h3><p>这里以大根堆为例：<br>在调整中，总是将根节点（被调整节点）与左右孩子节点进行比较，如果不满足堆的条件，则将根节点与左右孩子的较大者进行交换。<br>即：</p>
<ul>
<li>设置i，j分别指向当前要筛选的节点和要筛选的节点的左孩子</li>
<li>如果指向要筛选的节点的i是叶子节点，则结束，否则继续下列操作：<ul>
<li>使j指向节点i孩子节点中的较大者</li>
<li>如果r[i]&gt;r[j]，算法结束</li>
<li>如果r[i]&lt;r[j]，则r[i]和r[j]交换，令i=j，继续下一层。<br>对应代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sift</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">  i=k;j=<span class="number">2</span>*i;</div><div class="line">  <span class="keyword">while</span>(j&lt;=m)&#123;</div><div class="line">    <span class="keyword">if</span>(j&lt;m&amp;&amp;r[i]&lt;r[j+<span class="number">1</span>])j++;    <span class="comment">//如果左孩子小于右孩子，j指向较大者</span></div><div class="line">    <span class="keyword">if</span>(r[i]&gt;r[j])<span class="keyword">break</span>;         <span class="comment">//如果孩子最大者</span></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      swap(r[i],r[j]);</div><div class="line">      i=j;j=<span class="number">2</span>*i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="堆排序主方法"><a href="#堆排序主方法" class="headerlink" title="堆排序主方法"></a>堆排序主方法</h3><p>首先将带排序的记录序列构造成一个堆，此时将堆中最大值即堆顶记录移走，并将剩余的记录再整理为堆，这样次大的记录也被找到了，这样直到堆中只有一个记录<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> n)</span></span>&#123;       <span class="comment">//这里0号单元不用</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)           <span class="comment">//初始建堆，从最后一个分支节点到根节点，因为共n个节点，则n/2为最后一个非叶子节点，从这里开始</span></div><div class="line">    sift(r,i,n);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;             <span class="comment">//移走堆顶，及重建堆</span></div><div class="line">    swap(r[<span class="number">1</span>],r[n-i+<span class="number">1</span>]);</div><div class="line">    sift(r,<span class="number">1</span>,n-i);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;堆排序&quot;&gt;&lt;a href=&quot;#堆排序&quot; class=&quot;headerlink&quot; title=&quot;堆排序&quot;&gt;&lt;/a&gt;堆排序&lt;/h2&gt;&lt;h3 id=&quot;调整二叉树为大-小根堆&quot;&gt;&lt;a href=&quot;#调整二叉树为大-小根堆&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="Data Structure &amp; Algorithm" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/"/>
    
      <category term="Common Basic Algorithm" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/Common-Basic-Algorithm/"/>
    
    
      <category term="Data Structure" scheme="http://Crepuscule.com/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="http://Crepuscule.com/tags/Algorithm/"/>
    
      <category term="HeapSort" scheme="http://Crepuscule.com/tags/HeapSort/"/>
    
  </entry>
  
  <entry>
    <title>Basic CMD Command</title>
    <link href="http://Crepuscule.com/Tools/CMD-Script/Tools/Basic-CMD-Command/"/>
    <id>http://Crepuscule.com/Tools/CMD-Script/Tools/Basic-CMD-Command/</id>
    <published>2017-02-18T08:24:58.000Z</published>
    <updated>2017-04-04T10:56:23.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-CMD-Commands-of-CMD-Script"><a href="#Basic-CMD-Commands-of-CMD-Script" class="headerlink" title="Basic CMD Commands of CMD Script"></a>Basic CMD Commands of CMD Script</h2><ol>
<li><p>@<br>前面加\@的一行命令，在执行时其执行过程不会显示在终端上,例如：<br>文件 echo.cmd内容如下：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> a</div><div class="line">@<span class="built_in">pause</span></div><div class="line">@<span class="built_in">echo</span> a</div><div class="line">@<span class="built_in">pause</span></div></pre></td></tr></table></figure>
<p>执行时显示如下：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">username</span>\<span class="title">Desktop</span>&gt;<span class="title">echo</span> <span class="title">a</span>    </span></div><div class="line"><span class="title">a</span></div><div class="line">请按任意键继续. . .</div><div class="line"><span class="title">a</span></div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure>
<blockquote>
<p>使用@echo off关闭本文件中所有echo的回显功能，直到出现@ echo on开启回显功能</p>
</blockquote>
</li>
</ol>
<a id="more"></a>
<ol>
<li>% ,%%</li>
</ol>
<ul>
<li><p>当百分号成对出现，并且其间包含非特殊字符时，一般做变量引用处理，比如：<code>%var%,%str%</code></p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> str = "abc"</div><div class="line"><span class="built_in">echo</span> 变量 str 的值是： <span class="variable">%str%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"></div><div class="line">变量 str 的值是： "abc"</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure>
</li>
<li><p>百分号作为变量引用还有一种特殊形式，那就是对形式参数的引用，此时，单个百分号后面紧跟0～9这10个数字，如%0、%1，其中，%0为脚本本身的名称，%1至%9为第二至九个参数…最多支持％0～％9，％10以后就是变量引用了，即％15为％1的值接上5。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> "%~<span class="number">0</span>"</div><div class="line"><span class="built_in">pause</span></div><div class="line"></div><div class="line">"C:\Users\username\Desktop\<span class="keyword">call</span>.<span class="built_in">cmd</span>"</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure>
</li>
<li><p>出现在 set /a 语句中时，表示两数相除取余数，也就是所谓的模运算，它在命令行窗口和批处理文件中的写法略有差异：在命令行窗口中，只需要单个的%，在批处理文件中，需要连续两个百分号，写成%%，其实也是一种转义字符的用法</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">set</span> /a a=<span class="number">10</span><span class="variable">%%5</span>+<span class="number">1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">%a%</span></div><div class="line"><span class="built_in">pause</span></div><div class="line"></div><div class="line"><span class="number">1</span></div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure>
</li>
<li><p>转义符号：如果要显示%本身时，需要在前面用%来转义</p>
</li>
</ul>
<ol>
<li>:,::</li>
</ol>
<ul>
<li>以:打头的单个的:表示该行是一个标签，它之后的内容是一个标签段，如:test，则表示:test之下的内容是标签段，而test是这个标签段的名，可以用 goto test ,goto :test 跳转到该标签段或用 call :test 调用该子过,而连续两个冒号打头表示该行内容为注释内容，实际上，:: 是个无效的标签名，:加上空格同样可以起到注释的作用，此时，::的功能和注释命令rem相同；但是，rem 注释语句中的某些命令符号如重定向符号和管道符号还是会执行，而如果用::来注释的时候，与::同处一行的所有命令或符号直接被忽略掉.</li>
<li>在 set 语句中：和~同时使用时，: 起到截取字符串的功能。假设 set str=abcde，那么，set var=%str:~0,1% 表示截取字符串abcde的第一个字符；和=同时使用时，起到替换字符串的功能。假设：set str=abc:de，那么，set var=%str:a=1% 则表示把字符串abc:de中的a替换为1，set var=%str::=2% 则表示把字符串abc:de中的:替换为2；</li>
</ul>
<ol>
<li>~</li>
</ol>
<ul>
<li>用在 set 语句中，和:同时使用时，起到截取字符串的功能</li>
<li>用在 set /a 语句中时，它是一元运算符号，表示将操作数字按位取反，例如，set /a num=~1的执行结果是-2，set /a num=~0的结果是-1</li>
<li>用在for语句中，表示增强for的功能，能够提取到更多的信息。例如：在批处理文件的for语句中：%%~i表示去掉第一对外侧引号，%%~zi表示获取文件的大小(以字节为单位)，%%~ni表示获取文件名，%%~xi表示获取扩展名(带点号)……它们可以组合使用，如%%~nxi表示获取文件名和后缀名</li>
</ul>
<ol>
<li><p>> ,&gt;&gt;<br>一般而言，&gt;表示用新内容覆盖原文件内容，&gt;&gt;表示向原文件追加内容，此时，它们以重定向符号的身份出现；如果用在 set /a 语句中，则&gt;表示分组，&gt;&gt;表示逻辑移位</p>
</li>
<li><p>|<br>它以管道符号的身份出现，表示把在它之前的命令或语句的执行结果作为在它之后的命令或语句的处理对象，简而言之，就是把它之前的输出作为它之后的输入，例如：echo abcd|findstr “b”，表示把echo abcd的执行结果，作为findstr “b” 的执行对象，也就是在字符串abcd中查找b字符；如果test.txt中有abcd字符串，则该语句与 findstr “b” test.txt 具有同样的效果</p>
</li>
<li><p>^<br>一般而言，^以转义字符的身份出现。因为在 cmd环境中，有些字符具备特殊功能，如&gt;、&gt;&gt;表示重定向，|表示管道，&amp;、&amp;&amp;、||表示语句连接……它们都有特定的功能，如果需要把它们作为字符输出的话，echo &gt;、echo | ……之类的写法就会出错——cmd解释器会把它们作为具有特殊功能的字符对待，而不会作为普通字符处理，这个时候，就需要对这些特殊字符做转义处理：在每个特殊字符前加上转义字符^，因此，要输出这些特殊字符，就需要用 echo ^&gt;、echo ^|、echo ^|^|、echo ^^……之类的格式来处理</p>
</li>
<li><p>&amp;<br>一般而言，&amp;表示两条命令或语句同时执行的意思。如 echo a&amp;echo b，将在屏幕上同时显示a和b字符。当几条语句含义近似或作用相同且没有先后的顺序之别时，启用&amp;符号连接这些语句将会增加程序的可读性</p>
</li>
<li><p>&amp;&amp;,||<br>&amp;&amp;表示如果它之前的语句成功执行，将执行它之后的语句，而||则表示如果它之前的语句执行失败，将执行它之后的语句,在某些场合，它们能替代 if……else…… 语句</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">md</span> test&amp;&amp;<span class="built_in">echo</span> 成功创建文件夹test||<span class="built_in">echo</span> 创建文件夹test失败</div><div class="line"><span class="built_in">pause</span></div><div class="line">效果等同于如下代码：</div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">md</span> test</div><div class="line"><span class="keyword">if</span> "<span class="variable">%errorlevel%</span>"=="<span class="number">0</span>" (<span class="built_in">echo</span> 成功创建文件夹test)</div><div class="line"><span class="keyword">else</span> <span class="built_in">echo</span> 创建文件夹test失败</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>10、()</p>
<ul>
<li><p>小括号对经常出现在for语句和if语句中，还有一些特定场合；在for和if语句中属于语句格式的要求，例如：<br>for %%i in (语句1) do (语句2)：在这条语句中，语句1必须用括号对包围，而语句2的括号对则可视情况予以抛弃或保留：如果语句2是单条语句或用&amp;、&amp; &amp;、||等连接符号连接的多条语句，括号对可以抛弃，如果语句2是有逻辑先后关系的多条语句集合，则必须保留括号对，并且，多条语句必须断行书写；例如：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    @<span class="built_in">echo</span> off</div><div class="line">    <span class="keyword">for</span> <span class="variable">%%i</span> <span class="keyword">in</span> (a b c) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span>&amp;<span class="built_in">echo</span> --------</div><div class="line">    <span class="built_in">pause</span></div><div class="line">也可以改写为：</div><div class="line">    @<span class="built_in">echo</span> off</div><div class="line">    <span class="keyword">for</span> <span class="variable">%%i</span> <span class="keyword">in</span> (a b c) <span class="keyword">do</span> (</div><div class="line">        <span class="built_in">echo</span> <span class="variable">%%i</span></div><div class="line">        &amp;<span class="built_in">echo</span> --------</div><div class="line">    )</div><div class="line">    <span class="built_in">pause</span></div></pre></td></tr></table></figure>
</li>
<li><p>if 条件 (语句1) else (语句2)：如果没有else部分，则语句1的括号对可有可无；如果有else部分，则语句1中的括号对必须保留，此时，语句2中的括号对保留与否，和上一点类似。例如：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> <span class="keyword">exist</span> test.txt <span class="built_in">echo</span> 当前目录下有test.txt</div><div class="line"><span class="built_in">pause</span></div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> <span class="keyword">exist</span> test.txt (<span class="built_in">echo</span> 当前目录下有test.txt) <span class="keyword">else</span> <span class="built_in">echo</span> 当前目录下没有test.txt</div><div class="line"><span class="built_in">pause</span></div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> <span class="keyword">exist</span> test.txt (<span class="built_in">echo</span> 当前目录下有test.txt) <span class="keyword">else</span> (</div><div class="line">    <span class="built_in">echo</span> 当前目录下没有test.txt</div><div class="line">    <span class="built_in">pause</span></div><div class="line">    <span class="built_in">cls</span></div><div class="line">    <span class="built_in">echo</span> 即将创建test.txt文件</div><div class="line">    <span class="built_in">cd</span>.&gt;test.txt&amp;&amp;<span class="built_in">echo</span> 成功创建test.txt</div><div class="line">)</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>③ 特定场合下使用括号对，不但可以使代码逻辑清晰，增强可读性，还可能会减少代码量。比如用echo语句构造多行文本内容的时候：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">(</div><div class="line"><span class="built_in">echo</span> 第一行</div><div class="line"><span class="built_in">echo</span> 第二行</div><div class="line"><span class="built_in">echo</span> 第三行</div><div class="line">)&gt;test.txt</div><div class="line"><span class="built_in">start</span> test.txt</div><div class="line">如果不使用括号对的话，则需要使用如下代码：</div><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> 第一行&gt;test.txt</div><div class="line"><span class="built_in">echo</span> 第二行&gt;&gt;test.txt</div><div class="line"><span class="built_in">echo</span> 第三行&gt;&gt;test.txt</div><div class="line"><span class="built_in">start</span> test.txt</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-CMD-Commands-of-CMD-Script&quot;&gt;&lt;a href=&quot;#Basic-CMD-Commands-of-CMD-Script&quot; class=&quot;headerlink&quot; title=&quot;Basic CMD Commands of CMD Script&quot;&gt;&lt;/a&gt;Basic CMD Commands of CMD Script&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;@&lt;br&gt;前面加\@的一行命令，在执行时其执行过程不会显示在终端上,例如：&lt;br&gt;文件 echo.cmd内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;pause&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;pause&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行时显示如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;C:\&lt;span class=&quot;title&quot;&gt;Users&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;username&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Desktop&lt;/span&gt;&amp;gt;&lt;span class=&quot;title&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;请按任意键继续. . .&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;请按任意键继续. . .&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;使用@echo off关闭本文件中所有echo的回显功能，直到出现@ echo on开启回显功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://Crepuscule.com/categories/Tools/"/>
    
      <category term="CMD Script" scheme="http://Crepuscule.com/categories/Tools/CMD-Script/"/>
    
    
      <category term="CMD" scheme="http://Crepuscule.com/tags/CMD/"/>
    
  </entry>
  
</feed>
