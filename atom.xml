<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crepuscule</title>
  <subtitle>Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Crepuscule.com/"/>
  <updated>2017-07-06T08:49:55.636Z</updated>
  <id>http://Crepuscule.com/</id>
  
  <author>
    <name>crepuscule_scintillant</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Servlet-Basic</title>
    <link href="http://Crepuscule.com/Web/JAVA/Servlet/WEB/JAVA/Servlet-Basic/"/>
    <id>http://Crepuscule.com/Web/JAVA/Servlet/WEB/JAVA/Servlet-Basic/</id>
    <published>2017-07-06T08:27:54.000Z</published>
    <updated>2017-07-06T08:49:55.636Z</updated>
    
    <content type="html"><![CDATA[<p>##</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;/p&gt;

    
    </summary>
    
      <category term="Web" scheme="http://Crepuscule.com/categories/Web/"/>
    
      <category term="JAVA" scheme="http://Crepuscule.com/categories/Web/JAVA/"/>
    
      <category term="Servlet" scheme="http://Crepuscule.com/categories/Web/JAVA/Servlet/"/>
    
    
      <category term="JAVA" scheme="http://Crepuscule.com/tags/JAVA/"/>
    
      <category term="Servlet" scheme="http://Crepuscule.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JSP Basic</title>
    <link href="http://Crepuscule.com/Web/JAVA/JSP/WEB/JAVA/JSP-Basic/"/>
    <id>http://Crepuscule.com/Web/JAVA/JSP/WEB/JAVA/JSP-Basic/</id>
    <published>2017-07-06T08:10:54.000Z</published>
    <updated>2017-07-06T08:49:56.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介和基本语法"><a href="#简介和基本语法" class="headerlink" title="简介和基本语法"></a>简介和基本语法</h2><p>JSP全称为Java Server Pages,是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。 JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。<br>基本使用如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个 JSP 程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">%</span></span></div><div class="line">                  <span class="attr">out.println</span>("<span class="attr">Hello</span> <span class="attr">World</span>！");</div><div class="line">           %&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介和基本语法&quot;&gt;&lt;a href=&quot;#简介和基本语法&quot; class=&quot;headerlink&quot; title=&quot;简介和基本语法&quot;&gt;&lt;/a&gt;简介和基本语法&lt;/h2&gt;&lt;p&gt;JSP全称为Java Server Pages,是一种动态网页开发技术。它使用JSP标签在HTML网
    
    </summary>
    
      <category term="Web" scheme="http://Crepuscule.com/categories/Web/"/>
    
      <category term="JAVA" scheme="http://Crepuscule.com/categories/Web/JAVA/"/>
    
      <category term="JSP" scheme="http://Crepuscule.com/categories/Web/JAVA/JSP/"/>
    
    
      <category term="JAVA" scheme="http://Crepuscule.com/tags/JAVA/"/>
    
      <category term="JSP" scheme="http://Crepuscule.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JAVA WEB Project analysis</title>
    <link href="http://Crepuscule.com/Web/JAVA/Project/WEB/JAVA/JAVA-WEB-Project-analysis/"/>
    <id>http://Crepuscule.com/Web/JAVA/Project/WEB/JAVA/JAVA-WEB-Project-analysis/</id>
    <published>2017-07-06T06:51:54.000Z</published>
    <updated>2017-07-06T08:09:33.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA-WEB-实现数据库访问"><a href="#JAVA-WEB-实现数据库访问" class="headerlink" title="JAVA WEB 实现数据库访问"></a>JAVA WEB 实现数据库访问</h2><p>第一个完整的实现数据库访问的java web 应用，实现查找指定ID的用户信息。</p>
<h3 id="eclipse-JSP-Servlet-JDBC-Mysql模式"><a href="#eclipse-JSP-Servlet-JDBC-Mysql模式" class="headerlink" title="eclipse + JSP + Servlet + JDBC + Mysql模式"></a>eclipse + JSP + Servlet + JDBC + Mysql模式</h3><p>使用JSP作为视图（view），servlet作为控制器，JDBC作为数据库驱动，使用Mysql作为数据库。<br>在eclipse for java EE developers中创建项目，主要层次结构为:</p>
<p>BeforeNetClub<br>  |—Java Resources<br>  |      |—src  //存放主要的逻辑代码，涉及到模型和控制器<br>  |—WebContent<br>  |   |— META-INF<br>  |   |     |—web.xml //用于书写web应用的xml<br>  |   |— WEB-INF<br>  |   |     |—lib //用于引入驱动等jar包<br>  |   |—index.jsp //入口jsp文件</p>
<h3 id="创建模型User"><a href="#创建模型User" class="headerlink" title="创建模型User"></a>创建模型User</h3><p>该类将用于存储从数据库中取出的表数据<br>User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.twilight.entity;</div><div class="line"><span class="comment">//模型类,实体类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String phone;</div><div class="line">	<span class="keyword">private</span> String school;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> phone;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.phone = phone;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> school;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.school = school;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建数据库连接函数"><a href="#创建数据库连接函数" class="headerlink" title="创建数据库连接函数"></a>创建数据库连接函数</h3><p>一般数据库连接函数只用于返回连接和关闭连接<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.twilight.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException,ClassNotFoundException</span>&#123;</div><div class="line">    <span class="comment">//定义一个静态方法用于获取数据库连接，和connect域DriverManger差不多</span></div><div class="line">		Connection conn = <span class="keyword">null</span>;</div><div class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">		String URL=<span class="string">"jdbc:mysql://localhost:3306/BNC"</span>;</div><div class="line">		String username=<span class="string">"root"</span>;</div><div class="line">		String password=<span class="string">"12345678"</span>;		</div><div class="line">		conn=DriverManager.getConnection(URL,username,password);</div><div class="line">		<span class="keyword">return</span> conn;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stat , Connection conn)</span><span class="keyword">throws</span> SQLException</span>&#123; <span class="comment">//关闭功能，也是静态方法</span></div><div class="line">		<span class="keyword">if</span>(stat!=<span class="keyword">null</span>)stat.close();</div><div class="line">		<span class="keyword">if</span>(conn!=<span class="keyword">null</span>)conn.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建模型应用UserDao"><a href="#创建模型应用UserDao" class="headerlink" title="创建模型应用UserDao"></a>创建模型应用UserDao</h3><p>UserDao.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.twilight.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.twilight.entity.User;</div><div class="line"><span class="keyword">import</span> com.twilight.util.SqlHelper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;User&gt; <span class="title">search</span><span class="params">(String id)</span><span class="keyword">throws</span> ClassNotFoundException,SQLException</span>&#123;  <span class="comment">//定义搜索函数，是数据库应用函数		</span></div><div class="line">		Connection conn=SqlHelper.connect(); <span class="comment">//获取从sqlHelper中创建的连接</span></div><div class="line">		Statement stat =<span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		stat=conn.createStatement();</div><div class="line">		ArrayList &lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();<span class="comment">//用于存储User模型</span></div><div class="line">		String sql=<span class="string">"select * from users where id="</span>+id+<span class="string">";"</span>;</div><div class="line">		rs=stat.executeQuery(sql); <span class="comment">//执行</span></div><div class="line">		<span class="keyword">while</span>(rs.next())&#123;</div><div class="line">			User u=<span class="keyword">new</span> User();</div><div class="line">			u.setId(rs.getString(<span class="string">"id"</span>));</div><div class="line">			u.setName(rs.getString(<span class="string">"name"</span>));</div><div class="line">			u.setPhone(rs.getString(<span class="string">"phone"</span>));</div><div class="line">			u.setSchool(rs.getString(<span class="string">"school"</span>));</div><div class="line">			users.add(u); <span class="comment">//将数据库中的满足条件数据全部取出存入List</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123; <span class="comment">//关闭结果集</span></div><div class="line">			rs.close();</div><div class="line">		&#125;</div><div class="line">		SqlHelper.close(stat, conn); <span class="comment">//完成数据拷贝就关闭连接		</span></div><div class="line">		<span class="keyword">return</span> users;	<span class="comment">//将泛型user数组返回，这里是取出了指定id所对应的users对象</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建jsp视图文件"><a href="#创建jsp视图文件" class="headerlink" title="创建jsp视图文件"></a>创建jsp视图文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" import="java.util.*" contentType="text/html; charset=ISO-8859-1"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;%	String path=request.getContextPath();</div><div class="line">	String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";</div><div class="line">%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;base href="&lt;%=basePath%&gt;"&gt;</div><div class="line">	&lt;title&gt;JSP strting page&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div&gt;</div><div class="line">		&lt;form action="ActionServlet" method="post"&gt;</div><div class="line">			ID:&lt;input type="text" id="id" name="id" size="18"&gt;</div><div class="line">			&lt;input type="submit" value="提交"/&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA-WEB-实现数据库访问&quot;&gt;&lt;a href=&quot;#JAVA-WEB-实现数据库访问&quot; class=&quot;headerlink&quot; title=&quot;JAVA WEB 实现数据库访问&quot;&gt;&lt;/a&gt;JAVA WEB 实现数据库访问&lt;/h2&gt;&lt;p&gt;第一个完整的实现数据库访问的
    
    </summary>
    
      <category term="Web" scheme="http://Crepuscule.com/categories/Web/"/>
    
      <category term="JAVA" scheme="http://Crepuscule.com/categories/Web/JAVA/"/>
    
      <category term="Project" scheme="http://Crepuscule.com/categories/Web/JAVA/Project/"/>
    
    
      <category term="JAVA" scheme="http://Crepuscule.com/tags/JAVA/"/>
    
      <category term="Web" scheme="http://Crepuscule.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://Crepuscule.com/uncategorized/JAVA/JAVA-Generics/"/>
    <id>http://Crepuscule.com/uncategorized/JAVA/JAVA-Generics/</id>
    <published>2017-05-26T06:58:04.649Z</published>
    <updated>2017-05-26T06:58:04.649Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第10章 基本数据结构</title>
    <link href="http://Crepuscule.com/Data-Structure-Algorithm/Introduction-to-Algorithms/DSandAl/Introduction%20to%20Algorithms/%E7%AC%AC10%E7%AB%A0%20%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://Crepuscule.com/Data-Structure-Algorithm/Introduction-to-Algorithms/DSandAl/Introduction to Algorithms/第10章 基本数据结构/</id>
    <published>2017-05-11T12:21:42.000Z</published>
    <updated>2017-05-11T13:34:02.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第10章-基本数据结构"><a href="#第10章-基本数据结构" class="headerlink" title="第10章 基本数据结构"></a>第10章 基本数据结构</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ol>
<li>偏序关系，全序关系，偏序集，全序集</li>
</ol>
<ul>
<li>自反性定义：<br>集合X，以及其上的二元关系R，若满足：对任意a 。则称二元关系R是自反的，或称R具有自反性，或称R为自反关系。</li>
<li>自反关系举例： 等于，是……的子集（集合的包含），小于等于、大于等于（不等），整除</li>
<li>全序关系<br>例子：<br>自然数的集合配备了它的自然次序（小于等于关系）。这个偏序是全序。<br>整数的集合配备了它的自然次序。这个偏序是全序。<br>自然数的集合的有限子集{1, 2, …, n}。这个偏序是全序。<br>自然数的集合配备了整除关系。<br>给定集合的子集的集合（它的幂集）按包含排序。<br>向量空间的子空间的集合按包含来排序。</li>
</ul>
<h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><p>算法实现(C++)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> StackSize=<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">/*基于数组的栈</span></div><div class="line">使用字符数组做存储结构</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">class</span> SeqStack&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SeqStack()&#123;top=<span class="number">-1</span>;&#125;		<span class="comment">//使用-1作为栈空标志</span></div><div class="line">    ~SeqStack()&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> * x)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">pop</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">gettop</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isempty</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">char</span>* data[StackSize];</div><div class="line">    <span class="keyword">int</span> top;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> SeqStack::push(<span class="keyword">char</span>* x)&#123;</div><div class="line">    <span class="keyword">if</span>(top==StackSize<span class="number">-1</span>)<span class="keyword">throw</span> <span class="string">"location error!"</span>;</div><div class="line">    <span class="built_in">strcpy</span>(data[++top],x);      <span class="comment">//use the -1 mode ,should first add the top</span></div><div class="line">   data[++top]=x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">char</span> * SeqStack::pop()&#123;</div><div class="line">    <span class="keyword">if</span>(top==<span class="number">-1</span>)<span class="keyword">throw</span> <span class="string">"location error!"</span>;</div><div class="line">    <span class="keyword">char</span> *x=data[top--];      <span class="comment">//use the -1 mode ,last --</span></div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> * SeqStack::gettop()&#123;</div><div class="line">    <span class="keyword">if</span>(top!=<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> data[top];</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">throw</span> <span class="string">"location error!"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> SeqStack::empty()&#123;</div><div class="line">    <span class="keyword">if</span>(top==<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> SeqStack::showfortest()&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=top;i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"|"</span>&lt;&lt;data[i]&lt;&lt;<span class="string">"|"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>算法实现(ruby)<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></div><div class="line">	<span class="function"><span class="keyword">def</span>  <span class="title">initialize</span></span></div><div class="line">		@store = []</div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">push</span> <span class="params">(x)</span></span></div><div class="line">		@store.push x</div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">pop</span></span></div><div class="line">		@store.pop</div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">peek</span></span></div><div class="line">		@store.last</div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">empty?</span></span></div><div class="line">		@store.empty?</div><div class="line">	<span class="keyword">end</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">show</span></span></div><div class="line">		@store.each <span class="keyword">do</span> <span class="params">|values|</span></div><div class="line">			puts values</div><div class="line">		<span class="keyword">end</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">stack= Stack.new</div><div class="line">stack.push(<span class="string">'1'</span>)</div><div class="line">stack.push(<span class="string">'2'</span>)</div><div class="line">stack.push(<span class="string">'3'</span>)</div><div class="line">stack.pop</div><div class="line">stack.show</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第10章-基本数据结构&quot;&gt;&lt;a href=&quot;#第10章-基本数据结构&quot; class=&quot;headerlink&quot; title=&quot;第10章 基本数据结构&quot;&gt;&lt;/a&gt;第10章 基本数据结构&lt;/h1&gt;&lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;
    
    </summary>
    
      <category term="Data Structure &amp; Algorithm" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/"/>
    
      <category term="Introduction to Algorithms" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/Introduction-to-Algorithms/"/>
    
    
      <category term="Introduction to Algorithms" scheme="http://Crepuscule.com/tags/Introduction-to-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://Crepuscule.com/uncategorized/WEB/PHP/phpMQTT-logs/"/>
    <id>http://Crepuscule.com/uncategorized/WEB/PHP/phpMQTT-logs/</id>
    <published>2017-05-07T04:39:01.637Z</published>
    <updated>2017-05-07T04:39:01.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><h3 id="代理服务器端-broker"><a href="#代理服务器端-broker" class="headerlink" title="代理服务器端(broker)"></a>代理服务器端(broker)</h3><p>登入远程主机后使用命令<br><code>mosquitto -v</code><br>启动代理服务器监控日志模式，可以实时查看代理服务器的动态日志。<br>该终端之后将作为监控终端使用，不要进行其他操作，在使用完成后应该手动退出防止下一次使用时提示端口被占用</p>
<blockquote>
<p>log中的报文种类：<br>CONNECT 连接请求 客户端到服务器的TCP/IP套接字连接被建立时<br>CONNECTACK 连接请求确认 服务器发给客户端，用以确认客户端的连接请求<br>PUBLISH 发布报文 订阅者们可以注册自己的需要的报文类别<br>PUBACK 发布确认报文 服务器对发布报文的客户端的报文确认，也可以是报文订阅者对发布报文的服务器的应答</p>
<h3 id="远程主机端的客户端"><a href="#远程主机端的客户端" class="headerlink" title="远程主机端的客户端"></a>远程主机端的客户端</h3><p>mosquitto在主机上也可以使用client进行订阅和发布消息，这样可以使用在远程主机上的客户端进行消息通讯<br>目前主机上客户端的信息是，client-id:6712-iZwz9hhbyo<br>订阅命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mosquitto_sub -v -h 120.25.93.215 -i 6712-iZwz9hhbyo  -t topic [--will-topic topic --will-payload --will-retain]</div></pre></td></tr></table></figure></p>
</blockquote>
<p>发布命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mosquitto_pub  -h 120.25.93.215 -i 6712-iZwz9hhbyo  -t topic -m <span class="string">"xxxxxxx"</span> [--will-topic topic --will-payload --will-retain]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>指定-i之后，相同的用户会接受不到消息，因为是本用户发布的</p>
</blockquote>
<p>localhost 试用：</p>
<ol>
<li>本地开启服务器<br>mosquitto -v</li>
<li>本地订阅监视<br>mosqiutto_sub -t topic </li>
<li>本地发布监视<br>mosquitto_pub -t topic -m “from loaclhost”</li>
</ol>
<p>1494131615: Sending CONNACK to mosqsub/11041-bogon (0, 0)<br>1494131615: New client connected from ::1 as mosqsub/9450-bogon (c1, k60).<br>1494131615: Sending CONNACK to mosqsub/9450-bogon (0, 0)<br>1494131615: Received SUBSCRIBE from mosqsub/11041-bogon<br>1494131615:     topic (QoS 0)<br>1494131615: mosqsub/11041-bogon 0 topic<br>1494131615: Sending SUBACK to mosqsub/11041-bogon<br>1494131615: Received SUBSCRIBE from mosqsub/9450-bogon<br>1494131615:     topic (QoS 0)<br>1494131615: mosqsub/9450-bogon 0 topic<br>1494131615: Sending SUBACK to mosqsub/9450-bogon</p>
<p>New connection from ::1 on port 1883.<br>1494131653: New client connected from ::1 as 10908-bogon (c1, k60).<br>1494131653: Sending CONNACK to 10908-bogon (0, 0)<br>1494131653: Sending PUBLISH to mosqsub/9450-bogon (d0, q0, r0, m0, ‘topic’, … (18 bytes))<br>1494131653: Sending PUBLISH to mosqsub/11041-bogon (d0, q0, r0, m0, ‘topic’, … (18 bytes))<br>1494131653: Received DISCONNECT from 10908-bogon<br>1494131653: Client 10908-bogon disconnected.</p>
<p>1494131748: New connection from 127.0.0.1 on port 1883.<br>1494131748: New client connected from 127.0.0.1 as 9450-bogon (c1, k10).<br>1494131748: Sending CONNACK to 9450-bogon (0, 0)<br>1494131748: Received SUBSCRIBE from 9450-bogon<br>1494131748:     topic (QoS 0)<br>1494131748: 9450-bogon 0 topic<br>1494131748: Sending SUBACK to 9450-bogon</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本使用方法&quot;&gt;&lt;a href=&quot;#基本使用方法&quot; class=&quot;headerlink&quot; title=&quot;基本使用方法&quot;&gt;&lt;/a&gt;基本使用方法&lt;/h2&gt;&lt;h3 id=&quot;代理服务器端-broker&quot;&gt;&lt;a href=&quot;#代理服务器端-broker&quot; class=&quot;he
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ruby Regex</title>
    <link href="http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Regex/"/>
    <id>http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Regex/</id>
    <published>2017-05-03T03:22:35.000Z</published>
    <updated>2017-05-03T05:51:56.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ruby的正则表达式"><a href="#Ruby的正则表达式" class="headerlink" title="Ruby的正则表达式"></a>Ruby的正则表达式</h1><p>正则表达式用事先定义好的一些特定字符、及这些特定字符的组合，组成一个”规则字符串”，这个”规则字符串”用来表达对字符串的一种过滤逻辑。<br>ruby中将正则表达式写在//中，或者跟在%r后的任意分隔符之间<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">line1 = <span class="string">"fedora is the same to centOS"</span></div><div class="line">line2 = <span class="string">"mint is a extend of ubuntu "</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(line1 =~ <span class="regexp">/fedora(.*)/</span>)</div><div class="line">  puts <span class="string">"line1 contains fedora"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">if</span>(line2 =~ <span class="regexp">/mint(.*)/</span>)</div><div class="line">  puts <span class="string">"line2 contains mint"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ruby的正则表达式&quot;&gt;&lt;a href=&quot;#Ruby的正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Ruby的正则表达式&quot;&gt;&lt;/a&gt;Ruby的正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式用事先定义好的一些特定字符、及这些特定字符的组合，组成一个”规则字
    
    </summary>
    
      <category term="Ruby" scheme="http://Crepuscule.com/categories/Ruby/"/>
    
      <category term="Ruby Basic" scheme="http://Crepuscule.com/categories/Ruby/Ruby-Basic/"/>
    
    
      <category term="Ruby" scheme="http://Crepuscule.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://Crepuscule.com/uncategorized/Linux/raspiberry/"/>
    <id>http://Crepuscule.com/uncategorized/Linux/raspiberry/</id>
    <published>2017-05-02T12:24:17.189Z</published>
    <updated>2017-05-02T13:30:02.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树莓派的基本配置"><a href="#树莓派的基本配置" class="headerlink" title="树莓派的基本配置"></a>树莓派的基本配置</h1><h2 id="首先在有屏幕的情况下"><a href="#首先在有屏幕的情况下" class="headerlink" title="首先在有屏幕的情况下"></a>首先在有屏幕的情况下</h2><h3 id="启用root"><a href="#启用root" class="headerlink" title="启用root"></a>启用root</h3><p>进入系统之后打开终端(ctrl+alt+t)，输入命令<code>sudo passwd root</code>，然后输入两次root密码即可<br>使用<code>su root</code>即可切换到root用户</p>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>终端命令<code>raspi-config</code>即可进入配置界面。需要配置的有：</p>
<ol>
<li>拓展sd卡，一般为Advance Options内的Expand Filesystem选项</li>
<li>设置locate，在Localisation Options内，需要改变locale，使用空格键将其中的en_US.UTF-8 UTF-8 ,zh_CN.UTF-8 UTF-8, zh_CN.GBK GBK前的空格中打上星号，然后使用tab键选择确定离开</li>
<li>设置时区，在Localisation Options的change timezone中，用类似的方法选择亚洲上海即可。<h3 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3>执行命令<code>apt-get update apt-get install fcitx</code>即可安装小企鹅输入法管理器，然后可以自行选择安装输入法，如google输入法<code>apt-get install fcitx-googlepinyin</code>，sun拼音输入法<code>apt-get install fcitc-sunpinyin</code><h3 id="挂载u盘或者移动硬盘"><a href="#挂载u盘或者移动硬盘" class="headerlink" title="挂载u盘或者移动硬盘"></a>挂载u盘或者移动硬盘</h3></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树莓派的基本配置&quot;&gt;&lt;a href=&quot;#树莓派的基本配置&quot; class=&quot;headerlink&quot; title=&quot;树莓派的基本配置&quot;&gt;&lt;/a&gt;树莓派的基本配置&lt;/h1&gt;&lt;h2 id=&quot;首先在有屏幕的情况下&quot;&gt;&lt;a href=&quot;#首先在有屏幕的情况下&quot; class=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://Crepuscule.com/uncategorized/Linux/Basic%20Linux%20Op/"/>
    <id>http://Crepuscule.com/uncategorized/Linux/Basic Linux Op/</id>
    <published>2017-04-25T07:38:35.905Z</published>
    <updated>2017-04-25T07:38:35.908Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>压缩命令</li>
</ol>
<ul>
<li><p>tar<br>Main operation mode:</p>
<p>-A, –catenate, –concatenate   append tar files to an archive<br>创建  -c, –create               create a new archive<br>-d, –diff, –compare      find differences between archive and file system</p>
<pre><code>--delete               delete from the archive (not on mag tapes!)
</code></pre><p>-r, –append               append files to the end of an archive<br>-t, –list                 list the contents of an archive</p>
<pre><code>--test-label           test the archive volume label and exit
</code></pre><p>-u, –update               only append files newer than copy in archive<br>-x, –extract, –get       extract files from an archive</p>
</li>
</ul>
<p>  -f, –file=ARCHIVE         use archive file or device ARCHIVE<br>      –force-local          archive file is local even if it has a colon<br>列出被压缩的文件<br>  -v, –verbose              verbosely list files processed<br>      –warning=KEYWORD      warning control</p>
<p>Examples:<br>  tar -cf archive.tar foo bar  # Create archive.tar from files foo and bar.<br>  tar -tvf archive.tar         # List all files in archive.tar verbosely.<br>  tar -xf archive.tar          # Extract all files from archive.tar.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打包但不压缩，后缀 .tar</span></div><div class="line">[crepuscule@bogon ~]$ tar -cvf /tmp/test.tar <span class="built_in">test</span> </div><div class="line"><span class="comment"># 打包并压缩（gzip)，后缀 .tar.gz</span></div><div class="line">[crepuscule@bogon ~]$ tar -zcvf /tmp/test.tar.gz <span class="built_in">test</span> </div><div class="line"><span class="comment"># 打包并压缩（bzip2)，后缀 .tar.bz2</span></div><div class="line">[crepuscule@bogon ~]$ tar -jcvf /tmp/test.tar.bz2 <span class="built_in">test</span></div></pre></td></tr></table></figure>
<ol>
<li><p>创建新用户 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[crepuscule@bogon ~]$ useradd wangruifeng</div><div class="line">[crepuscule@bogon ~]$ passwd wangruifeng</div><div class="line">[crepuscule@bogon ~]$ su crepuscule</div><div class="line">[crepuscule@bogon ~]$ userdel wangruifeng</div></pre></td></tr></table></figure>
</li>
<li><p>多条命令一行完成</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[crepuscule@bogon ~]$ mkdir /home/tt &amp;&amp; mkdir /home/tt/a &amp;&amp; mkdir /home/tt/a/b &amp;&amp; mkdir /home/tt/a/b/c &amp;&amp;  mkdir /home/tt/a/b/c/d </div><div class="line">[crepuscule@bogon ~]$ <span class="built_in">cd</span> /home/tt/a/b/c/d &amp;&amp; touch hello &amp;&amp; <span class="built_in">cd</span> /home/tt/a/b/</div></pre></td></tr></table></figure>
</li>
<li><p>查找 “passwd” 文件，查看目录</p>
</li>
</ol>
<ul>
<li><p>find 命令： find 指定目录 选项 -name 文件名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在整个文件目录查找名为passwd的文件</span></div><div class="line">[crepuscule@bogon ~]$ find / -name passwd</div><div class="line"></div><div class="line">/etc/passwd</div><div class="line">/etc/pam.d/passwd</div><div class="line">/usr/share/bash-completion/completions/passwd</div><div class="line">/usr/share/doc/passwd</div><div class="line">/usr/share/licenses/passwd</div><div class="line">/usr/bin/passwd</div><div class="line"><span class="comment"># 在$HOME目录中查找.txt文件</span></div><div class="line">[crepuscule@bogon ~]$ find ~ -name *.txt &gt; ~/findtxt.log</div><div class="line"></div><div class="line"><span class="comment"># 在当前目录查找以'my'开头的文件，并列出他们的具体信息</span></div><div class="line">[crepuscule@bogon ~]$ find . -name my* -ls &gt; findmy.log</div></pre></td></tr></table></figure>
</li>
<li><p>locate 命令：<br>find命令的子命令，查找更快。使用时需要更新数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 更新数据库</span></div><div class="line">[crepuscule@bogon ~]$ updatedb</div><div class="line"><span class="comment"># 在/etc目录下查找开头为sh的文件</span></div><div class="line">[crepuscule@bogon ~]$ locate /etc/sh*</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;压缩命令&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;tar&lt;br&gt;Main operation mode:&lt;/p&gt;
&lt;p&gt;-A, –catenate, –concatenate   append tar files to an archive&lt;br&gt;创建  
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos7-VPS-config</title>
    <link href="http://Crepuscule.com/Operation-Maintenance/Site-Deployment/Operation%20&amp;%20Maintenance/Site%20Deployment/Centos7-VPS-config/"/>
    <id>http://Crepuscule.com/Operation-Maintenance/Site-Deployment/Operation &amp; Maintenance/Site Deployment/Centos7-VPS-config/</id>
    <published>2017-04-21T07:44:08.000Z</published>
    <updated>2017-04-21T08:59:15.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos-VPS-config"><a href="#Centos-VPS-config" class="headerlink" title="Centos VPS config"></a>Centos VPS config</h1><h2 id="安装LAMP"><a href="#安装LAMP" class="headerlink" title="安装LAMP"></a>安装LAMP</h2><h3 id="使用yum安装"><a href="#使用yum安装" class="headerlink" title="使用yum安装"></a>使用yum安装</h3><ol>
<li>安装apache<br>使用命令安装<br>[root@rmote /]# yum install httpd -y<br>设置开机自启动<br>[root@rmote /]# chkconfig httpd on<br>启动服务<br>[root@rmote /]# service httpd start</li>
<li>安装mysql 或者 MariaDB<br>使用命令安装mysql<br>[root@rmote /]# yum -y install mysql mysql-server mysql-devel<br>设置开机自启动<br>[root@localhost ~]# chkconfig mysqld on<br>启动服务<br>[root@localhost ~]# service mysqld start<br>进行安全性设置<br>[root@localhost ~]# /usr/bin/mysql_secure_installation<br>…<br>Set root password? [Y/n] y<br>New password:<br>Re-enter new password:<br>Password updated successfully!<br>Reloading privilege tables..<br>… Success!</li>
</ol>
<p>Remove anonymous users? [Y/n] y<br>… Success!</p>
<p>Normally, root should only be allowed to connect from ‘localhost’.  This<br>ensures that someone cannot guess at the root password from the network.</p>
<p>Disallow root login remotely? [Y/n] y<br>… Success!</p>
<p>Remove test database and access to it? [Y/n] y</p>
<ul>
<li>Dropping test database…<br>… Success!</li>
<li>Removing privileges on test database…<br>… Success!</li>
</ul>
<p>Reload privilege tables now? [Y/n] y<br>… Success!</p>
<blockquote>
<p>注意:centos 7最好安装MariaDB替代mysql，如果mysql无法使用，可以使用MariaDB</p>
</blockquote>
<p>首先如果mysql安装后如果无法使用先卸载mysql：<br>[root@localhost ~]# yum remove mysql mysql-server mysql-libs<br>[root@localhost ~]# rm -rf /var/lib/mysql<br>[root@localhost ~]# rm /etc/my.cnf<br>[root@localhost ~]# rpm -qa|grep mysql</p>
<p>然后使用yum安装MariaDB<br>[root@localhost ~]# yum install mariadb mariadb-server<br>开机自启动<br>[root@localhost ~]# chkconfig mariadb on<br>启动<br>[root@localhost ~]# service mariadb start<br>[root@localhost ~]# /usr/bin/mysql_secure_installation</p>
<ol>
<li><p>安装php<br>[root@localhost ~]# yum -y install php php-mysql<br>或者<br>[root@localhost ~]# yum search php<br>安装模块<br>[root@localhost ~]# yum -y install gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap</p>
</li>
<li><p>测试及安装phpmyadmin<br>[root@localhost ~]# service httpd restart<br>测试是否可以访问<br>[root@localhost ~]# cd /var/www/html<br>[root@localhost ~]# echo “&lt;?php phpinfo();?&gt;” &gt; test.php<br>安装phpmyadmin<br>[root@localhost ~]# yum install phpmyadmin -y</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Centos-VPS-config&quot;&gt;&lt;a href=&quot;#Centos-VPS-config&quot; class=&quot;headerlink&quot; title=&quot;Centos VPS config&quot;&gt;&lt;/a&gt;Centos VPS config&lt;/h1&gt;&lt;h2 id=&quot;安装LAM
    
    </summary>
    
      <category term="Operation &amp; Maintenance" scheme="http://Crepuscule.com/categories/Operation-Maintenance/"/>
    
      <category term="Site Deployment" scheme="http://Crepuscule.com/categories/Operation-Maintenance/Site-Deployment/"/>
    
    
      <category term="Linux" scheme="http://Crepuscule.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ruby-Type-Search</title>
    <link href="http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Type-Search/"/>
    <id>http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Type-Search/</id>
    <published>2017-04-19T13:01:50.000Z</published>
    <updated>2017-04-20T15:02:03.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ruby中较复杂的数据类型"><a href="#Ruby中较复杂的数据类型" class="headerlink" title="Ruby中较复杂的数据类型"></a>Ruby中较复杂的数据类型</h1><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h2><h3 id="字符串内建方法"><a href="#字符串内建方法" class="headerlink" title="字符串内建方法"></a>字符串内建方法</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mystr = String.new(<span class="string">"THIS IS UPPERCASE"</span>)</div><div class="line">foo = mystr.downcase  <span class="comment"># downcase是转化为小写方法</span></div><div class="line"></div><div class="line">puts foo</div><div class="line"></div><div class="line">str % arg <span class="comment"># 使用格式化规范字符串，如果 arg 包含一个以上的替代，那么 arg 必须是一个数组</span></div><div class="line">str * integer <span class="comment">#重复str integer次</span></div><div class="line">str + string2 <span class="comment">#将两个字符串连接起来</span></div><div class="line">str &lt;&lt; object <span class="comment">#将str和另一个对象连接起来</span></div><div class="line">str &lt;=&gt; string2 <span class="comment">#小于 返回-1，等于返回0，大于返回1</span></div><div class="line">str == object <span class="comment">#检查str和obj的相等性</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ruby中较复杂的数据类型&quot;&gt;&lt;a href=&quot;#Ruby中较复杂的数据类型&quot; class=&quot;headerlink&quot; title=&quot;Ruby中较复杂的数据类型&quot;&gt;&lt;/a&gt;Ruby中较复杂的数据类型&lt;/h1&gt;&lt;h2 id=&quot;字符串-String&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Ruby" scheme="http://Crepuscule.com/categories/Ruby/"/>
    
      <category term="Ruby Basic" scheme="http://Crepuscule.com/categories/Ruby/Ruby-Basic/"/>
    
    
      <category term="Ruby" scheme="http://Crepuscule.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Math Basic</title>
    <link href="http://Crepuscule.com/Data-Structure-Algorithm/Introduction-to-Algorithms/DSandAl/Introduction%20to%20Algorithms/Math-Basic/"/>
    <id>http://Crepuscule.com/Data-Structure-Algorithm/Introduction-to-Algorithms/DSandAl/Introduction to Algorithms/Math-Basic/</id>
    <published>2017-04-13T12:21:42.000Z</published>
    <updated>2017-04-13T14:00:11.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Math-Basic"><a href="#Math-Basic" class="headerlink" title="Math Basic"></a>Math Basic</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Math-Basic&quot;&gt;&lt;a href=&quot;#Math-Basic&quot; class=&quot;headerlink&quot; title=&quot;Math Basic&quot;&gt;&lt;/a&gt;Math Basic&lt;/h2&gt;
    
    </summary>
    
      <category term="Data Structure &amp; Algorithm" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/"/>
    
      <category term="Introduction to Algorithms" scheme="http://Crepuscule.com/categories/Data-Structure-Algorithm/Introduction-to-Algorithms/"/>
    
    
      <category term="Introduction to Algorithms" scheme="http://Crepuscule.com/tags/Introduction-to-Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Ruby Learning 1</title>
    <link href="http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Learning-2/"/>
    <id>http://Crepuscule.com/Ruby/Ruby-Basic/Ruby/Ruby-Learning-2/</id>
    <published>2017-04-12T14:00:29.000Z</published>
    <updated>2017-04-19T12:48:13.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-Ruby-2"><a href="#Basic-Ruby-2" class="headerlink" title="Basic Ruby 2"></a>Basic Ruby 2</h2><blockquote>
<p>by RUNOOB.COM</p>
</blockquote>
<h2 id="Ruby-方法"><a href="#Ruby-方法" class="headerlink" title="Ruby 方法"></a>Ruby 方法</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span> [<span class="params">( [arg [= default]]...[, * arg [, &amp;expr ]])</span></span>]</div><div class="line">  expr</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#简单的方法：</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span></span></div><div class="line">  puts <span class="string">'hello'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">#带参数和缺省值的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(var1=value1,var2=value2)</span></span></div><div class="line">  puts <span class="string">"hello <span class="subst">#&#123;var1,var&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#调用</span></div><div class="line">fun</div><div class="line"><span class="comment">#如果有参数，使用下面方式调用：</span></div><div class="line">fun <span class="number">25</span>,<span class="number">30</span></div></pre></td></tr></table></figure>
<p>实例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/ruby</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(v1=<span class="string">"C++"</span>, v2=<span class="string">"Java"</span>)</span></span></div><div class="line">   puts <span class="string">" <span class="subst">#&#123;a1,a2&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div><div class="line">test <span class="string">"C"</span>, <span class="string">"C++"</span></div><div class="line">test</div><div class="line"></div><div class="line"><span class="comment"># results:</span></div><div class="line">C++,Java</div><div class="line">C,C++</div></pre></td></tr></table></figure></p>
<h3 id="可变数量的参数"><a href="#可变数量的参数" class="headerlink" title="可变数量的参数"></a>可变数量的参数</h3><p>ruby允许声明参数数量可变的方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(*para)</span></span></div><div class="line">  puts <span class="string">"参数个数为： <span class="subst">#&#123;para.length&#125;</span>"</span></div><div class="line">  puts <span class="string">"参数值为："</span></div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...para.length</div><div class="line">    puts para[i]</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">test <span class="string">"wanf"</span>,<span class="string">"9"</span>,<span class="string">"L"</span></div><div class="line">test <span class="string">"windows"</span>,<span class="string">"linux"</span>,<span class="string">"mac"</span>,<span class="string">"unix"</span></div></pre></td></tr></table></figure></p>
<h3 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h3><p>ruby中每个方法后默认有返回值，默认为方法中最后一个语句的值：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ret</span></span></div><div class="line">  a=<span class="number">10</span></div><div class="line">  b=<span class="number">50</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">#将返回b=50的值，即50</span></div></pre></td></tr></table></figure></p>
<h3 id="return-用于从ruby方法中返回一个或者多个值"><a href="#return-用于从ruby方法中返回一个或者多个值" class="headerlink" title="return 用于从ruby方法中返回一个或者多个值"></a>return 用于从ruby方法中返回一个或者多个值</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutlireturn</span></span></div><div class="line">   i = <span class="number">100</span></div><div class="line">   j = <span class="number">200</span></div><div class="line">   k = <span class="number">300</span></div><div class="line"><span class="keyword">return</span> i, j, k</div><div class="line"><span class="keyword">end</span></div><div class="line">var = mutlireturn</div><div class="line">puts var</div><div class="line"></div><div class="line"><span class="comment">#结果：</span></div><div class="line"><span class="number">100</span></div><div class="line"><span class="number">200</span></div><div class="line"><span class="number">300</span></div></pre></td></tr></table></figure>
<h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>当方法定义在类的外部，方法默认标记为 private，如果方法定义在类中的，则默认标记为 public。<br>使用<code>类名.方法</code>的形式声明的方法即为类方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClassFun</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">TestClassFun</span>.<span class="title">ClassFun</span></span></div><div class="line">    puts <span class="string">"class function"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 同样，使用`类名.方法`的方法调用类方法</span></div><div class="line">TestClassFun.ClassFun</div></pre></td></tr></table></figure></p>
<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>用于为方法或全局变量起别名，bash中有实现类似作用的命令<br>别名不能在方法主体内定义。即使方法被重写，方法的别名也保持方法的当前定义。<br>为编号的全局变量（$1, $2,…）起别名是被禁止的。不可以重写内置的全局变量。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$name = <span class="string">"zhang"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(var=<span class="string">"wang"</span>)</span></span></div><div class="line">  $name = var</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">alias</span> setName fun1</div><div class="line"></div><div class="line">puts $name</div><div class="line">setName <span class="string">"Li"</span></div><div class="line">puts $name</div></pre></td></tr></table></figure></p>
<h3 id="undef"><a href="#undef" class="headerlink" title="undef"></a>undef</h3><p>取消方法的定义，它不可以出现在方法主体内<br><code>undef funtion1</code></p>
<h2 id="Ruby块"><a href="#Ruby块" class="headerlink" title="Ruby块"></a>Ruby块</h2><p>ruby中块指包含在{}中的大量代码组成的代码块，块总是从与其具有相同名称的函数调用。如果块名称为 test，那么需要使用函数 test 来调用这个块。</p>
<h3 id="yield-语句"><a href="#yield-语句" class="headerlink" title="yield 语句"></a>yield 语句</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span></div><div class="line">  puts <span class="string">"in funtion test"</span></div><div class="line">  <span class="keyword">yield</span></div><div class="line">  puts <span class="string">"back in funtion test"</span></div><div class="line">  <span class="keyword">yield</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">test &#123;puts <span class="string">"in block"</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 块还可以有参数，多个参数也没问题</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">para</span></span></div><div class="line">   <span class="keyword">yield</span> <span class="string">"before"</span>,<span class="number">5</span></div><div class="line">   puts <span class="string">"in funtion para"</span></div><div class="line">   <span class="keyword">yield</span> <span class="string">"after"</span>,<span class="number">10</span></div><div class="line"><span class="keyword">end</span></div><div class="line">para &#123;<span class="params">|i,j|</span> puts <span class="string">"in block  <span class="subst">#&#123;i&#125;</span>,values <span class="subst">#&#123;j&#125;</span>"</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="BEGIN-和-END-块"><a href="#BEGIN-和-END-块" class="headerlink" title="BEGIN 和 END 块"></a>BEGIN 和 END 块</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BEGIN</span> &#123;</div><div class="line">  puts <span class="string">"BEGIN "</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">END</span> &#123;</div><div class="line">  puts <span class="string">"END"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">puts <span class="string">"MAIN"</span></div></pre></td></tr></table></figure>
<h2 id="ruby模块-Module"><a href="#ruby模块-Module" class="headerlink" title="ruby模块(Module)"></a>ruby模块(Module)</h2><p>Module 将方法，类和常量组合在一起，提供了一个命令空间，mixin装置。但是，模块不能被实例化，没有子类，也不可以被另一个模块定义<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Tring</span></span></div><div class="line">  PI = <span class="number">3.14</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Tring</span>.<span class="title">sin</span><span class="params">(x)</span></span></div><div class="line">    x</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Tring</span>.<span class="title">cos</span><span class="params">(x)</span></span></div><div class="line">    x</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">puts Tring.sin <span class="number">7</span></div><div class="line">puts Tring.cos <span class="number">8</span></div></pre></td></tr></table></figure></p>
<h3 id="require-和-incldue"><a href="#require-和-incldue" class="headerlink" title="require 和 incldue"></a>require 和 incldue</h3><ul>
<li>require 类似与C++中的include ,用于引入ruby模块,require 的文件可以不写出后缀名<br><code>require filename[.rb]</code><br>值得注意的是，需要使用$LOAD_PATH &lt;&lt; ‘.’ 让 Ruby 知道必须在当前目录中搜索被引用的文件。使用 require_relative 来引入相对路径中的文件<br>文件 lib.rb<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Lib</span></span></div><div class="line">        NAME = <span class="string">"wang"</span></div><div class="line">        SEX = <span class="number">1</span></div><div class="line">        GRADE = <span class="number">40</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">Lib</span>.<span class="title">getName</span></span></div><div class="line">                puts NAME</div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">Lib</span>.<span class="title">getGrade</span></span></div><div class="line">                GRADE</div><div class="line">        <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>文件 testRequire.rb<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$LOAD_PATH &lt;&lt; <span class="string">'.'</span></div><div class="line"><span class="keyword">require</span> <span class="string">'lib.rb'</span></div><div class="line"></div><div class="line">Lib.getName</div><div class="line">puts  Lib.getGrade</div></pre></td></tr></table></figure></p>
<ul>
<li>include用于在类中嵌入模块<br>文件support.rb<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Week</span></span></div><div class="line">   FIRST_DAY = <span class="string">"Sunday"</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">Week</span>.<span class="title">weeks_in_month</span></span></div><div class="line">      puts <span class="string">"You have four weeks in a month"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">Week</span>.<span class="title">weeks_in_year</span></span></div><div class="line">      puts <span class="string">"You have 52 weeks in a year"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用上面的模块来定义类<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/ruby</span></div><div class="line">$LOAD_PATH &lt;&lt; <span class="string">'.'</span></div><div class="line"><span class="keyword">require</span> <span class="string">"support"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decade</span></span></div><div class="line"><span class="keyword">include</span> Week</div><div class="line">   no_of_yrs=<span class="number">10</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">no_of_months</span></span></div><div class="line">      puts Week::FIRST_DAY</div><div class="line">      number=<span class="number">10</span>*<span class="number">12</span></div><div class="line">      puts number</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line">d1=Decade.new</div><div class="line">puts Week::FIRST_DAY</div><div class="line">Week.weeks_in_month</div><div class="line">Week.weeks_in_year</div><div class="line">d1.no_of_months</div></pre></td></tr></table></figure></p>
<h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>ruby也不直接支持多重继承,但是moudle中的mixin技术实现了类似的功能<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">a1</span></span></div><div class="line">     puts <span class="string">"in A"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">B</span></span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">b1</span></span></div><div class="line">     puts <span class="string">"in B"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span></span></div><div class="line"><span class="keyword">include</span> A</div><div class="line"><span class="keyword">include</span> B</div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">s1</span></span></div><div class="line">     puts <span class="string">"in Sample"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">samp=Sample.new</div><div class="line">samp.a1</div><div class="line">samp.b1</div><div class="line">samp.s1</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-Ruby-2&quot;&gt;&lt;a href=&quot;#Basic-Ruby-2&quot; class=&quot;headerlink&quot; title=&quot;Basic Ruby 2&quot;&gt;&lt;/a&gt;Basic Ruby 2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;by RUNOOB.COM&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://Crepuscule.com/categories/Ruby/"/>
    
      <category term="Ruby Basic" scheme="http://Crepuscule.com/categories/Ruby/Ruby-Basic/"/>
    
    
      <category term="Ruby" scheme="http://Crepuscule.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 Config</title>
    <link href="http://Crepuscule.com/Linux/Linux-Distributions/CentOS/Linux/Linux%20Distributions/CentOS/CentOS-7-Config/"/>
    <id>http://Crepuscule.com/Linux/Linux-Distributions/CentOS/Linux/Linux Distributions/CentOS/CentOS-7-Config/</id>
    <published>2017-04-12T08:24:31.000Z</published>
    <updated>2017-04-12T09:09:56.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS-配置"><a href="#CentOS-配置" class="headerlink" title="CentOS 配置"></a>CentOS 配置</h2><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>虚拟机中安装完成CentOS 7后无法上网，进入目录<code>/etc/sysconfig/network-scripts/</code>,找到该目录下找到ifcfg-enoxxxxx类似的文件，一般是第一个。使用文本编辑器编辑该文件，将其最后一行ONBOOT=no改为yes。<br>然后重新启动网络服务:<code>service network restart</code>,问题解决。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置yum源:</p>
<ol>
<li>进入yum源配置目录并备份系统自带的yum源<br><code>cd /etc/yum.repos.d
mv CentOS-Base.repo CentOS-Base.repo.back</code></li>
<li>下载163 yum源：<br><code>wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</code><br>或者使用<br>中科大的yum源：<br><code>wget http://centos.ustc.edu.cn/CentOS-Base.repo</code><br>sohu的yum源<br><code>wget http://mirrors.sohu.com/help/CentOS-Base-sohu.repo</code><br>3，更新yum配置，使操作立即生效<br><code>yum makecache</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CentOS-配置&quot;&gt;&lt;a href=&quot;#CentOS-配置&quot; class=&quot;headerlink&quot; title=&quot;CentOS 配置&quot;&gt;&lt;/a&gt;CentOS 配置&lt;/h2&gt;&lt;h3 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Linux" scheme="http://Crepuscule.com/categories/Linux/"/>
    
      <category term="Linux Distributions" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/"/>
    
      <category term="CentOS" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/CentOS/"/>
    
    
      <category term="Linux" scheme="http://Crepuscule.com/tags/Linux/"/>
    
      <category term="CentOS" scheme="http://Crepuscule.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>在线编译后台插件脚本</title>
    <link href="http://Crepuscule.com/Linux/Linux-Shell-Script/Linux/Linux%20Shell%20Script/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%AF%91%E5%90%8E%E5%8F%B0%E6%8F%92%E4%BB%B6%E8%84%9A%E6%9C%AC/"/>
    <id>http://Crepuscule.com/Linux/Linux-Shell-Script/Linux/Linux Shell Script/在线编译后台插件脚本/</id>
    <published>2017-04-11T04:36:58.000Z</published>
    <updated>2017-04-11T05:33:19.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在线编译后台插件脚本"><a href="#在线编译后台插件脚本" class="headerlink" title="在线编译后台插件脚本"></a>在线编译后台插件脚本</h1><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><ul>
<li>底层编译脚本<ul>
<li>C/C++</li>
<li>JAVA</li>
<li>PHP</li>
<li>Python</li>
</ul>
</li>
<li>调用Docker编译环境脚本<ul>
<li>拉取编译环境镜像</li>
<li>编译环境架构</li>
<li>调用脚本</li>
</ul>
</li>
<li>上层接口脚本</li>
</ul>
<h3 id="底层编译脚本"><a href="#底层编译脚本" class="headerlink" title="底层编译脚本"></a>底层编译脚本</h3><ol>
<li>C/C++<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</div><div class="line">export PATH</div><div class="line">## 这是最终的的编译脚本，指定输入文件名xxx将会生成对应名称的4个文件，不指定则会生成默认名为demo的四个文件</div><div class="line"># 注意： make sure the g++ is installed 必须确保安装了g++编译器</div><div class="line"></div><div class="line">## basepath 用于求得CPP文件的根目录：</div><div class="line">basepath=$(cd `dirname $0`;cd ..;pwd)</div><div class="line"># echo &quot;source: $basepath&quot; # 测试CPP根目录是否正确</div><div class="line"></div><div class="line"># 如果参数个数为0，那么执行默认demo命名方案</div><div class="line">if [ $# == 0 ]; then</div><div class="line">	g++ $basepath/sources/demo.cpp -o $basepath/bin/demo.exe &amp;&gt; $basepath/results/demo.res</div><div class="line">	# 如果demo.log文件为空，则无错误，继续执行</div><div class="line">	if [ `cat $basepath/results/demo.res |wc -l` -eq 0 ] ; then</div><div class="line">		echo &quot;demo.cpp has benn comlied!&quot;</div><div class="line">		$basepath/bin/demo.exe &amp;&gt; $basepath/results/demo.res</div><div class="line">		echo &quot;result has been writen to results/demo.res&quot;</div><div class="line">	# 否则，demo.res不为空，里面是错误内容，提示错误内容在demo.res中</div><div class="line">	else</div><div class="line">		echo &quot;the error infos has writen into results/demo.res&quot;</div><div class="line">	fi</div><div class="line">## 如果有参数，用该名字命名各文件(只能有一个参数)</div><div class="line">elif [ $# == 1 ]; then</div><div class="line">	g++ $basepath/sources/$1.cpp -o $basepath/bin/$1.exe &amp;&gt; $basepath/results/$1.res</div><div class="line">	# 如果demo.log文件为空，则无错误，继续执行</div><div class="line">	if [ `cat $basepath/results/$1.res |wc -l` -eq 0 ] ; then</div><div class="line">		echo &quot;$1.cpp has benn comlied!&quot;</div><div class="line">		$basepath/bin/$1.exe &amp;&gt; $basepath/results/$1.res</div><div class="line">		echo &quot;result has been writen to results/$1.res&quot;</div><div class="line">	# 否则，demo.res不为空，里面是错误内容，提示错误内容在demo.res中</div><div class="line">	else</div><div class="line">		echo &quot;the error infos has writen into results/$1.res&quot;</div><div class="line">	fi</div><div class="line">else 	</div><div class="line">	echo &quot;please input correct parameter, 0 or 1&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>CPP编译脚本改进记录：<br>使用.log存放错误信息和.txt太过繁琐，不如将所有信息均写入一个文件$1.res</p>
</blockquote>
<p>CPP编译组件说明：<br><a href="">下载地址</a><br>首先，运行要求：</p>
<ul>
<li>仅可以在linux系统下运行</li>
<li>要求安装g++编译器</li>
<li>整个CPP目录的权限为可读可写<br>使用方法：<br>首先，在任意位置使用sh命令调用<code>CPP/scripts/buildCpp.sh</code>脚本；<br>该脚本可以接受0个或1个参数。如果不给出参数，脚本会读取sources目录下的demo.cpp,使用g++编译器编译出demo.exe可执行文件，并将demo.exe放在CPP/bin目录下。如果出现错误，编译中的错误会记录在CPP/results的demo.res文件中。如果成功编译,运行时终端的输出内容也将会存在CPP/results/demo.res中;<br>如果给出一个参数作为名字，那么脚本将会以给出的参数命名这三个文件，如运行<code>sh scripts/buildCppFile.sh test</code>,那么脚本会读取sources/test.cpp,生成可执行文件bin/test.exe，编译错误或者执行结果会写入到results/test.res</li>
</ul>
<ol>
<li>JAVA<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</div><div class="line">export PATH</div><div class="line"></div><div class="line">#</div><div class="line"># 注意： make sure the JDK is installed 确保JDK已经安装</div><div class="line"></div><div class="line"># basepath 用于求得JAVA源文件的根目录：</div><div class="line">basepath=$(cd `dirname $0`;cd ..;pwd)</div><div class="line">echo &quot;source: $basepath&quot;</div><div class="line"></div><div class="line"></div><div class="line">if [ $# == 0 ]; then</div><div class="line">  # 使用javac的-d参数指定子节码存放位置为results/，错误存入文件demo.log</div><div class="line">	javac $basepath/sources/demo.java -d $basepath/results/ &amp;&gt; $basepath/logs/demo.log</div><div class="line">	# 如果demo.log文件为空，则无错误，继续执行</div><div class="line">	if [ `cat $basepath/logs/demo.log |wc -l` -eq 0 ] ; then</div><div class="line">		echo &quot;demo.java has benn comlied!&quot;</div><div class="line">		# 因为java的包机制，需要进入reults目录再用java命令运行</div><div class="line">		cd $basepath/results;		</div><div class="line">		java demo &amp;&gt; $basepath/results/demo.txt</div><div class="line">		echo &quot;result has been writen to results/demo.txt&quot;</div><div class="line">	# 否则，demo.log不为空，里面是错误内容，提示错误内容在demo.log中</div><div class="line">	else</div><div class="line">		echo &quot;the error infos has writen into logs/demo.log&quot;</div><div class="line">	fi</div><div class="line">elif [ $# == 1 ]; then</div><div class="line">	javac $basepath/sources/$1.java -d $basepath/results/ &amp;&gt; $basepath/logs/$1.log</div><div class="line">	# 如果demo.log文件为空，则无错误，继续执行</div><div class="line">	if [ `cat $basepath/logs/$1.log |wc -l` -eq 0 ] ; then</div><div class="line">		echo &quot;$1.java has benn comlied!&quot;</div><div class="line">		cd $basepath/results;</div><div class="line">		java $1 &amp;&gt; $basepath/results/$1.txt</div><div class="line">		echo &quot;result has been writen to results/$1.txt&quot;</div><div class="line">	# 否则，$1.log不为空，里面是错误内容，提示错误内容在$1.log中</div><div class="line">	else</div><div class="line">		echo &quot;the error infos has writen into logs/$1.log&quot;</div><div class="line">	fi</div><div class="line">fi</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在线编译后台插件脚本&quot;&gt;&lt;a href=&quot;#在线编译后台插件脚本&quot; class=&quot;headerlink&quot; title=&quot;在线编译后台插件脚本&quot;&gt;&lt;/a&gt;在线编译后台插件脚本&lt;/h1&gt;&lt;h2 id=&quot;Content&quot;&gt;&lt;a href=&quot;#Content&quot; class
    
    </summary>
    
      <category term="Linux" scheme="http://Crepuscule.com/categories/Linux/"/>
    
      <category term="Linux Shell Script" scheme="http://Crepuscule.com/categories/Linux/Linux-Shell-Script/"/>
    
    
      <category term="Shell" scheme="http://Crepuscule.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="http://Crepuscule.com/Database/mysql/Database/SQL/"/>
    <id>http://Crepuscule.com/Database/mysql/Database/SQL/</id>
    <published>2017-04-07T10:50:18.000Z</published>
    <updated>2017-04-08T14:40:25.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-Server-的基本使用"><a href="#SQL-Server-的基本使用" class="headerlink" title="SQL Server 的基本使用"></a>SQL Server 的基本使用</h2><h3 id="SQL-Server类型"><a href="#SQL-Server类型" class="headerlink" title="SQL Server类型"></a>SQL Server类型</h3><p>整形：</p>
<ul>
<li>bit 可能值只能为 0,1,空 的整形，可以存储只有两种可能性的数据。如真假，开关等</li>
<li>tinyint 存储从 0-255 之间的整数，数据库仅会占用1字节来存储该值。</li>
<li>smallint 可存储-2^15~2^15 （±32767左右），占用2字节</li>
<li>int 整形 -2^31~2^21,占4字节<br>浮点型：</li>
<li>decimal 精确数值型，范围-10的38次幂-1到10的38次幂-1</li>
<li>numeric 精确数值型</li>
<li>float 近似数值型，其范围内不是所有数都能准确表示的，范围-1.79E+308到1.79E+308</li>
<li>real 近似数值型，范围-3.40E+38到3.40E+38<br>字符型：</li>
<li>char 存储指定长度的定长非统一编码型的数据，用()指定长度，当知道数据的固定的长度时，使用该类型很省空间</li>
<li>varchar 它是变长的，你需要指定其最大长度</li>
<li>nchar</li>
<li>text 存储大量的非统一编码型字符数据。这种数据类型最多可以有231-1或20亿个字符.</li>
<li>ntext 统一编码字符型<br>二进制类型：</li>
<li>binary 存储可达到8000 字节长的定长的二进制数据</li>
<li>varbinary 存储可达8000 字节长的变长的二进制数据。当输入表的内容大小可变时，应该使用这种数据类型  </li>
<li>image 存储变长的二进制数据，最大可达231-1或大约20亿字节  <h3 id="查询表的结构："><a href="#查询表的结构：" class="headerlink" title="查询表的结构："></a>查询表的结构：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MariaDB [laravelquickstart]&gt; desc tasks;</div><div class="line">+------------+------------------+------+-----+---------+----------------+</div><div class="line">| Field      | Type             | Null | Key | Default | Extra          |</div><div class="line">+------------+------------------+------+-----+---------+----------------+</div><div class="line">| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</div><div class="line">| name       | varchar(255)     | NO   |     | NULL    |                |</div><div class="line">| created_at | timestamp        | YES  |     | NULL    |                |</div><div class="line">| updated_at | timestamp        | YES  |     | NULL    |                |</div><div class="line">+------------+------------------+------+-----+---------+----------------+</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQL-Server-的基本使用&quot;&gt;&lt;a href=&quot;#SQL-Server-的基本使用&quot; class=&quot;headerlink&quot; title=&quot;SQL Server 的基本使用&quot;&gt;&lt;/a&gt;SQL Server 的基本使用&lt;/h2&gt;&lt;h3 id=&quot;SQL-Serve
    
    </summary>
    
      <category term="Database" scheme="http://Crepuscule.com/categories/Database/"/>
    
      <category term="mysql" scheme="http://Crepuscule.com/categories/Database/mysql/"/>
    
    
      <category term="mysql" scheme="http://Crepuscule.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Docker Instances Logs</title>
    <link href="http://Crepuscule.com/Operation-Maintenance/Docker/Operation%20&amp;%20Maintenance/Docker/Docker-Instances-Logs/"/>
    <id>http://Crepuscule.com/Operation-Maintenance/Docker/Operation &amp; Maintenance/Docker/Docker-Instances-Logs/</id>
    <published>2017-04-05T04:52:33.000Z</published>
    <updated>2017-05-12T13:50:31.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Logs"><a href="#Docker-Logs" class="headerlink" title="Docker Logs"></a>Docker Logs</h2><h3 id="在centos上安装docekr"><a href="#在centos上安装docekr" class="headerlink" title="在centos上安装docekr"></a>在centos上安装docekr</h3><ol>
<li><p>Set up the repository (在国外VPS中可以使用官方仓库下载最新本)<br>Set up the Docker CE repository on CentOS:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]$ sudo yum install -y yum-utils</div><div class="line">[root@localhost ~]$ sudo yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">[root@localhost ~]$ sudo yum makecache fast</div></pre></td></tr></table></figure>
</li>
<li><p>Get Docker CE<br>Install the latest version of Docker CE on CentOS:<br>(国内很难下载最新本，直接运行yum install docker 下载稳定版本)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]$ sudo yum -y install docker-ce</div></pre></td></tr></table></figure>
</li>
<li><p>Test your Docker CE installation<br>Start Docker to Test your installation:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]$ service docker start <span class="comment">#on centos 6&amp;6-</span></div><div class="line">[root@localhost ~]$ sudo systemctl start docker <span class="comment">#on centos 7</span></div><div class="line">[root@localhost ~]$ chkconfig docker on  <span class="comment">#on centos 6&amp;6-</span></div><div class="line">[root@localhost ~]$ systemctl <span class="built_in">enable</span> docker.service<span class="comment">#on centos 7</span></div><div class="line">[root@localhost ~]$ sudo docker run hello-world</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2017-4-5-13-00"><a href="#2017-4-5-13-00" class="headerlink" title="2017.4.5 13:00"></a>2017.4.5 13:00</h2><ul>
<li>目标：在云主机上搭建owncloud私有云</li>
<li>主机：阿里云主机</li>
<li>使用镜像：hub.c.163.com/library/owncloud</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">使用镜像：</div><div class="line">hub.c.163.com/library/owncloud        latest              8720bc439c27        8 weeks ago         549 MB</div><div class="line">使用命令：</div><div class="line">[crepuscule@bogon ~]$ docker run --name owncloud-v1 -p 8080:80 -v /tools/docker/apps:/var/www/html/apps -v /tools/docker/config:/var/www/html/config  -v /tools/docker/data:/var/www/html/data hub.c.163.com/library/owncloud</div><div class="line">[crepuscule@bogon owncloud]$ docker inspect owncloud-v1</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;Id&quot;: &quot;ec4d0ebe08a3797f79d04dd04cc25c070c772831c3b39217be8a4766e72e662d&quot;,</div><div class="line">        &quot;Created&quot;: &quot;2017-04-05T04:56:34.806584499Z&quot;,</div><div class="line">        &quot;Path&quot;: &quot;/entrypoint.sh&quot;,</div><div class="line">        &quot;Args&quot;: [</div><div class="line">            &quot;apache2-foreground&quot;</div><div class="line">        ],</div><div class="line">        &quot;State&quot;: &#123;</div><div class="line">            &quot;Status&quot;: &quot;running&quot;,</div><div class="line">            &quot;Running&quot;: true,</div><div class="line">            &quot;Paused&quot;: false,</div><div class="line">            &quot;Restarting&quot;: false,</div><div class="line">            &quot;OOMKilled&quot;: false,</div><div class="line">            &quot;Dead&quot;: false,</div><div class="line">            &quot;Pid&quot;: 4066,</div><div class="line">            &quot;ExitCode&quot;: 0,</div><div class="line">            &quot;Error&quot;: &quot;&quot;,</div><div class="line">            &quot;StartedAt&quot;: &quot;2017-04-05T04:56:35.508677216Z&quot;,</div><div class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        &quot;HostConfig&quot;: &#123;</div><div class="line">            &quot;Binds&quot;: [</div><div class="line">                &quot;/tools/docker/config:/var/www/html/config&quot;,</div><div class="line">                &quot;/tools/docker/data:/var/www/html/data&quot;,</div><div class="line">                &quot;/tools/docker/apps:/var/www/html/apps&quot;</div><div class="line">            ],</div><div class="line"></div><div class="line">        &quot;Mounts&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;bind&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/tools/docker/apps&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html/apps&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;volume&quot;,</div><div class="line">                &quot;Name&quot;: &quot;bb141ae7c198757a5f05929ddc9e291b5cbcc3dcf9273b30a8a00d5921409e0c&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/bb141ae7c198757a5f05929ddc9e291b5cbcc3dcf9273b30a8a00d5921409e0c/_data&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html&quot;,</div><div class="line">                &quot;Driver&quot;: &quot;local&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;bind&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/tools/docker/config&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html/config&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;Type&quot;: &quot;bind&quot;,</div><div class="line">                &quot;Source&quot;: &quot;/tools/docker/data&quot;,</div><div class="line">                &quot;Destination&quot;: &quot;/var/www/html/data&quot;,</div><div class="line">                &quot;Mode&quot;: &quot;&quot;,</div><div class="line">                &quot;RW&quot;: true,</div><div class="line">                &quot;Propagation&quot;: &quot;&quot;</div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        &quot;Config&quot;: &#123;</div><div class="line">            &quot;Hostname&quot;: &quot;ec4d0ebe08a3&quot;,</div><div class="line">            &quot;Domainname&quot;: &quot;&quot;,</div><div class="line">            &quot;User&quot;: &quot;&quot;,</div><div class="line">            &quot;AttachStdin&quot;: false,</div><div class="line">            &quot;AttachStdout&quot;: true,</div><div class="line">            &quot;AttachStderr&quot;: true,</div><div class="line">            &quot;ExposedPorts&quot;: &#123;</div><div class="line">                &quot;80/tcp&quot;: &#123;&#125;</div><div class="line">            &#125;,</div><div class="line"></div><div class="line">            &quot;Cmd&quot;: [</div><div class="line">                &quot;apache2-foreground&quot;</div><div class="line">            ],</div><div class="line">            &quot;ArgsEscaped&quot;: true,</div><div class="line">            &quot;Image&quot;: &quot;hub.c.163.com/library/owncloud&quot;,</div><div class="line">            &quot;Volumes&quot;: &#123;</div><div class="line">                &quot;/var/www/html&quot;: &#123;&#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;WorkingDir&quot;: &quot;/var/www/html&quot;,</div><div class="line">            &quot;Entrypoint&quot;: [</div><div class="line">                &quot;/entrypoint.sh&quot;</div><div class="line">            ],</div><div class="line">            &quot;OnBuild&quot;: null,</div><div class="line">            &quot;Labels&quot;: &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">        &quot;NetworkSettings&quot;: &#123;</div><div class="line"></div><div class="line">            &quot;Ports&quot;: &#123;</div><div class="line">                &quot;80/tcp&quot;: [</div><div class="line">                    &#123;</div><div class="line">                        &quot;HostIp&quot;: &quot;0.0.0.0&quot;,</div><div class="line">                        &quot;HostPort&quot;: &quot;8080&quot;</div><div class="line">                    &#125;</div><div class="line">                ]</div><div class="line">            &#125;,</div></pre></td></tr></table></figure>
<p>运行情况：<br>  运行正常，但是如果使用mysql数据库，需要使用外挂的mysql容器实现，目前使用的是</p>
<h3 id="2017-4-5-16-00"><a href="#2017-4-5-16-00" class="headerlink" title="2017.4.5 16:00"></a>2017.4.5 16:00</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">下载镜像，</div><div class="line">daocloud.io/library/mysql，它可以使用volumes</div><div class="line">使用命令：</div><div class="line">docker pull daocloud.io/library/mysql:8</div><div class="line">[crepuscule@bogon ~]$ docker run --name owncloud-mysql -v /tools/docker/mysql:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678  daocloud.io/library/mysql:8</div><div class="line"><span class="comment"># 使用-e 指定了该数据库容器的密码</span></div><div class="line"></div><div class="line">[crepuscule@bogon ~]$ docker run --name owncloud-v2 --link owncloud-mysql:mysql -p 8080:80 -v /tools/docker/owncloud:/var/www/html  hub.c.163.com/library/owncloud</div><div class="line">无法连接mysql数据库，想进入owncloud内查看mysql情况，发现mysql命令根本无法使用，这里没有安装mysql</div></pre></td></tr></table></figure>
<h3 id="2017-4-5-17-00"><a href="#2017-4-5-17-00" class="headerlink" title="2017.4.5 17:00"></a>2017.4.5 17:00</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">使用centos镜像尝试容器间数据库连接是否需要两个容器均安装mysql</div><div class="line">首先运行一个mysql实例</div><div class="line">[crepuscule@bogon ~]$ docker run --name centos-mysql -v /tools/testmysql/mysql:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678  daocloud.io/library/mysql:8</div><div class="line">接着运行centos镜像，使用--link参数</div><div class="line">[crepuscule@bogon ~]$  docker run -it --name centos-test-mysql --link centos-mysql:mysql centos /bin/bash</div><div class="line">镜像内没有安装mysql 也不知道如何连接外部mysql容器</div><div class="line">于是yum 安装mysql</div><div class="line">[crepuscule@bogon ~]$ yum list | grep mysql</div><div class="line">[crepuscule@bogon ~]$ yum install -y mysql-server mysql mysql-deve</div><div class="line">[crepuscule@bogon ~]$ service mysqld start</div><div class="line">或者：</div><div class="line">[crepuscule@bogon ~]$ /etc/init.d/mysqld start</div><div class="line">或者centos7使用：</div><div class="line">[crepuscule@bogon ~]$ systemctl start mysql</div><div class="line">结果报错</div><div class="line">[root@fcef23c4f6cb init.d]$ systemctl start mysql</div><div class="line">Failed to get D-Bus connection: Operation not permitted</div></pre></td></tr></table></figure>
<blockquote>
<p>因为docker内的root并非真的root，<br>这个的原因是因为dbus-daemon没能启动。其实systemctl并不是不可以使用。将你的CMD或者entrypoint设置为/usr/sbin/init即可。会自动将dbus等服务启动起来。<br>   然后就可以使用systemctl了。命令如下：<br>   docker run –privileged  -ti -e “container=docker”  -v /sys/fs/cgroup:/sys/fs/cgroup  centos  /usr/sbin/init</p>
</blockquote>
<h2 id="2017-4-10-21-00"><a href="#2017-4-10-21-00" class="headerlink" title="2017.4.10 21:00"></a>2017.4.10 21:00</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[crepuscule@bogon ~]$ docker pull daocloud.io/library/java:7-jre-alpine</div><div class="line">[crepuscule@bogon ~]$ docker run --rm -v /home/crepuscule/ProgramLearning/Docker/JAVA/:/usr/src/myapp -w /usr/src/myapp daocloud.io/java:7 javac Main.java</div><div class="line"><span class="comment"># 在上面的实例中，你的JAVA目录会以volume的形式(-v)挂接进容器，并且设置工作目录(-w)为 volume 目录，然后运行命令javac Main.java触发 Java 编译Main.java并指定输出文件为Main.class。</span></div></pre></td></tr></table></figure>
<h2 id="2017-4-12-11-18"><a href="#2017-4-12-11-18" class="headerlink" title="2017.4.12 11:18"></a>2017.4.12 11:18</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">运行容器</div><div class="line">[crepuscule@bogon ~]$ docker run -it --name centos-cpp  -p 2222:22  -v /data/docker/CPP :/data/CPP 67591570dd29 /bin/bash</div><div class="line">安装 g++ 编译器</div><div class="line">[root@84690bc1f4fa CPP]$ yum install gcc-c++</div><div class="line">Installed:</div><div class="line">  gcc-c++.x86_64 0:4.8.5-11.el7                                                                                                                          </div><div class="line">Dependency Installed:</div><div class="line">  cpp.x86_64 0:4.8.5-11.el7          gcc.x86_64 0:4.8.5-11.el7        glibc-devel.x86_64 0:2.17-157.el7_3.1      glibc-headers.x86_64 0:2.17-157.el7_3.1      kernel-headers.x86_64 0:3.10.0-514.10.2.el7     </div><div class="line">  libgomp.x86_64 0:4.8.5-11.el7      libmpc.x86_64 0:1.0.1-3.el7      libstdc++-devel.x86_64 0:4.8.5-11.el7      mpfr.x86_64 0:3.1.1-4.el7                   </div><div class="line"></div><div class="line">Complete!</div><div class="line">[root@84690bc1f4fa CPP]$ sh scripts/last.sh</div><div class="line">demo.cpp has benn comlied!</div><div class="line">result has been writen to results/demo.res</div><div class="line">[root@84690bc1f4fa CPP]$ cat results/demo.res</div><div class="line">hello world</div><div class="line">docker is compile the cpp files!jldskfjklsdf;jdslf</div><div class="line">[root@84690bc1f4fa CPP]$</div></pre></td></tr></table></figure>
<h2 id="2017-4-27"><a href="#2017-4-27" class="headerlink" title="2017.4.27"></a>2017.4.27</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker.io/ubuntu                        am                  1eb8f11bccf2        4 weeks ago         723.6 MB</div><div class="line">hub.c.163.com/crepuscule/am             latest              1eb8f11bccf2        4 weeks ago         723.6 MB</div><div class="line">daocloud.io/library/mysql               8                   9f21237828fe        5 weeks ago         433.2 MB</div><div class="line">daocloud.io/daocloud/daocloud-toolset   latest              bbdc71e950ea        6 weeks ago         147.1 MB</div><div class="line">docker.io/ubuntu                        latest              0ef2e08ed3fa        8 weeks ago         130 MB</div><div class="line">daocloud.io/daocloud/dao-kodexplore     latest              b7cc61575540        15 months ago       249.5 MB</div><div class="line">daocloud.io/daocloud/dao-wordpress      latest              de6ea403c52d        19 months ago       512.3 MB</div></pre></td></tr></table></figure>
<h2 id="2017-05-05"><a href="#2017-05-05" class="headerlink" title="2017-05-05"></a>2017-05-05</h2><ul>
<li>主机：远程主机</li>
<li>目标：测试两个容器之间的通信，</li>
<li>思路：开启两个容器，一个centos，一个mysql，<ol>
<li>先通过centos内的mysql客户端人工访问mysql内的数据</li>
<li>如果成功访问，下载可以挂载本地项目的lamp容器，但是数据库服务单独放在mysql容器内，并挂载到本地目录<h3 id="两个mysql容器之间的访问"><a href="#两个mysql容器之间的访问" class="headerlink" title="两个mysql容器之间的访问"></a>两个mysql容器之间的访问</h3></li>
</ol>
</li>
</ul>
<ol>
<li>下载镜像<br><code>[root@remote ~]$ sudo docker pull daocloud.io/library/mysql:5.5.42</code></li>
<li>运行服务端<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ sudo docker run  -P --name=server -v /data/mysql:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678 daocloud.io/library/mysql:5.5.42</div><div class="line"><span class="comment"># -P 是大写的P，自动映射所有需要使用到的而且不和主机端口冲突的端口</span></div><div class="line"><span class="comment"># 如果使用-d参数，mysql容器会在后台运行，如果不使用-d上述命令会输出容器的运行日志</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>接下来在另一终端使用<code>docker exec -i -t server /bin/bash</code>来进入终端，使用 <code>mysql -uroot -p</code> 然后输入密码即可成功登入数据库<br>同样如果宿主机安装了mysql的clinet，也可以在宿主机上通过指定主机和端口的方法登入容器内的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ docker ps</div><div class="line">CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                     NAMES</div><div class="line">xxxxxxxxx        daocloud.io/library/mysql:5.5.42   <span class="string">"/entrypoint.sh mysql"</span>   22 minutes ago      Up 22 minutes       0.0.0.0:32771-&gt;3306/tcp   server</div><div class="line"><span class="comment"># 可以看到因为使用了-P 参数，docker自动将容器内的mysql标准端口映射到宿主机的一个空闲端口32771上</span></div><div class="line">[root@remote ~]$ mysql -u root -h 0.0.0.0 -P 32771 -p</div><div class="line">Enter password:</div><div class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</div><div class="line">MySQL [(none)]&gt; Bye</div><div class="line"><span class="comment"># 这样就可以成功登入了</span></div></pre></td></tr></table></figure></p>
<ol>
<li>运行客户端<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ sudo docker run -P --link=server:db --name=client <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678 daocloud.io/library/mysql:5.5.42</div><div class="line"><span class="comment"># 使用link将刚才的server容器在本容器内重名为db以便访问</span></div><div class="line"><span class="comment"># 使用exec命令进入client的bash shell</span></div><div class="line">[root@remote ~]$ docker <span class="built_in">exec</span> -i -t client /bin/bash</div><div class="line"><span class="comment"># 开始连接server端</span></div><div class="line">[root@remote ~]$ mysql -u root -h db -p</div><div class="line">Enter password:</div><div class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</div><div class="line">MySQL [(none)]&gt; Bye</div><div class="line"><span class="comment"># 这样就可以成功登入了</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="mysql容器和非mysql容器之间的访问"><a href="#mysql容器和非mysql容器之间的访问" class="headerlink" title="mysql容器和非mysql容器之间的访问"></a>mysql容器和非mysql容器之间的访问</h3><ol>
<li><p>下载可挂载volumes的mysql镜像和centos镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ sudo docker pull daocloud.io/library/mysql:5.5.42</div><div class="line">[root@remote ~]$ sudo docker pull daocloud.io/library/centos:latest</div><div class="line">[root@remote ~]$ docker images</div><div class="line">REPOSITORY                              TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">daocloud.io/library/centos              latest              a8493f5f50ff        4 weeks ago         192.5 MB</div><div class="line">daocloud.io/library/mysql               5.5.42              1a4c69312faa        2 years ago         214.5 MB</div></pre></td></tr></table></figure>
</li>
<li><p>运行mysql镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ docker run --name=centos-mysql -v /data/mysql:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678 [<span class="_">-d</span> (后台运行)] daocloud.io/library/mysql:8</div><div class="line"><span class="comment"># 运行mysql容器，挂载本地的/data/mysql目录为数据目录，设置环境变量即mysql密码，指定名称为centos-mysql。</span></div><div class="line"><span class="comment"># 经过验证8版本的mysql容器可以成功使用exec命令在mysql容器内部登入mysql数据库，并在指定的volumes中自动创建msql目录</span></div></pre></td></tr></table></figure>
</li>
<li><p>运行centos镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ docker run --rm --name=TestMysqlConn --link=centos-mysql:db centos</div><div class="line">[root@remote ~]$ docker <span class="built_in">exec</span> -it TestMysqlConn /bin/bash</div><div class="line">root@be96<span class="built_in">cd</span>304d6c:/\<span class="comment"># mysql -uroot -h db -p</span></div><div class="line">Enter Password:</div><div class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</div><div class="line">MySQL [(none)]&gt; Bye</div><div class="line"><span class="comment"># 登入成功</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2017-05-05-15-00"><a href="#2017-05-05-15-00" class="headerlink" title="2017.05.05 15:00"></a>2017.05.05 15:00</h2><ul>
<li>主机：阿里云主机</li>
<li>目标：使用分离的mysql容器和volumes构建owncloud私有云</li>
<li>使用镜像：hub.c.163.com/library/owncloud:latest<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3></li>
</ul>
<ol>
<li><p>owncloud镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先登录 docker login -u [你的蜂巢邮箱账号或手机号码] -p [你的蜂巢密码] -e [你的邮箱] hub.c.163.com</span></div><div class="line">[root@remote ~]$ docker login -u xxxxxxxxx@163.com -p ******** hub.c.163.com</div><div class="line">Login Succeeded</div><div class="line">[root@remote ~]$ docker images</div><div class="line">REPOSITORY                              TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">hub.c.163.com/library/owncloud          latest              92091dead5ef        9 days ago          567.3 MB</div></pre></td></tr></table></figure>
</li>
<li><p>mysql镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ docker run  <span class="_">-d</span> --name=owncloud-mysql  -p 33006:3306 <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678 -v /data/owncloud-mysql:/var/lib/mysql daocloud.io/library/mysql:5.5.42</div><div class="line">[root@remote ~]$ docker ps</div><div class="line">CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                     NAMES</div><div class="line">7c87510c48a6        daocloud.io/library/mysql:5.5.42   <span class="string">"/entrypoint.sh mysql"</span>   29 seconds ago      Up 27 seconds       0.0.0.0:33006-&gt;3306/tcp   owncloud-mysql</div><div class="line">[root@remote ~]$ docker</div></pre></td></tr></table></figure>
</li>
<li><p>owncloud 镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ docker run --name=owncloud <span class="_">-d</span> --link=owncloud-mysql:mysql -p 8080:80 -v /data/owncloud:/var/www/html  hub.c.163.com/library/owncloud</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意事项：<br>阿里云主机如果开启了访问过滤需要配置安全组打开8080端口才能访问到容器</p>
</blockquote>
<h2 id="2017-05-05-17-00"><a href="#2017-05-05-17-00" class="headerlink" title="2017.05.05 17:00"></a>2017.05.05 17:00</h2><ul>
<li>主机：阿里云主机</li>
<li>目标：构建dao-explore</li>
<li>使用镜像：daocloud.io/daocloud/dao-kodexplore<br>使用命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@remote ~]$ docker run <span class="_">-d</span> -v /data/dao-explore:/data/http/data/User/admin/home -p 8088:80 daocloud.io/daocloud/dao-kodexplore</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2017-05-05-17-30"><a href="#2017-05-05-17-30" class="headerlink" title="2017.05.05 17:30"></a>2017.05.05 17:30</h2><ul>
<li>主机：localhost</li>
<li>构建lamp+mysql组合容器<br>构建思路：使用lamp容器运行php+apache，将网站目录挂载至volumes:/data/lamp/www<br>使用mysql容器运行mysql，将mysql容器数据挂载在:/data/lamp/mysql中</li>
<li>使用镜像：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 运行mysql容器</span></div><div class="line">[root@remote ~]$ docker run <span class="_">-d</span> --name=lamp-mysql  -p 33066:3306 <span class="_">-e</span> MYSQL_ROOT_PASSWORD=12345678 -v /data/lamp/mysql:/var/lib/mysql daocloud.io/library/mysql:5.5.42</div><div class="line"><span class="comment"># 运行lamp</span></div><div class="line">[root@remote ~]$ docker run <span class="_">-d</span> --rm -v /data/lamp/www:/var/www --link=lamp-mysql:mysql -p 80:80  hub.c.163.com/public/lamp</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样可以在本地将该组件当作稳定可靠的lamp使用，使用时将WEB应用放在/data/lamp/www中，数据库中的数据将会存在/data/lamp/mysql中不会使容器过于冗余复杂。只要保留本地的vloumes目录，均可以在更换重启容器的情况下保证web引用的正常运行.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker-Logs&quot;&gt;&lt;a href=&quot;#Docker-Logs&quot; class=&quot;headerlink&quot; title=&quot;Docker Logs&quot;&gt;&lt;/a&gt;Docker Logs&lt;/h2&gt;&lt;h3 id=&quot;在centos上安装docekr&quot;&gt;&lt;a href=&quot;#在
    
    </summary>
    
      <category term="Operation &amp; Maintenance" scheme="http://Crepuscule.com/categories/Operation-Maintenance/"/>
    
      <category term="Docker" scheme="http://Crepuscule.com/categories/Operation-Maintenance/Docker/"/>
    
    
      <category term="Docker" scheme="http://Crepuscule.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Learning Note 2</title>
    <link href="http://Crepuscule.com/Operation-Maintenance/Docker/Operation%20&amp;%20Maintenance/Docker/Docker-Learning-Note-2/"/>
    <id>http://Crepuscule.com/Operation-Maintenance/Docker/Operation &amp; Maintenance/Docker/Docker-Learning-Note-2/</id>
    <published>2017-04-03T06:40:00.000Z</published>
    <updated>2017-04-04T10:47:55.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-学习笔记-2"><a href="#Docker-学习笔记-2" class="headerlink" title="Docker 学习笔记 2"></a>Docker 学习笔记 2</h2><h3 id="Docker-的数据持久化"><a href="#Docker-的数据持久化" class="headerlink" title="Docker 的数据持久化"></a>Docker 的数据持久化</h3><p>Docker镜像是通过每一次修改时增加数据层的方式进行的。每一次commit新的镜像均会向镜像的上面新加数据层。而使用run命令执行的则是以镜像为基础打造的一个实例，即容器(container)。容器在运行中被修改的数据在执行commit命令后会写入新的镜像。<br>所以docker在实际的应用中，比如web应用中。会有很多容器内部或者web app用户生成的数据。这些数据有些时候是需要保存起来而且不允许丢失的。<br>如果将这写数据直接保存在docker容器中显然会大幅降低docker的易用性，而且会致使容器数据层频繁增加影响效率。除此之外，容器之间的数据通信也是问题。而如果在实际运维中，容器需要更换，那么容器中的数据就需要要从一个容器中转移到另一个容器或者干脆可以共享。<br>为了能够保存(持久化)数据以及共享容器间的数据,Docker提出了Volume的概念.简单来说,Volume就是目录或者文件,它可以绕过默认的联合文件系统,而以正常的文件或者目录的形式存在于宿主机上。<br><a id="more"></a></p>
<h3 id="运行时使用-v参数指定volume"><a href="#运行时使用-v参数指定volume" class="headerlink" title="运行时使用-v参数指定volume"></a>运行时使用-v参数指定volume</h3><p>这里使用centos镜像，在运行时使用 -v 参数指定volume在容器中的挂载目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">[crepuscule@bogon ~]$ docker run -it --name volume-test -v /data centos /bin/bash</div><div class="line">[root@a9ebab0fa49e /]<span class="comment"># 已进入容器内</span></div><div class="line">另起一终端：</div><div class="line">[crepuscule@bogon ~]$ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">a9ebab0fa49e        centos              <span class="string">"/bin/bash"</span>         45 seconds ago      Up 43 seconds                           volume-test</div><div class="line">[crepuscule@bogon ~] docker inspect volume-test</div><div class="line"><span class="string">"Mounts"</span>: [</div><div class="line">           &#123;</div><div class="line">               <span class="string">"Type"</span>: <span class="string">"volume"</span>,</div><div class="line">               <span class="string">"Name"</span>: <span class="string">"c81f996ca6f5c3715e51f8f37ee640031661917894b5e5d4cf9acfe0dd171ab3"</span>,</div><div class="line">               <span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/c81f996ca6f5c3715e51f8f37ee640031661917894b5e5d4cf9acfe0dd171ab3/_data"</span>,  <span class="comment"># volumes在宿主机中的真实路径</span></div><div class="line">               <span class="string">"Destination"</span>: <span class="string">"/data"</span>, <span class="comment"># volumes在docker容器中的挂载点</span></div><div class="line">               <span class="string">"Driver"</span>: <span class="string">"local"</span>,</div><div class="line">               <span class="string">"Mode"</span>: <span class="string">""</span>,</div><div class="line">               <span class="string">"RW"</span>: <span class="literal">true</span>,</div><div class="line">               <span class="string">"Propagation"</span>: <span class="string">""</span></div><div class="line">           &#125;</div><div class="line">       ],</div><div class="line">       <span class="string">"Config"</span>: &#123;</div><div class="line">           <span class="string">"Hostname"</span>: <span class="string">"a9ebab0fa49e"</span>,</div><div class="line">           <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">           <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">           <span class="string">"AttachStdin"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"AttachStdout"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"AttachStderr"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"Tty"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"OpenStdin"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"StdinOnce"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="string">"Env"</span>: [</div><div class="line">               <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line">           ],</div><div class="line">           <span class="string">"Cmd"</span>: [</div><div class="line">               <span class="string">"/bin/bash"</span></div><div class="line">           ],</div><div class="line">           <span class="string">"Image"</span>: <span class="string">"centos"</span>,</div><div class="line">           <span class="string">"Volumes"</span>: &#123;   <span class="comment"># 此容器的volumes仅有/data</span></div><div class="line">               <span class="string">"/data"</span>: &#123;&#125;</div><div class="line">           &#125;,</div><div class="line">           <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</div><div class="line">           <span class="string">"Entrypoint"</span>: null,</div><div class="line">           <span class="string">"OnBuild"</span>: null,</div><div class="line">           <span class="string">"Labels"</span>: &#123;</div><div class="line">               <span class="string">"build-date"</span>: <span class="string">"20161214"</span>,</div><div class="line">               <span class="string">"license"</span>: <span class="string">"GPLv2"</span>,</div><div class="line">               <span class="string">"name"</span>: <span class="string">"CentOS Base Image"</span>,</div><div class="line">               <span class="string">"vendor"</span>: <span class="string">"CentOS"</span></div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">[root@bogon volumes]$ <span class="built_in">cd</span> /var/lib/docker/volumes/c81f996ca6f5c3715e51f8f37ee640031661917894b5e5d4cf9acfe0dd171ab3/_data</div><div class="line"><span class="comment"># 这里就是容器挂载的目录</span></div><div class="line">[root@bogon _data]$ mkdir <span class="built_in">test</span></div><div class="line">[root@bogon _data]$ ls</div><div class="line"><span class="built_in">test</span></div><div class="line">换到docker内部的终端</div><div class="line">[root@a9ebab0fa49e /]<span class="comment"># ls /data</span></div><div class="line"><span class="built_in">test</span></div><div class="line"><span class="comment"># 容器中的/data就是宿主机中的那个目录</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>你可以把VOLUME理解为，从镜像中复制指定卷的文件夹到本地/var/lib/docker/volumes/xxxxxxxxx/文件夹，然后把本地的该文件夹挂载到容器里面去。<a href="https://segmentfault.com/q/1010000004107293" target="_blank" rel="external">原文</a></p>
</blockquote>
<h3 id="lamp镜像的使用"><a href="#lamp镜像的使用" class="headerlink" title="lamp镜像的使用"></a>lamp镜像的使用</h3><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>在了解了volumes概念之后，就可以使用volumes来为web app的开发运维创造福音。<br>首先，为了提高网速，使用了网易蜂巢的lamp镜像，下载地址(需要注册网易蜂巢帐号并在pull之前login)：<br>docker pull hub.c.163.com/public/lamp:latest<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@bogon _data]$ docker login -u [你的蜂巢邮箱账号或手机号码] -p [你的蜂巢密码] <span class="_">-e</span> [你的邮箱] hub.c.163.com</div><div class="line">Login Succeeded</div><div class="line">[root@bogon _data]$ docker pull hub.c.163.com/public/lamp:latest</div><div class="line">[root@bogon _data]$ docker images</div><div class="line">centos                                latest              67591570dd29        3 months ago        192 MB</div><div class="line">hub.c.163.com/public/lamp             latest              14e0318d2c44        12 months ago       366 MB</div></pre></td></tr></table></figure></p>
<h4 id="了解镜像的描述"><a href="#了解镜像的描述" class="headerlink" title="了解镜像的描述"></a>了解镜像的描述</h4><p>ok，lamp的镜像已经下载完毕，阅读网易蜂巢上LAMP详细描述：</p>
<blockquote>
<p>如何使用LAMP镜像<br>    该镜像基于 hub.c.163.com/public/debian:7.9 镜像制作，推荐最小规格为小型。<br>安装软件:<br>    apache2，站点路径/var/www/<br>    php5<br>    mysql 5.6.29，默认密码为空</p>
</blockquote>
<p>从中我们了解到该lamp镜像中的站点目录为/var/www，那么我们只要将需要部署的web app放在容器中的这个目录下即可。<br>另外，通过dockerfile可以了解到更多信息：</p>
<blockquote>
<p>VOLUME /var/lib/mysql<br>  EXPOSE 22<br>  EXPOSE 80<br>  EXPOSE 3306</p>
</blockquote>
<p>首先该容器暴露了 22，80，3306端口分别用于远程登入，用户访问和mysql数据库连接。然后，该镜像已经在dockerfile中创建了volume，那么在生成该镜像的实例容器时，docker会自动在系统的/var/lib/docker/volumes/中创建挂载目录供容器挂载，但是该目录隐蔽，权限要求高，在分享和维护volume时比较繁琐。</p>
<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><p>所以将使用run命令的参数 -v 来规范volume使之更易使用，下面通过创建一个该镜像的容器实例来说明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@bogon _data]$ docker run --name volumes-test -p 8080:80 -p 33066:3306 -p 2222:22  -v /docker/deployPath:/var/www  -v /docker/mysqldata:/var/lib/mysql     hub.c.163.com/public/lamp</div></pre></td></tr></table></figure></p>
<p>这条命令首先使用 –name 参数指定将要创建的容器实例名字，这样就不必每次均使用容器的id来进行操作<br>三次指定 -p 参数 分别将容器暴露的端口映射到宿主机<br>两次指定 -v 参数<br> -v /docker/deployPath:/var/www 是将宿主机目录/docker/deployPath映射到容器中的/var/www中，那么只要将需要部署的web app文件复制到宿主机目录/docker/deployPath下，就像当于将web app部署到了容器站点根目录下，容器就会进行解析，并在对应的 宿主机ip:8080 中进行渲染。<br> -v /docker/mysqldata:/var/lib/mysql 这里/var/lib/mysql是该镜像默认就有的用于存储mysql数据的volume。将其挂载到指定目录便于管理，识别和数据共享。</p>
<h4 id="容器的访问和维护"><a href="#容器的访问和维护" class="headerlink" title="容器的访问和维护"></a>容器的访问和维护</h4><p>在容器运行之后，我们还可以通过执行exec进入容器内部访问数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon _data]$ docker <span class="built_in">exec</span> -it 容器id/名字 /bin/bash</div><div class="line">root@37d7bc558371<span class="comment"># mysql</span></div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div></pre></td></tr></table></figure></p>
<p>通过上面的参数，lamp镜像所生成的容器实例就可以实现 将自己在宿主机中开发好的网站放在宿主机/docker/deployPath目录中，然后在 宿主机ip:8080 将可以访问到部署的网站，而网站在处理中生成或者接收的数据在宿主机/docker/mysqldata目录可以被访问和维护。<br>如果网站功能需要完善，原先的网站需要被修改。那么先停掉容器，将修改好的文件替换宿主机/docker/deployPath目录中原来的文件，重新启动容器即可。那么，这里运行中的容器就是一个仅进行数据处理，不吸收也不释放数据的引擎。</p>
<h3 id="一些lamp镜像"><a href="#一些lamp镜像" class="headerlink" title="一些lamp镜像"></a>一些lamp镜像</h3><p>[dockerfiles/centos-lamp] (<a href="https://github.com/dockerfiles/centos-lamp" target="_blank" rel="external">https://github.com/dockerfiles/centos-lamp</a>)<br>daocloud pull 命令：docker pull dockerfiles/centos-lamp:latest</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker-学习笔记-2&quot;&gt;&lt;a href=&quot;#Docker-学习笔记-2&quot; class=&quot;headerlink&quot; title=&quot;Docker 学习笔记 2&quot;&gt;&lt;/a&gt;Docker 学习笔记 2&lt;/h2&gt;&lt;h3 id=&quot;Docker-的数据持久化&quot;&gt;&lt;a href=&quot;#Docker-的数据持久化&quot; class=&quot;headerlink&quot; title=&quot;Docker 的数据持久化&quot;&gt;&lt;/a&gt;Docker 的数据持久化&lt;/h3&gt;&lt;p&gt;Docker镜像是通过每一次修改时增加数据层的方式进行的。每一次commit新的镜像均会向镜像的上面新加数据层。而使用run命令执行的则是以镜像为基础打造的一个实例，即容器(container)。容器在运行中被修改的数据在执行commit命令后会写入新的镜像。&lt;br&gt;所以docker在实际的应用中，比如web应用中。会有很多容器内部或者web app用户生成的数据。这些数据有些时候是需要保存起来而且不允许丢失的。&lt;br&gt;如果将这写数据直接保存在docker容器中显然会大幅降低docker的易用性，而且会致使容器数据层频繁增加影响效率。除此之外，容器之间的数据通信也是问题。而如果在实际运维中，容器需要更换，那么容器中的数据就需要要从一个容器中转移到另一个容器或者干脆可以共享。&lt;br&gt;为了能够保存(持久化)数据以及共享容器间的数据,Docker提出了Volume的概念.简单来说,Volume就是目录或者文件,它可以绕过默认的联合文件系统,而以正常的文件或者目录的形式存在于宿主机上。&lt;br&gt;
    
    </summary>
    
      <category term="Operation &amp; Maintenance" scheme="http://Crepuscule.com/categories/Operation-Maintenance/"/>
    
      <category term="Docker" scheme="http://Crepuscule.com/categories/Operation-Maintenance/Docker/"/>
    
    
      <category term="Docker" scheme="http://Crepuscule.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>JAVA in 2017</title>
    <link href="http://Crepuscule.com/uncategorized/JAVA/JAVA-in-2017/"/>
    <id>http://Crepuscule.com/uncategorized/JAVA/JAVA-in-2017/</id>
    <published>2017-03-31T06:47:00.000Z</published>
    <updated>2017-03-31T11:19:35.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA基础注意点"><a href="#JAVA基础注意点" class="headerlink" title="JAVA基础注意点"></a>JAVA基础注意点</h2><h3 id="JAVA的字符类型"><a href="#JAVA的字符类型" class="headerlink" title="JAVA的字符类型"></a>JAVA的字符类型</h3><p>java字符类型采用unicode码，char与整型各类型通用。char可直接由十进制或十六进制整形赋值，亦可以由十六进制的unicode码(使用’\uxxxx’表示)。如果将字符强制类型转换，将输出unicode码对应的十进制数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> hanzi1=<span class="number">20013</span>;</div><div class="line"><span class="keyword">char</span> hanzi2=<span class="number">0x4E2D</span>;</div><div class="line"><span class="keyword">char</span> hanzi3=<span class="string">'\u4E2D'</span>;</div><div class="line"><span class="keyword">char</span> hanzi4=<span class="string">'中'</span>;</div><div class="line">System.out.println(hanzi1);</div><div class="line">System.out.println(hanzi2);</div><div class="line">System.out.println(hanzi3);</div><div class="line">System.out.println((<span class="keyword">int</span>)hanzi4);</div><div class="line"></div><div class="line">console：</div><div class="line">中</div><div class="line">中</div><div class="line">中</div><div class="line"><span class="number">20013</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="JAVA二维数组拷贝的方法"><a href="#JAVA二维数组拷贝的方法" class="headerlink" title="JAVA二维数组拷贝的方法"></a>JAVA二维数组拷贝的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</div><div class="line">	<span class="comment">//声明数组，即创建一个类似C++字符数组的指针</span></div><div class="line">	<span class="keyword">float</span> [] dogs; <span class="comment">//in c++ float * dogs;</span></div><div class="line">	<span class="keyword">char</span>[][] cats;  <span class="comment">//in c++ char **cats;</span></div><div class="line">	Array(<span class="keyword">float</span> []dogs,<span class="keyword">char</span>[][]cats)&#123;	 <span class="comment">//通过外界传入的数据对内部数组初始化</span></div><div class="line"><span class="comment">// 一维数组中</span></div><div class="line">    <span class="comment">//方法一.可以改变引用指向达到赋值的目的。此时也不需要给成员变量初始化（分配内存）</span></div><div class="line">		<span class="keyword">this</span>.dogs=dogs;</div><div class="line">		<span class="comment">//方法二. 不嫌麻烦，使用c++形式的动态数组初始化：</span></div><div class="line">		<span class="keyword">this</span>.dogs=<span class="keyword">new</span> <span class="keyword">float</span>[dogs.length];</div><div class="line">		<span class="comment">//拷贝给已经初始化的数组。使用System静态方法 arraycopy，缺点是参数较多，而且需要数组已被初始化</span></div><div class="line">		System.arraycopy(dogs, <span class="number">0</span>, <span class="keyword">this</span>.dogs, <span class="number">0</span>, dogs.length);</div><div class="line">    <span class="comment">//方法三. 使用Arrays静态方法，不需要初始化目标数组</span></div><div class="line">    <span class="keyword">this</span>.dogs=Arrays.copyOf(dogs,dogs.length);</div><div class="line"><span class="comment">//二维数组</span></div><div class="line">    <span class="comment">//方法一.复制引用</span></div><div class="line">    <span class="keyword">this</span>.cats=cats;</div><div class="line">    <span class="comment">//方法二.深拷贝</span></div><div class="line">		<span class="keyword">this</span>.cats=<span class="keyword">new</span> <span class="keyword">char</span>[cats.length][];</div><div class="line">		<span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">char</span> [] element : cats)&#123;</div><div class="line">			<span class="comment">//使用Arrays静态方法copyOf初始化，优点是不需要数组是分配内存的，其返回值为复制后新数组内存的地址，而且参数较少</span></div><div class="line">			<span class="keyword">this</span>.cats[index++]=Arrays.copyOf(element,element.length );</div><div class="line">		&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异或实现整数的交换"><a href="#异或实现整数的交换" class="headerlink" title="异或实现整数的交换"></a>异或实现整数的交换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x=<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> y=<span class="number">23</span>;</div><div class="line">System.out.println(<span class="string">"x="</span>+x+<span class="string">"y="</span>+y);</div><div class="line">x=x^y;</div><div class="line">y=x^y;</div><div class="line">x=x^y;</div><div class="line">System.out.println(<span class="string">"x="</span>+x+<span class="string">"y="</span>+y);</div><div class="line">--------------------------------</div><div class="line">console:</div><div class="line">x=<span class="number">10</span> y=<span class="number">23</span></div><div class="line">x=<span class="number">23</span> y=<span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="JAVA-SWAP函数的实现"><a href="#JAVA-SWAP函数的实现" class="headerlink" title="JAVA SWAP函数的实现"></a>JAVA SWAP函数的实现</h3><p>方法一：传数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> t = data[a];  </div><div class="line">        data[a] = data[b];  </div><div class="line">        data[b] = t;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">int</span>　[]data=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">data[<span class="number">0</span>]=<span class="number">23</span>;</div><div class="line">data[<span class="number">1</span>]=<span class="number">8</span>;</div><div class="line">swap(data,<span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>方法二：自己封装类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> </span>&#123;     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInteger</span><span class="params">(<span class="keyword">int</span> xIn)</span> </span>&#123; x = xIn; &#125; <span class="comment">// 构造器   </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;  <span class="comment">// 得到值    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> xIn)</span> </span>&#123; x = xIn;&#125; <span class="comment">// 改变值  </span></div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swapping</span> </span>&#123;     </div><div class="line">    <span class="comment">// swap: 传对象引用   </span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(MyInteger rWrap, MyInteger sWrap)</span> </span>&#123;        </div><div class="line">        <span class="comment">// 变值过程       </span></div><div class="line">        <span class="keyword">int</span> t = rWrap.getValue();        </div><div class="line">        rWrap.setValue(sWrap.getValue());        </div><div class="line">        sWrap.setValue(t);     </div><div class="line">    &#125;     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </div><div class="line">        <span class="keyword">int</span> a = <span class="number">23</span>, b = <span class="number">47</span>;        </div><div class="line">        System.out.println(<span class="string">"Before. a:"</span> + a + <span class="string">", b: "</span> + b);        </div><div class="line">        MyInteger aWrap = <span class="keyword">new</span> MyInteger(a);        </div><div class="line">        MyInteger bWrap = <span class="keyword">new</span> MyInteger(b);        </div><div class="line">        swap(aWrap, bWrap);        </div><div class="line">        a = aWrap.getValue();        </div><div class="line">        b = bWrap.getValue();        </div><div class="line">        System.out.println(<span class="string">"After.  a:"</span> + a + <span class="string">", b: "</span> + b);     </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/xuxurui007/article/details/7650168" target="_blank" rel="external">参考文档</a></p>
<h2 id="JAVA面向对象注意点"><a href="#JAVA面向对象注意点" class="headerlink" title="JAVA面向对象注意点"></a>JAVA面向对象注意点</h2><p>###　类</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA基础注意点&quot;&gt;&lt;a href=&quot;#JAVA基础注意点&quot; class=&quot;headerlink&quot; title=&quot;JAVA基础注意点&quot;&gt;&lt;/a&gt;JAVA基础注意点&lt;/h2&gt;&lt;h3 id=&quot;JAVA的字符类型&quot;&gt;&lt;a href=&quot;#JAVA的字符类型&quot; class=&quot;headerlink&quot; title=&quot;JAVA的字符类型&quot;&gt;&lt;/a&gt;JAVA的字符类型&lt;/h3&gt;&lt;p&gt;java字符类型采用unicode码，char与整型各类型通用。char可直接由十进制或十六进制整形赋值，亦可以由十六进制的unicode码(使用’\uxxxx’表示)。如果将字符强制类型转换，将输出unicode码对应的十进制数。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi1=&lt;span class=&quot;number&quot;&gt;20013&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi2=&lt;span class=&quot;number&quot;&gt;0x4E2D&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi3=&lt;span class=&quot;string&quot;&gt;&#39;\u4E2D&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; hanzi4=&lt;span class=&quot;string&quot;&gt;&#39;中&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(hanzi1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(hanzi2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(hanzi3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)hanzi4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;中&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;20013&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://Crepuscule.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux Skills</title>
    <link href="http://Crepuscule.com/Linux/Linux-Distributions/Arch-Linux/Linux/Linux%20Distributions/Arch%20Linux/Arch-Linux-Skills/"/>
    <id>http://Crepuscule.com/Linux/Linux-Distributions/Arch-Linux/Linux/Linux Distributions/Arch Linux/Arch-Linux-Skills/</id>
    <published>2017-03-30T09:53:24.000Z</published>
    <updated>2017-07-07T10:36:52.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Software-Usage"><a href="#Software-Usage" class="headerlink" title="Software Usage"></a>Software Usage</h2><h3 id="package-manager"><a href="#package-manager" class="headerlink" title="package manager"></a>package manager</h3><ol>
<li>pacman软件包管理器<br>pacman 用 C 语言编写，使用 .pkg.tar.xz 打包格式。<br>使用方法如下:</li>
</ol>
<ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@arch] pacman -S package_name1 package_name2 <span class="comment">#安装或者升级单个软件包，或者一列软件包（包含依赖包）</span></div><div class="line">[root@arch] pacman -S plasma-&#123;desktop,mediacenter,nm&#125; <span class="comment">#安装多个含有相似名称的软件包，而并非整个包组或全部匹配的软件包； 例如，plasma:</span></div><div class="line">[root@arch] pacman -Sg gnome <span class="comment">#想要查看哪些包属于 gnome 组</span></div><div class="line"><span class="comment"># 如果列表中的包已经安装在系统中，它会被重新安装，即使它已经是最新的。可以用 --needed 选项覆盖这种行为</span></div></pre></td></tr></table></figure>
</li>
<li><p>卸载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@arch] pacman -R package_name <span class="comment">#删除单个软件包，保留其全部已经安装的依赖关系</span></div><div class="line">[root@arch] pacman -Rs package_name <span class="comment">#删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系</span></div></pre></td></tr></table></figure>
</li>
<li><p>升级</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@arch] pacman -Syu <span class="comment">#一个 pacman 命令就可以升级整个系统。花费的时间取决于系统有多老。这个命令会同步非本地(local)软件仓库并升级系统的软件包</span></div></pre></td></tr></table></figure>
</li>
<li><p>查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@arch] pacman -Q <span class="comment">#查询本地软件包数据库</span></div><div class="line">[root@arch] pacman -S <span class="comment">#查询远程同步数据库</span></div><div class="line">[root@arch] pacman -Ss <span class="comment">#可以在包数据库中查询软件包，查询位置包含了软件包的名字和描述</span></div><div class="line">[root@arch] pacman -Qs <span class="comment">#要查询已安装的软件包</span></div><div class="line">[root@arch] pacman -Si pacman -Qi package_name <span class="comment">#显示软件包的详尽的信息</span></div><div class="line">[root@arch] pacman -Qi package_name <span class="comment"># 查询本地安装包的详细信息</span></div><div class="line">[root@arch] pactree package_name <span class="comment">#显示软件包的依赖树</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据库结构<br>pacman数据库通常位于 /var/lib/pacman/sync. 对于每一个在/etc/pacman.conf中指定的软件仓库， 这里都有一个一致的数据库。数据库文件夹里每个tar.gz文件都包含着一个仓库的软件包信息。例如which 包:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">% tree <span class="built_in">which</span>-2.20-6 	</div><div class="line"><span class="built_in">which</span>-2.20-6</div><div class="line">|-- depends</div><div class="line">\`-- desc</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个 depends 项列出了该软件的依赖包， 而desc有该包的介绍，例如文件大小和MD5值</p>
<ul>
<li>清理软件包缓存<br>pacman 将下载的软件包保存在 /var/cache/pacman/pkg/ 并且不会自动移除旧的和未安装版本的软件包，因此需要手动清理，以免该文件夹过于庞大。<br><code>[root@arch] pacman -Sc</code></li>
<li><p>其它命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@arch] pacman -Syu package_name1 package_name2 ... <span class="comment">#升级系统时安装其他软件包</span></div><div class="line">[root@arch] pacman -U /path/to/package/package_name-version.pkg.tar.xz <span class="comment">#安装一个本地包</span></div><div class="line">[root@arch] pacman -U http://www.example.com/repo/example.pkg.tar.xz <span class="comment">#安装一个远程包（不在 pacman 配置的源里面）</span></div></pre></td></tr></table></figure>
</li>
<li><p>常见问题<br>“failed to commit transaction (invalid or corrupted package” 错误<br>看看/var/cache/pacman/pkg中是否有<em>.part结尾的文件，它们是没有完全下载的文件，删除它们并重新执行更新。这些程序一般是自定义的XferCommand 下载命令造成的。<br>`# find /var/cache/pacman/pkg/ -iname “</em>.part” -exec rm {} \;`</p>
</li>
</ul>
<p>“error: failed to init transaction (unable to lock database)” 错误<br>pacman 在更新软件包数据库前，比如安装软件包时会创建一个文件锁 /var/lib/pacman/db.lck。该文件会阻止其他 pacman 实例在同一时间修改软件包数据库。如果 pacman 在更新数据库时收到干扰，旧锁会一直存在。如果确认 pacman 没有在运行，那么删掉文件锁：<br><code># rm /var/lib/pacman/db.lck</code></p>
<ol>
<li>yaourt-Yet AnOther User Repository Tool (AUR helpers)<br>可以帮助用户从 Arch User Repository 搜索和/或安装包<br>语法和pacman一致，仅增加了一些参数</li>
</ol>
<ul>
<li><p>基本配置<br>更改源以提高速度</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[user@arch] sudo nano /etc/pacman.conf</div><div class="line">-&gt; add into pacman.conf</div><div class="line">    [archlinuxcn]</div><div class="line">    SigLevel = Optional TrustedOnly</div><div class="line">    Server   =  http://repo.archlinuxcn.org/<span class="variable">$arch</span></div><div class="line"><span class="comment"># 保存文件。现在同步软件库信息并安装Yaourt包管理器以及fakeroot。fakeroot是一个很重要的工具，它可以模拟超级用户权限，是Yaourt构建Arch软件包时的必要工具</span></div><div class="line">[user@arch] sudo pacman -Sy yaourt fakeroot</div></pre></td></tr></table></figure>
</li>
<li><p>使用方法<br>首先使用yaourt package_name 搜索包<br>接着选择序号，然后Yaourt就会从AUR里下载对相应序号的PKGBUILD构建脚本，并问你是否需要编辑这个构建脚本。一般我们都不需要编辑。<br>再然后Yaourt会检查是否需要安装依赖包。之后Yaourt询问你是否继续构建这个Arch软件包。输入Y继续构建。<br>下载完源软件包后，Yaourt就开始构建Arch包了。构建完成后输入Y将软件包安装到Arch Linux系统。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Software-Usage&quot;&gt;&lt;a href=&quot;#Software-Usage&quot; class=&quot;headerlink&quot; title=&quot;Software Usage&quot;&gt;&lt;/a&gt;Software Usage&lt;/h2&gt;&lt;h3 id=&quot;package-manager&quot;&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://Crepuscule.com/categories/Linux/"/>
    
      <category term="Linux Distributions" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/"/>
    
      <category term="Arch Linux" scheme="http://Crepuscule.com/categories/Linux/Linux-Distributions/Arch-Linux/"/>
    
    
      <category term="Linux" scheme="http://Crepuscule.com/tags/Linux/"/>
    
      <category term="Arch" scheme="http://Crepuscule.com/tags/Arch/"/>
    
  </entry>
  
</feed>
